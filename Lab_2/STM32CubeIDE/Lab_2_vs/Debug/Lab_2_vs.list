
Lab_2_vs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fdc  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080090e8  080090e8  000190e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009158  08009158  00020184  2**0
                  CONTENTS
  4 .ARM          00000000  08009158  08009158  00020184  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009158  08009158  00020184  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009158  08009158  00019158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800915c  0800915c  0001915c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000184  20000000  08009160  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013b8  20000184  080092e4  00020184  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000153c  080092e4  0002153c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020184  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014355  00000000  00000000  000201ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003411  00000000  00000000  00034502  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001238  00000000  00000000  00037918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010b0  00000000  00000000  00038b50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001b7b5  00000000  00000000  00039c00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015dc8  00000000  00000000  000553b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090615  00000000  00000000  0006b17d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000fb792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004b44  00000000  00000000  000fb7e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000184 	.word	0x20000184
 8000128:	00000000 	.word	0x00000000
 800012c:	080090d0 	.word	0x080090d0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000188 	.word	0x20000188
 8000148:	080090d0 	.word	0x080090d0

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <disp1color_UpdateFromBuff>:

//==============================================================================
// Процедура обновляет состояние индикаторов в соответствии с буфером кадра disp1color_buff
//==============================================================================
void disp1color_UpdateFromBuff(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	af00      	add	r7, sp, #0
  DMD_1COLOR_DisplayFullUpdate(disp1color_buff, sizeof(disp1color_buff));
 8000160:	2140      	movs	r1, #64	; 0x40
 8000162:	4802      	ldr	r0, [pc, #8]	; (800016c <disp1color_UpdateFromBuff+0x10>)
 8000164:	f000 f862 	bl	800022c <DMD_1COLOR_DisplayFullUpdate>

  //printf("BUF horz:\n");
  //print_buf(DMD_1COLOR_Buff, sizeof(DMD_1COLOR_Buff));
}
 8000168:	bf00      	nop
 800016a:	bd80      	pop	{r7, pc}
 800016c:	20000220 	.word	0x20000220

08000170 <disp1color_DrawPixel>:

//==============================================================================
// Процедура устанавливает состояние 1 пикселя дисплея
//==============================================================================
void disp1color_DrawPixel(int16_t X, int16_t Y, uint8_t State)
{
 8000170:	b480      	push	{r7}
 8000172:	b085      	sub	sp, #20
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
 800017a:	460b      	mov	r3, r1
 800017c:	80bb      	strh	r3, [r7, #4]
 800017e:	4613      	mov	r3, r2
 8000180:	70fb      	strb	r3, [r7, #3]
  //Х и У координаты пикселя, отсчитываются слева направо (Х) сверху вниз (У) с 0
  // Проверяем, находится ли точка в поле отрисовки дисплея
  if ((X >= DISP1COLOR_Width) || (Y >= DISP1COLOR_Height) || (X < 0) || (Y < 0))
 8000182:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000186:	2b1f      	cmp	r3, #31
 8000188:	dc48      	bgt.n	800021c <disp1color_DrawPixel+0xac>
 800018a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800018e:	2b0f      	cmp	r3, #15
 8000190:	dc44      	bgt.n	800021c <disp1color_DrawPixel+0xac>
 8000192:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000196:	2b00      	cmp	r3, #0
 8000198:	db40      	blt.n	800021c <disp1color_DrawPixel+0xac>
 800019a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800019e:	2b00      	cmp	r3, #0
 80001a0:	db3c      	blt.n	800021c <disp1color_DrawPixel+0xac>
    return;
  
  //Байты относительно матрицы расположены вертикально, в 2 ряда
  uint16_t ByteIdx = Y >> 3;
 80001a2:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80001a6:	10db      	asrs	r3, r3, #3
 80001a8:	b21b      	sxth	r3, r3
 80001aa:	81fb      	strh	r3, [r7, #14]
  uint8_t BitIdx = Y - (ByteIdx << 3); // Высота относительно строки байт (0<=Y<=7)
 80001ac:	88bb      	ldrh	r3, [r7, #4]
 80001ae:	b2da      	uxtb	r2, r3
 80001b0:	89fb      	ldrh	r3, [r7, #14]
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	00db      	lsls	r3, r3, #3
 80001b6:	b2db      	uxtb	r3, r3
 80001b8:	1ad3      	subs	r3, r2, r3
 80001ba:	737b      	strb	r3, [r7, #13]
  ByteIdx *= DISP1COLOR_Width;  
 80001bc:	89fb      	ldrh	r3, [r7, #14]
 80001be:	015b      	lsls	r3, r3, #5
 80001c0:	81fb      	strh	r3, [r7, #14]
  ByteIdx += X;
 80001c2:	88fa      	ldrh	r2, [r7, #6]
 80001c4:	89fb      	ldrh	r3, [r7, #14]
 80001c6:	4413      	add	r3, r2
 80001c8:	81fb      	strh	r3, [r7, #14]
  
  //Заполнение буфера данных для отрисовки
  if (State)
 80001ca:	78fb      	ldrb	r3, [r7, #3]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	d00f      	beq.n	80001f0 <disp1color_DrawPixel+0x80>
    disp1color_buff[ByteIdx] |= (1 << BitIdx);
 80001d0:	89fb      	ldrh	r3, [r7, #14]
 80001d2:	4a15      	ldr	r2, [pc, #84]	; (8000228 <disp1color_DrawPixel+0xb8>)
 80001d4:	5cd3      	ldrb	r3, [r2, r3]
 80001d6:	b25a      	sxtb	r2, r3
 80001d8:	7b7b      	ldrb	r3, [r7, #13]
 80001da:	2101      	movs	r1, #1
 80001dc:	fa01 f303 	lsl.w	r3, r1, r3
 80001e0:	b25b      	sxtb	r3, r3
 80001e2:	4313      	orrs	r3, r2
 80001e4:	b25a      	sxtb	r2, r3
 80001e6:	89fb      	ldrh	r3, [r7, #14]
 80001e8:	b2d1      	uxtb	r1, r2
 80001ea:	4a0f      	ldr	r2, [pc, #60]	; (8000228 <disp1color_DrawPixel+0xb8>)
 80001ec:	54d1      	strb	r1, [r2, r3]
 80001ee:	e010      	b.n	8000212 <disp1color_DrawPixel+0xa2>
  else
    disp1color_buff[ByteIdx] &= ~(1 << BitIdx);
 80001f0:	89fb      	ldrh	r3, [r7, #14]
 80001f2:	4a0d      	ldr	r2, [pc, #52]	; (8000228 <disp1color_DrawPixel+0xb8>)
 80001f4:	5cd3      	ldrb	r3, [r2, r3]
 80001f6:	b25a      	sxtb	r2, r3
 80001f8:	7b7b      	ldrb	r3, [r7, #13]
 80001fa:	2101      	movs	r1, #1
 80001fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000200:	b25b      	sxtb	r3, r3
 8000202:	43db      	mvns	r3, r3
 8000204:	b25b      	sxtb	r3, r3
 8000206:	4013      	ands	r3, r2
 8000208:	b25a      	sxtb	r2, r3
 800020a:	89fb      	ldrh	r3, [r7, #14]
 800020c:	b2d1      	uxtb	r1, r2
 800020e:	4a06      	ldr	r2, [pc, #24]	; (8000228 <disp1color_DrawPixel+0xb8>)
 8000210:	54d1      	strb	r1, [r2, r3]

 // printf("PIX:%d%s", disp1color_buff[ByteIdx], "\n");
  uint8_t buf = disp1color_buff[ByteIdx];
 8000212:	89fb      	ldrh	r3, [r7, #14]
 8000214:	4a04      	ldr	r2, [pc, #16]	; (8000228 <disp1color_DrawPixel+0xb8>)
 8000216:	5cd3      	ldrb	r3, [r2, r3]
 8000218:	733b      	strb	r3, [r7, #12]
 800021a:	e000      	b.n	800021e <disp1color_DrawPixel+0xae>
    return;
 800021c:	bf00      	nop
//  for (int i = 0; i < 8; i++) {
//	  printf("%c", (buf & 0x80) ? '1' : '0');
//	  buf <<= 1;
//  }
//  printf("\n");
}
 800021e:	3714      	adds	r7, #20
 8000220:	46bd      	mov	sp, r7
 8000222:	bc80      	pop	{r7}
 8000224:	4770      	bx	lr
 8000226:	bf00      	nop
 8000228:	20000220 	.word	0x20000220

0800022c <DMD_1COLOR_DisplayFullUpdate>:

//==============================================================================
// Процедура подготавливает буфер на передачу в экран в соответствии с буфером pBuff графической бибилиотеки
//==============================================================================
void DMD_1COLOR_DisplayFullUpdate(uint8_t *pBuff, uint16_t BuffLen)
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b082      	sub	sp, #8
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
 8000234:	460b      	mov	r3, r1
 8000236:	807b      	strh	r3, [r7, #2]
	DMD_1COLOR_UpdateRow4(0, pBuff, BuffLen);
 8000238:	887b      	ldrh	r3, [r7, #2]
 800023a:	461a      	mov	r2, r3
 800023c:	6879      	ldr	r1, [r7, #4]
 800023e:	2000      	movs	r0, #0
 8000240:	f000 f816 	bl	8000270 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(1, pBuff, BuffLen);
 8000244:	887b      	ldrh	r3, [r7, #2]
 8000246:	461a      	mov	r2, r3
 8000248:	6879      	ldr	r1, [r7, #4]
 800024a:	2001      	movs	r0, #1
 800024c:	f000 f810 	bl	8000270 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(2, pBuff, BuffLen);
 8000250:	887b      	ldrh	r3, [r7, #2]
 8000252:	461a      	mov	r2, r3
 8000254:	6879      	ldr	r1, [r7, #4]
 8000256:	2002      	movs	r0, #2
 8000258:	f000 f80a 	bl	8000270 <DMD_1COLOR_UpdateRow4>
	DMD_1COLOR_UpdateRow4(3, pBuff, BuffLen);
 800025c:	887b      	ldrh	r3, [r7, #2]
 800025e:	461a      	mov	r2, r3
 8000260:	6879      	ldr	r1, [r7, #4]
 8000262:	2003      	movs	r0, #3
 8000264:	f000 f804 	bl	8000270 <DMD_1COLOR_UpdateRow4>
}
 8000268:	bf00      	nop
 800026a:	3708      	adds	r7, #8
 800026c:	46bd      	mov	sp, r7
 800026e:	bd80      	pop	{r7, pc}

08000270 <DMD_1COLOR_UpdateRow4>:

//==============================================================================
// Процедура обновляет поочерёдно все матрицы экрана
//==============================================================================
void DMD_1COLOR_UpdateRow4(uint8_t Row4, uint8_t *pBuff, uint16_t BuffLen)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b088      	sub	sp, #32
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	6039      	str	r1, [r7, #0]
 800027a:	71fb      	strb	r3, [r7, #7]
 800027c:	4613      	mov	r3, r2
 800027e:	80bb      	strh	r3, [r7, #4]
	// Подготавливаем данные для передачи
	uint16_t MatrixInRow = DMD_1COLOR_ScreenWidth / DMD_1COLOR_MatrixWidth;
 8000280:	4b2e      	ldr	r3, [pc, #184]	; (800033c <DMD_1COLOR_UpdateRow4+0xcc>)
 8000282:	781b      	ldrb	r3, [r3, #0]
 8000284:	095b      	lsrs	r3, r3, #5
 8000286:	b2db      	uxtb	r3, r3
 8000288:	81bb      	strh	r3, [r7, #12]
	uint16_t MatrixInCol = DMD_1COLOR_ScreenHeight / DMD_1COLOR_MatrixHeight;
 800028a:	4b2d      	ldr	r3, [pc, #180]	; (8000340 <DMD_1COLOR_UpdateRow4+0xd0>)
 800028c:	781b      	ldrb	r3, [r3, #0]
 800028e:	091b      	lsrs	r3, r3, #4
 8000290:	b2db      	uxtb	r3, r3
 8000292:	817b      	strh	r3, [r7, #10]
	uint8_t MatrixLines8 = DMD_1COLOR_MatrixHeight >> 3;
 8000294:	2302      	movs	r3, #2
 8000296:	727b      	strb	r3, [r7, #9]
	uint16_t StartIdxRow = 0, StartIdxCol = 0;
 8000298:	2300      	movs	r3, #0
 800029a:	83fb      	strh	r3, [r7, #30]
 800029c:	2300      	movs	r3, #0
 800029e:	83bb      	strh	r3, [r7, #28]

	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 80002a0:	2300      	movs	r3, #0
 80002a2:	76fb      	strb	r3, [r7, #27]
 80002a4:	e040      	b.n	8000328 <DMD_1COLOR_UpdateRow4+0xb8>
	{
		StartIdxCol = StartIdxRow;
 80002a6:	8bfb      	ldrh	r3, [r7, #30]
 80002a8:	83bb      	strh	r3, [r7, #28]

		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80002aa:	2300      	movs	r3, #0
 80002ac:	76bb      	strb	r3, [r7, #26]
 80002ae:	e028      	b.n	8000302 <DMD_1COLOR_UpdateRow4+0x92>
		{
			// Копируем буфер кадра одной матрицы
			uint8_t *pDst = DMD_1COLOR_MatrixBuff;
 80002b0:	4b24      	ldr	r3, [pc, #144]	; (8000344 <DMD_1COLOR_UpdateRow4+0xd4>)
 80002b2:	617b      	str	r3, [r7, #20]
			uint8_t *pSrc = &pBuff[StartIdxCol];
 80002b4:	8bbb      	ldrh	r3, [r7, #28]
 80002b6:	683a      	ldr	r2, [r7, #0]
 80002b8:	4413      	add	r3, r2
 80002ba:	613b      	str	r3, [r7, #16]

			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80002bc:	2300      	movs	r3, #0
 80002be:	73fb      	strb	r3, [r7, #15]
 80002c0:	e015      	b.n	80002ee <DMD_1COLOR_UpdateRow4+0x7e>
			{
				memcpy(pDst, pSrc, DMD_1COLOR_MatrixWidth);
 80002c2:	2220      	movs	r2, #32
 80002c4:	6939      	ldr	r1, [r7, #16]
 80002c6:	6978      	ldr	r0, [r7, #20]
 80002c8:	f008 feec 	bl	80090a4 <memcpy>
				DMD_1COLOR_SendFromMatrixBuff(Row4, DMD_1COLOR_MatrixBuff);
 80002cc:	79fb      	ldrb	r3, [r7, #7]
 80002ce:	491d      	ldr	r1, [pc, #116]	; (8000344 <DMD_1COLOR_UpdateRow4+0xd4>)
 80002d0:	4618      	mov	r0, r3
 80002d2:	f000 f839 	bl	8000348 <DMD_1COLOR_SendFromMatrixBuff>
				pDst += DMD_1COLOR_MatrixWidth;
 80002d6:	697b      	ldr	r3, [r7, #20]
 80002d8:	3320      	adds	r3, #32
 80002da:	617b      	str	r3, [r7, #20]
				pSrc += DMD_1COLOR_ScreenWidth;
 80002dc:	4b17      	ldr	r3, [pc, #92]	; (800033c <DMD_1COLOR_UpdateRow4+0xcc>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	461a      	mov	r2, r3
 80002e2:	693b      	ldr	r3, [r7, #16]
 80002e4:	4413      	add	r3, r2
 80002e6:	613b      	str	r3, [r7, #16]
			for (uint8_t Line8 = 0; Line8 < MatrixLines8; Line8++)
 80002e8:	7bfb      	ldrb	r3, [r7, #15]
 80002ea:	3301      	adds	r3, #1
 80002ec:	73fb      	strb	r3, [r7, #15]
 80002ee:	7bfa      	ldrb	r2, [r7, #15]
 80002f0:	7a7b      	ldrb	r3, [r7, #9]
 80002f2:	429a      	cmp	r2, r3
 80002f4:	d3e5      	bcc.n	80002c2 <DMD_1COLOR_UpdateRow4+0x52>
			}

			StartIdxCol += DMD_1COLOR_MatrixWidth;
 80002f6:	8bbb      	ldrh	r3, [r7, #28]
 80002f8:	3320      	adds	r3, #32
 80002fa:	83bb      	strh	r3, [r7, #28]
		for (uint8_t Col = 0; Col < MatrixInCol; Col++)
 80002fc:	7ebb      	ldrb	r3, [r7, #26]
 80002fe:	3301      	adds	r3, #1
 8000300:	76bb      	strb	r3, [r7, #26]
 8000302:	7ebb      	ldrb	r3, [r7, #26]
 8000304:	b29b      	uxth	r3, r3
 8000306:	897a      	ldrh	r2, [r7, #10]
 8000308:	429a      	cmp	r2, r3
 800030a:	d8d1      	bhi.n	80002b0 <DMD_1COLOR_UpdateRow4+0x40>
		}
		StartIdxRow += MatrixLines8 * DMD_1COLOR_ScreenWidth;
 800030c:	7a7b      	ldrb	r3, [r7, #9]
 800030e:	b29b      	uxth	r3, r3
 8000310:	4a0a      	ldr	r2, [pc, #40]	; (800033c <DMD_1COLOR_UpdateRow4+0xcc>)
 8000312:	7812      	ldrb	r2, [r2, #0]
 8000314:	b292      	uxth	r2, r2
 8000316:	fb02 f303 	mul.w	r3, r2, r3
 800031a:	b29a      	uxth	r2, r3
 800031c:	8bfb      	ldrh	r3, [r7, #30]
 800031e:	4413      	add	r3, r2
 8000320:	83fb      	strh	r3, [r7, #30]
	for (uint8_t Row = 0; Row < MatrixInRow; Row++)
 8000322:	7efb      	ldrb	r3, [r7, #27]
 8000324:	3301      	adds	r3, #1
 8000326:	76fb      	strb	r3, [r7, #27]
 8000328:	7efb      	ldrb	r3, [r7, #27]
 800032a:	b29b      	uxth	r3, r3
 800032c:	89ba      	ldrh	r2, [r7, #12]
 800032e:	429a      	cmp	r2, r3
 8000330:	d8b9      	bhi.n	80002a6 <DMD_1COLOR_UpdateRow4+0x36>
	}
}
 8000332:	bf00      	nop
 8000334:	bf00      	nop
 8000336:	3720      	adds	r7, #32
 8000338:	46bd      	mov	sp, r7
 800033a:	bd80      	pop	{r7, pc}
 800033c:	20000001 	.word	0x20000001
 8000340:	20000000 	.word	0x20000000
 8000344:	200001a0 	.word	0x200001a0

08000348 <DMD_1COLOR_SendFromMatrixBuff>:

//==============================================================================
// Процедура обновляет 1 матрицу
//==============================================================================
void DMD_1COLOR_SendFromMatrixBuff(uint8_t Row4, uint8_t *pBuff)
{
 8000348:	b590      	push	{r4, r7, lr}
 800034a:	b087      	sub	sp, #28
 800034c:	af00      	add	r7, sp, #0
 800034e:	4603      	mov	r3, r0
 8000350:	6039      	str	r1, [r7, #0]
 8000352:	71fb      	strb	r3, [r7, #7]
	uint8_t MatrixRows8bit = DMD_1COLOR_MatrixHeight >> 3;
 8000354:	2302      	movs	r3, #2
 8000356:	747b      	strb	r3, [r7, #17]
	uint8_t MatrixCols8bit = DMD_1COLOR_MatrixWidth >> 3;
 8000358:	2304      	movs	r3, #4
 800035a:	743b      	strb	r3, [r7, #16]
	uint8_t *pPart = (uint8_t *) &(DMD_1COLOR_Buff[Row4][0]);
 800035c:	79fb      	ldrb	r3, [r7, #7]
 800035e:	011b      	lsls	r3, r3, #4
 8000360:	4a22      	ldr	r2, [pc, #136]	; (80003ec <DMD_1COLOR_SendFromMatrixBuff+0xa4>)
 8000362:	4413      	add	r3, r2
 8000364:	617b      	str	r3, [r7, #20]

	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 8000366:	2300      	movs	r3, #0
 8000368:	74fb      	strb	r3, [r7, #19]
 800036a:	e035      	b.n	80003d8 <DMD_1COLOR_SendFromMatrixBuff+0x90>
	{
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 800036c:	7c7b      	ldrb	r3, [r7, #17]
 800036e:	74bb      	strb	r3, [r7, #18]
 8000370:	e02c      	b.n	80003cc <DMD_1COLOR_SendFromMatrixBuff+0x84>
		{
			uint8_t *p8Bytes = pBuff + ((Row - 1) * DMD_1COLOR_MatrixWidth);
 8000372:	7cbb      	ldrb	r3, [r7, #18]
 8000374:	3b01      	subs	r3, #1
 8000376:	015b      	lsls	r3, r3, #5
 8000378:	461a      	mov	r2, r3
 800037a:	683b      	ldr	r3, [r7, #0]
 800037c:	4413      	add	r3, r2
 800037e:	60fb      	str	r3, [r7, #12]
			p8Bytes += (Col << 3);
 8000380:	7cfb      	ldrb	r3, [r7, #19]
 8000382:	00db      	lsls	r3, r3, #3
 8000384:	461a      	mov	r2, r3
 8000386:	68fb      	ldr	r3, [r7, #12]
 8000388:	4413      	add	r3, r2
 800038a:	60fb      	str	r3, [r7, #12]

			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << (Row4 + 4), p8Bytes);
 800038c:	79fb      	ldrb	r3, [r7, #7]
 800038e:	3304      	adds	r3, #4
 8000390:	2201      	movs	r2, #1
 8000392:	fa02 f303 	lsl.w	r3, r2, r3
 8000396:	b2da      	uxtb	r2, r3
 8000398:	697c      	ldr	r4, [r7, #20]
 800039a:	1c63      	adds	r3, r4, #1
 800039c:	617b      	str	r3, [r7, #20]
 800039e:	68f9      	ldr	r1, [r7, #12]
 80003a0:	4610      	mov	r0, r2
 80003a2:	f000 f825 	bl	80003f0 <DMD_1COLOR_GetFrom8ScreenBytes>
 80003a6:	4603      	mov	r3, r0
 80003a8:	7023      	strb	r3, [r4, #0]
			*(pPart++) = DMD_1COLOR_GetFrom8ScreenBytes(1 << Row4, p8Bytes);
 80003aa:	79fb      	ldrb	r3, [r7, #7]
 80003ac:	2201      	movs	r2, #1
 80003ae:	fa02 f303 	lsl.w	r3, r2, r3
 80003b2:	b2da      	uxtb	r2, r3
 80003b4:	697c      	ldr	r4, [r7, #20]
 80003b6:	1c63      	adds	r3, r4, #1
 80003b8:	617b      	str	r3, [r7, #20]
 80003ba:	68f9      	ldr	r1, [r7, #12]
 80003bc:	4610      	mov	r0, r2
 80003be:	f000 f817 	bl	80003f0 <DMD_1COLOR_GetFrom8ScreenBytes>
 80003c2:	4603      	mov	r3, r0
 80003c4:	7023      	strb	r3, [r4, #0]
		for (uint8_t Row = MatrixRows8bit; Row; Row--)
 80003c6:	7cbb      	ldrb	r3, [r7, #18]
 80003c8:	3b01      	subs	r3, #1
 80003ca:	74bb      	strb	r3, [r7, #18]
 80003cc:	7cbb      	ldrb	r3, [r7, #18]
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d1cf      	bne.n	8000372 <DMD_1COLOR_SendFromMatrixBuff+0x2a>
	for (uint8_t Col = 0; Col < MatrixCols8bit; Col++)
 80003d2:	7cfb      	ldrb	r3, [r7, #19]
 80003d4:	3301      	adds	r3, #1
 80003d6:	74fb      	strb	r3, [r7, #19]
 80003d8:	7cfa      	ldrb	r2, [r7, #19]
 80003da:	7c3b      	ldrb	r3, [r7, #16]
 80003dc:	429a      	cmp	r2, r3
 80003de:	d3c5      	bcc.n	800036c <DMD_1COLOR_SendFromMatrixBuff+0x24>
		}
	}
}
 80003e0:	bf00      	nop
 80003e2:	bf00      	nop
 80003e4:	371c      	adds	r7, #28
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd90      	pop	{r4, r7, pc}
 80003ea:	bf00      	nop
 80003ec:	200001e0 	.word	0x200001e0

080003f0 <DMD_1COLOR_GetFrom8ScreenBytes>:
//==============================================================================
// Функция возвращает байт (строку из 8 светодиодов) по 8-байтному фрагменту буфера
// графической библиотеки и маске соответствующей строки светодиодов во фрагменте
//==============================================================================
uint8_t DMD_1COLOR_GetFrom8ScreenBytes(uint8_t Mask, uint8_t *pBuff)
{
 80003f0:	b480      	push	{r7}
 80003f2:	b085      	sub	sp, #20
 80003f4:	af00      	add	r7, sp, #0
 80003f6:	4603      	mov	r3, r0
 80003f8:	6039      	str	r1, [r7, #0]
 80003fa:	71fb      	strb	r3, [r7, #7]
	uint8_t Byte = 0;
 80003fc:	2300      	movs	r3, #0
 80003fe:	73fb      	strb	r3, [r7, #15]
	//Переводим "вертикальные" байты из массива в горизонтальные
	//в соответствии с текущей строкой.
	//В итоге получается массив, где биты расположены горизонтально,
	//Первый бит слева внизу, счет увеличивается вверх и вправо.
	//Но строки в секторе расположены сверху вниз
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 8000400:	2380      	movs	r3, #128	; 0x80
 8000402:	73bb      	strb	r3, [r7, #14]
 8000404:	e010      	b.n	8000428 <DMD_1COLOR_GetFrom8ScreenBytes+0x38>
	{
		if (*pBuff & Mask)
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	781a      	ldrb	r2, [r3, #0]
 800040a:	79fb      	ldrb	r3, [r7, #7]
 800040c:	4013      	ands	r3, r2
 800040e:	b2db      	uxtb	r3, r3
 8000410:	2b00      	cmp	r3, #0
 8000412:	d003      	beq.n	800041c <DMD_1COLOR_GetFrom8ScreenBytes+0x2c>
			Byte |= BitMask;
 8000414:	7bfa      	ldrb	r2, [r7, #15]
 8000416:	7bbb      	ldrb	r3, [r7, #14]
 8000418:	4313      	orrs	r3, r2
 800041a:	73fb      	strb	r3, [r7, #15]
	for (uint8_t BitMask = 0x80; BitMask; BitMask >>= 1, pBuff++)
 800041c:	7bbb      	ldrb	r3, [r7, #14]
 800041e:	085b      	lsrs	r3, r3, #1
 8000420:	73bb      	strb	r3, [r7, #14]
 8000422:	683b      	ldr	r3, [r7, #0]
 8000424:	3301      	adds	r3, #1
 8000426:	603b      	str	r3, [r7, #0]
 8000428:	7bbb      	ldrb	r3, [r7, #14]
 800042a:	2b00      	cmp	r3, #0
 800042c:	d1eb      	bne.n	8000406 <DMD_1COLOR_GetFrom8ScreenBytes+0x16>
	}

//#if (DMD_1COLOR_Inverse == 1)
	//Инвертируем данные (так как LED панель горит при 0)
	Byte ^= 0xFF;
 800042e:	7bfb      	ldrb	r3, [r7, #15]
 8000430:	43db      	mvns	r3, r3
 8000432:	73fb      	strb	r3, [r7, #15]
//#endif

	return Byte;
 8000434:	7bfb      	ldrb	r3, [r7, #15]
}
 8000436:	4618      	mov	r0, r3
 8000438:	3714      	adds	r7, #20
 800043a:	46bd      	mov	sp, r7
 800043c:	bc80      	pop	{r7}
 800043e:	4770      	bx	lr

08000440 <prepare_data>:
//==============================================================================


//Копирование из подготовленного буфера в массивиы для построчного вводы в матрицу
void prepare_data() {
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
	//Идем по строкам
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 8000446:	2300      	movs	r3, #0
 8000448:	71fb      	strb	r3, [r7, #7]
 800044a:	e042      	b.n	80004d2 <prepare_data+0x92>
		//По столбцам
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 800044c:	2300      	movs	r3, #0
 800044e:	71bb      	strb	r3, [r7, #6]
 8000450:	e039      	b.n	80004c6 <prepare_data+0x86>
			if (i == 0) {
 8000452:	79fb      	ldrb	r3, [r7, #7]
 8000454:	2b00      	cmp	r3, #0
 8000456:	d10a      	bne.n	800046e <prepare_data+0x2e>
				data1[k] = DMD_1COLOR_Buff[i][k];
 8000458:	79f9      	ldrb	r1, [r7, #7]
 800045a:	79ba      	ldrb	r2, [r7, #6]
 800045c:	79bb      	ldrb	r3, [r7, #6]
 800045e:	4821      	ldr	r0, [pc, #132]	; (80004e4 <prepare_data+0xa4>)
 8000460:	0109      	lsls	r1, r1, #4
 8000462:	4401      	add	r1, r0
 8000464:	440a      	add	r2, r1
 8000466:	7811      	ldrb	r1, [r2, #0]
 8000468:	4a1f      	ldr	r2, [pc, #124]	; (80004e8 <prepare_data+0xa8>)
 800046a:	54d1      	strb	r1, [r2, r3]
 800046c:	e028      	b.n	80004c0 <prepare_data+0x80>
			}
			else if (i == 1) {
 800046e:	79fb      	ldrb	r3, [r7, #7]
 8000470:	2b01      	cmp	r3, #1
 8000472:	d10a      	bne.n	800048a <prepare_data+0x4a>
				data2[k] = DMD_1COLOR_Buff[i][k];
 8000474:	79f9      	ldrb	r1, [r7, #7]
 8000476:	79ba      	ldrb	r2, [r7, #6]
 8000478:	79bb      	ldrb	r3, [r7, #6]
 800047a:	481a      	ldr	r0, [pc, #104]	; (80004e4 <prepare_data+0xa4>)
 800047c:	0109      	lsls	r1, r1, #4
 800047e:	4401      	add	r1, r0
 8000480:	440a      	add	r2, r1
 8000482:	7811      	ldrb	r1, [r2, #0]
 8000484:	4a19      	ldr	r2, [pc, #100]	; (80004ec <prepare_data+0xac>)
 8000486:	54d1      	strb	r1, [r2, r3]
 8000488:	e01a      	b.n	80004c0 <prepare_data+0x80>
			}
			else if (i == 2) {
 800048a:	79fb      	ldrb	r3, [r7, #7]
 800048c:	2b02      	cmp	r3, #2
 800048e:	d10a      	bne.n	80004a6 <prepare_data+0x66>
				data3[k] = DMD_1COLOR_Buff[i][k];
 8000490:	79f9      	ldrb	r1, [r7, #7]
 8000492:	79ba      	ldrb	r2, [r7, #6]
 8000494:	79bb      	ldrb	r3, [r7, #6]
 8000496:	4813      	ldr	r0, [pc, #76]	; (80004e4 <prepare_data+0xa4>)
 8000498:	0109      	lsls	r1, r1, #4
 800049a:	4401      	add	r1, r0
 800049c:	440a      	add	r2, r1
 800049e:	7811      	ldrb	r1, [r2, #0]
 80004a0:	4a13      	ldr	r2, [pc, #76]	; (80004f0 <prepare_data+0xb0>)
 80004a2:	54d1      	strb	r1, [r2, r3]
 80004a4:	e00c      	b.n	80004c0 <prepare_data+0x80>
			}
			else if (i == 3) {
 80004a6:	79fb      	ldrb	r3, [r7, #7]
 80004a8:	2b03      	cmp	r3, #3
 80004aa:	d109      	bne.n	80004c0 <prepare_data+0x80>
				data4[k] = DMD_1COLOR_Buff[i][k];
 80004ac:	79f9      	ldrb	r1, [r7, #7]
 80004ae:	79ba      	ldrb	r2, [r7, #6]
 80004b0:	79bb      	ldrb	r3, [r7, #6]
 80004b2:	480c      	ldr	r0, [pc, #48]	; (80004e4 <prepare_data+0xa4>)
 80004b4:	0109      	lsls	r1, r1, #4
 80004b6:	4401      	add	r1, r0
 80004b8:	440a      	add	r2, r1
 80004ba:	7811      	ldrb	r1, [r2, #0]
 80004bc:	4a0d      	ldr	r2, [pc, #52]	; (80004f4 <prepare_data+0xb4>)
 80004be:	54d1      	strb	r1, [r2, r3]
		for (uint8_t k = 0; k < sizeof(DMD_1COLOR_Buff[0]); k++) {
 80004c0:	79bb      	ldrb	r3, [r7, #6]
 80004c2:	3301      	adds	r3, #1
 80004c4:	71bb      	strb	r3, [r7, #6]
 80004c6:	79bb      	ldrb	r3, [r7, #6]
 80004c8:	2b0f      	cmp	r3, #15
 80004ca:	d9c2      	bls.n	8000452 <prepare_data+0x12>
	for (uint8_t i = 0; i < sizeof(DMD_1COLOR_Buff) / sizeof(DMD_1COLOR_Buff[0]); i++) {
 80004cc:	79fb      	ldrb	r3, [r7, #7]
 80004ce:	3301      	adds	r3, #1
 80004d0:	71fb      	strb	r3, [r7, #7]
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b03      	cmp	r3, #3
 80004d6:	d9b9      	bls.n	800044c <prepare_data+0xc>
			}
		}
	}
}
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	bc80      	pop	{r7}
 80004e2:	4770      	bx	lr
 80004e4:	200001e0 	.word	0x200001e0
 80004e8:	20000260 	.word	0x20000260
 80004ec:	20000270 	.word	0x20000270
 80004f0:	20000280 	.word	0x20000280
 80004f4:	20000290 	.word	0x20000290

080004f8 <disp_row>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void disp_row(uint16_t row) {
 80004f8:	b580      	push	{r7, lr}
 80004fa:	b084      	sub	sp, #16
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	4603      	mov	r3, r0
 8000500:	80fb      	strh	r3, [r7, #6]

	if (row == 0) {
 8000502:	88fb      	ldrh	r3, [r7, #6]
 8000504:	2b00      	cmp	r3, #0
 8000506:	d122      	bne.n	800054e <disp_row+0x56>

		for (uint8_t i = 0; i < 6; i++) {
 8000508:	2300      	movs	r3, #0
 800050a:	73fb      	strb	r3, [r7, #15]
 800050c:	e008      	b.n	8000520 <disp_row+0x28>
			HAL_SPI_Transmit(&hspi1, &data1, 16, 10);
 800050e:	230a      	movs	r3, #10
 8000510:	2210      	movs	r2, #16
 8000512:	4954      	ldr	r1, [pc, #336]	; (8000664 <disp_row+0x16c>)
 8000514:	4854      	ldr	r0, [pc, #336]	; (8000668 <disp_row+0x170>)
 8000516:	f003 f8ed 	bl	80036f4 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 800051a:	7bfb      	ldrb	r3, [r7, #15]
 800051c:	3301      	adds	r3, #1
 800051e:	73fb      	strb	r3, [r7, #15]
 8000520:	7bfb      	ldrb	r3, [r7, #15]
 8000522:	2b05      	cmp	r3, #5
 8000524:	d9f3      	bls.n	800050e <disp_row+0x16>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2140      	movs	r1, #64	; 0x40
 800052a:	4850      	ldr	r0, [pc, #320]	; (800066c <disp_row+0x174>)
 800052c:	f000 fecc 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000530:	2201      	movs	r2, #1
 8000532:	2140      	movs	r1, #64	; 0x40
 8000534:	484d      	ldr	r0, [pc, #308]	; (800066c <disp_row+0x174>)
 8000536:	f000 fec7 	bl	80012c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 800053a:	2200      	movs	r2, #0
 800053c:	2101      	movs	r1, #1
 800053e:	484c      	ldr	r0, [pc, #304]	; (8000670 <disp_row+0x178>)
 8000540:	f000 fec2 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000544:	2200      	movs	r2, #0
 8000546:	2102      	movs	r1, #2
 8000548:	4849      	ldr	r0, [pc, #292]	; (8000670 <disp_row+0x178>)
 800054a:	f000 febd 	bl	80012c8 <HAL_GPIO_WritePin>
	}
	if (row == 1) {
 800054e:	88fb      	ldrh	r3, [r7, #6]
 8000550:	2b01      	cmp	r3, #1
 8000552:	d122      	bne.n	800059a <disp_row+0xa2>

		for (uint8_t i = 0; i < 6; i++) {
 8000554:	2300      	movs	r3, #0
 8000556:	73bb      	strb	r3, [r7, #14]
 8000558:	e008      	b.n	800056c <disp_row+0x74>
			HAL_SPI_Transmit(&hspi1, &data2, 16, 10);
 800055a:	230a      	movs	r3, #10
 800055c:	2210      	movs	r2, #16
 800055e:	4945      	ldr	r1, [pc, #276]	; (8000674 <disp_row+0x17c>)
 8000560:	4841      	ldr	r0, [pc, #260]	; (8000668 <disp_row+0x170>)
 8000562:	f003 f8c7 	bl	80036f4 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 8000566:	7bbb      	ldrb	r3, [r7, #14]
 8000568:	3301      	adds	r3, #1
 800056a:	73bb      	strb	r3, [r7, #14]
 800056c:	7bbb      	ldrb	r3, [r7, #14]
 800056e:	2b05      	cmp	r3, #5
 8000570:	d9f3      	bls.n	800055a <disp_row+0x62>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 8000572:	2200      	movs	r2, #0
 8000574:	2140      	movs	r1, #64	; 0x40
 8000576:	483d      	ldr	r0, [pc, #244]	; (800066c <disp_row+0x174>)
 8000578:	f000 fea6 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 800057c:	2201      	movs	r2, #1
 800057e:	2140      	movs	r1, #64	; 0x40
 8000580:	483a      	ldr	r0, [pc, #232]	; (800066c <disp_row+0x174>)
 8000582:	f000 fea1 	bl	80012c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 8000586:	2201      	movs	r2, #1
 8000588:	2101      	movs	r1, #1
 800058a:	4839      	ldr	r0, [pc, #228]	; (8000670 <disp_row+0x178>)
 800058c:	f000 fe9c 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_RESET);
 8000590:	2200      	movs	r2, #0
 8000592:	2102      	movs	r1, #2
 8000594:	4836      	ldr	r0, [pc, #216]	; (8000670 <disp_row+0x178>)
 8000596:	f000 fe97 	bl	80012c8 <HAL_GPIO_WritePin>
	}

	if (row == 2) {
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	2b02      	cmp	r3, #2
 800059e:	d122      	bne.n	80005e6 <disp_row+0xee>

		for (uint8_t i = 0; i < 6; i++) {
 80005a0:	2300      	movs	r3, #0
 80005a2:	737b      	strb	r3, [r7, #13]
 80005a4:	e008      	b.n	80005b8 <disp_row+0xc0>
			HAL_SPI_Transmit(&hspi1, &data3, 16, 10);
 80005a6:	230a      	movs	r3, #10
 80005a8:	2210      	movs	r2, #16
 80005aa:	4933      	ldr	r1, [pc, #204]	; (8000678 <disp_row+0x180>)
 80005ac:	482e      	ldr	r0, [pc, #184]	; (8000668 <disp_row+0x170>)
 80005ae:	f003 f8a1 	bl	80036f4 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 80005b2:	7b7b      	ldrb	r3, [r7, #13]
 80005b4:	3301      	adds	r3, #1
 80005b6:	737b      	strb	r3, [r7, #13]
 80005b8:	7b7b      	ldrb	r3, [r7, #13]
 80005ba:	2b05      	cmp	r3, #5
 80005bc:	d9f3      	bls.n	80005a6 <disp_row+0xae>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	2140      	movs	r1, #64	; 0x40
 80005c2:	482a      	ldr	r0, [pc, #168]	; (800066c <disp_row+0x174>)
 80005c4:	f000 fe80 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2140      	movs	r1, #64	; 0x40
 80005cc:	4827      	ldr	r0, [pc, #156]	; (800066c <disp_row+0x174>)
 80005ce:	f000 fe7b 	bl	80012c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2101      	movs	r1, #1
 80005d6:	4826      	ldr	r0, [pc, #152]	; (8000670 <disp_row+0x178>)
 80005d8:	f000 fe76 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 80005dc:	2201      	movs	r2, #1
 80005de:	2102      	movs	r1, #2
 80005e0:	4823      	ldr	r0, [pc, #140]	; (8000670 <disp_row+0x178>)
 80005e2:	f000 fe71 	bl	80012c8 <HAL_GPIO_WritePin>
	}

	if (row == 3) {
 80005e6:	88fb      	ldrh	r3, [r7, #6]
 80005e8:	2b03      	cmp	r3, #3
 80005ea:	d122      	bne.n	8000632 <disp_row+0x13a>

		for (uint8_t i = 0; i < 6; i++) {
 80005ec:	2300      	movs	r3, #0
 80005ee:	733b      	strb	r3, [r7, #12]
 80005f0:	e008      	b.n	8000604 <disp_row+0x10c>
			HAL_SPI_Transmit(&hspi1, &data4, 16, 10);
 80005f2:	230a      	movs	r3, #10
 80005f4:	2210      	movs	r2, #16
 80005f6:	4921      	ldr	r1, [pc, #132]	; (800067c <disp_row+0x184>)
 80005f8:	481b      	ldr	r0, [pc, #108]	; (8000668 <disp_row+0x170>)
 80005fa:	f003 f87b 	bl	80036f4 <HAL_SPI_Transmit>
		for (uint8_t i = 0; i < 6; i++) {
 80005fe:	7b3b      	ldrb	r3, [r7, #12]
 8000600:	3301      	adds	r3, #1
 8000602:	733b      	strb	r3, [r7, #12]
 8000604:	7b3b      	ldrb	r3, [r7, #12]
 8000606:	2b05      	cmp	r3, #5
 8000608:	d9f3      	bls.n	80005f2 <disp_row+0xfa>
		}

		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_RESET);
 800060a:	2200      	movs	r2, #0
 800060c:	2140      	movs	r1, #64	; 0x40
 800060e:	4817      	ldr	r0, [pc, #92]	; (800066c <disp_row+0x174>)
 8000610:	f000 fe5a 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, GPIO_PIN_SET);
 8000614:	2201      	movs	r2, #1
 8000616:	2140      	movs	r1, #64	; 0x40
 8000618:	4814      	ldr	r0, [pc, #80]	; (800066c <disp_row+0x174>)
 800061a:	f000 fe55 	bl	80012c8 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(A_GPIO_Port, A_Pin, GPIO_PIN_SET);
 800061e:	2201      	movs	r2, #1
 8000620:	2101      	movs	r1, #1
 8000622:	4813      	ldr	r0, [pc, #76]	; (8000670 <disp_row+0x178>)
 8000624:	f000 fe50 	bl	80012c8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(B_GPIO_Port, B_Pin, GPIO_PIN_SET);
 8000628:	2201      	movs	r2, #1
 800062a:	2102      	movs	r1, #2
 800062c:	4810      	ldr	r0, [pc, #64]	; (8000670 <disp_row+0x178>)
 800062e:	f000 fe4b 	bl	80012c8 <HAL_GPIO_WritePin>
	}

	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_SET);
 8000632:	2201      	movs	r2, #1
 8000634:	2110      	movs	r1, #16
 8000636:	480d      	ldr	r0, [pc, #52]	; (800066c <disp_row+0x174>)
 8000638:	f000 fe46 	bl	80012c8 <HAL_GPIO_WritePin>
	for (uint32_t x = 0; x <= 300; x++) {
 800063c:	2300      	movs	r3, #0
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	e002      	b.n	8000648 <disp_row+0x150>
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	3301      	adds	r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 800064e:	d9f8      	bls.n	8000642 <disp_row+0x14a>
	};
	HAL_GPIO_WritePin(nOE_GPIO_Port, nOE_Pin, GPIO_PIN_RESET);
 8000650:	2200      	movs	r2, #0
 8000652:	2110      	movs	r1, #16
 8000654:	4805      	ldr	r0, [pc, #20]	; (800066c <disp_row+0x174>)
 8000656:	f000 fe37 	bl	80012c8 <HAL_GPIO_WritePin>
}
 800065a:	bf00      	nop
 800065c:	3710      	adds	r7, #16
 800065e:	46bd      	mov	sp, r7
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	20000260 	.word	0x20000260
 8000668:	200002a0 	.word	0x200002a0
 800066c:	40010800 	.word	0x40010800
 8000670:	40010c00 	.word	0x40010c00
 8000674:	20000270 	.word	0x20000270
 8000678:	20000280 	.word	0x20000280
 800067c:	20000290 	.word	0x20000290

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000686:	f000 fb2b 	bl	8000ce0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800068a:	f000 f8a3 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800068e:	f000 f98b 	bl	80009a8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000692:	f000 f8fb 	bl	800088c <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000696:	f008 f83b 	bl	8008710 <MX_USB_DEVICE_Init>
  MX_TIM4_Init();
 800069a:	f000 f92d 	bl	80008f8 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim4);
 800069e:	484a      	ldr	r0, [pc, #296]	; (80007c8 <main+0x148>)
 80006a0:	f003 fa0a 	bl	8003ab8 <HAL_TIM_Base_Start_IT>
	while (1)
	{
		// ppp = buffer[0];

		// случай, когда массив не заполнен
		if (hitbox1[0] == 0) {
 80006a4:	4b49      	ldr	r3, [pc, #292]	; (80007cc <main+0x14c>)
 80006a6:	f993 3000 	ldrsb.w	r3, [r3]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d11a      	bne.n	80006e4 <main+0x64>
			for (int8_t i = WIDTH-1; i >= 0; i--) {
 80006ae:	231f      	movs	r3, #31
 80006b0:	71fb      	strb	r3, [r7, #7]
 80006b2:	e013      	b.n	80006dc <main+0x5c>
				if (hitbox1[i] == 0) {
 80006b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006b8:	4a44      	ldr	r2, [pc, #272]	; (80007cc <main+0x14c>)
 80006ba:	56d3      	ldrsb	r3, [r2, r3]
 80006bc:	2b00      	cmp	r3, #0
 80006be:	d107      	bne.n	80006d0 <main+0x50>
					hitbox1[i] = buffer[0];
 80006c0:	4b43      	ldr	r3, [pc, #268]	; (80007d0 <main+0x150>)
 80006c2:	781a      	ldrb	r2, [r3, #0]
 80006c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006c8:	b251      	sxtb	r1, r2
 80006ca:	4a40      	ldr	r2, [pc, #256]	; (80007cc <main+0x14c>)
 80006cc:	54d1      	strb	r1, [r2, r3]
					break;
 80006ce:	e009      	b.n	80006e4 <main+0x64>
			for (int8_t i = WIDTH-1; i >= 0; i--) {
 80006d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006d4:	b2db      	uxtb	r3, r3
 80006d6:	3b01      	subs	r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	71fb      	strb	r3, [r7, #7]
 80006dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	dae7      	bge.n	80006b4 <main+0x34>
				}
			}
		}

		// случай, когда весь массив заполнен
		if (hitbox1[0] != 0) {
 80006e4:	4b39      	ldr	r3, [pc, #228]	; (80007cc <main+0x14c>)
 80006e6:	f993 3000 	ldrsb.w	r3, [r3]
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d01d      	beq.n	800072a <main+0xaa>
			hitbox1[31] = 0;
 80006ee:	4b37      	ldr	r3, [pc, #220]	; (80007cc <main+0x14c>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	77da      	strb	r2, [r3, #31]
			for (int8_t i = WIDTH-1; i >= 0; i--) {
 80006f4:	231f      	movs	r3, #31
 80006f6:	71bb      	strb	r3, [r7, #6]
 80006f8:	e00e      	b.n	8000718 <main+0x98>
				hitbox1[i] = hitbox1[i-1];
 80006fa:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80006fe:	1e5a      	subs	r2, r3, #1
 8000700:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000704:	4931      	ldr	r1, [pc, #196]	; (80007cc <main+0x14c>)
 8000706:	5689      	ldrsb	r1, [r1, r2]
 8000708:	4a30      	ldr	r2, [pc, #192]	; (80007cc <main+0x14c>)
 800070a:	54d1      	strb	r1, [r2, r3]
			for (int8_t i = WIDTH-1; i >= 0; i--) {
 800070c:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000710:	b2db      	uxtb	r3, r3
 8000712:	3b01      	subs	r3, #1
 8000714:	b2db      	uxtb	r3, r3
 8000716:	71bb      	strb	r3, [r7, #6]
 8000718:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800071c:	2b00      	cmp	r3, #0
 800071e:	daec      	bge.n	80006fa <main+0x7a>
			}
			hitbox1[0] = buffer[0];
 8000720:	4b2b      	ldr	r3, [pc, #172]	; (80007d0 <main+0x150>)
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	b25a      	sxtb	r2, r3
 8000726:	4b29      	ldr	r3, [pc, #164]	; (80007cc <main+0x14c>)
 8000728:	701a      	strb	r2, [r3, #0]
		}

		// рисуем на доске
		for (uint16_t i = 0; i < HEIGHT; i++) {
 800072a:	2300      	movs	r3, #0
 800072c:	80bb      	strh	r3, [r7, #4]
 800072e:	e016      	b.n	800075e <main+0xde>
			for (int8_t j = WIDTH-1; j >= 0; j--) {
 8000730:	231f      	movs	r3, #31
 8000732:	70fb      	strb	r3, [r7, #3]
 8000734:	e00c      	b.n	8000750 <main+0xd0>
				disp1color_DrawPixel(j, i, 0);
 8000736:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800073a:	88b9      	ldrh	r1, [r7, #4]
 800073c:	2200      	movs	r2, #0
 800073e:	4618      	mov	r0, r3
 8000740:	f7ff fd16 	bl	8000170 <disp1color_DrawPixel>
			for (int8_t j = WIDTH-1; j >= 0; j--) {
 8000744:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000748:	b2db      	uxtb	r3, r3
 800074a:	3b01      	subs	r3, #1
 800074c:	b2db      	uxtb	r3, r3
 800074e:	70fb      	strb	r3, [r7, #3]
 8000750:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000754:	2b00      	cmp	r3, #0
 8000756:	daee      	bge.n	8000736 <main+0xb6>
		for (uint16_t i = 0; i < HEIGHT; i++) {
 8000758:	88bb      	ldrh	r3, [r7, #4]
 800075a:	3301      	adds	r3, #1
 800075c:	80bb      	strh	r3, [r7, #4]
 800075e:	88bb      	ldrh	r3, [r7, #4]
 8000760:	2b0f      	cmp	r3, #15
 8000762:	d9e5      	bls.n	8000730 <main+0xb0>
			}
		}

		for (int8_t i = WIDTH-1; i >= 0; i--) {
 8000764:	231f      	movs	r3, #31
 8000766:	70bb      	strb	r3, [r7, #2]
 8000768:	e00f      	b.n	800078a <main+0x10a>
			disp1color_DrawPixel(i, hitbox1[i], 1);
 800076a:	f997 0002 	ldrsb.w	r0, [r7, #2]
 800076e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000772:	4a16      	ldr	r2, [pc, #88]	; (80007cc <main+0x14c>)
 8000774:	56d3      	ldrsb	r3, [r2, r3]
 8000776:	2201      	movs	r2, #1
 8000778:	4619      	mov	r1, r3
 800077a:	f7ff fcf9 	bl	8000170 <disp1color_DrawPixel>
		for (int8_t i = WIDTH-1; i >= 0; i--) {
 800077e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8000782:	b2db      	uxtb	r3, r3
 8000784:	3b01      	subs	r3, #1
 8000786:	b2db      	uxtb	r3, r3
 8000788:	70bb      	strb	r3, [r7, #2]
 800078a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800078e:	2b00      	cmp	r3, #0
 8000790:	daeb      	bge.n	800076a <main+0xea>
		}

		disp1color_UpdateFromBuff();
 8000792:	f7ff fce3 	bl	800015c <disp1color_UpdateFromBuff>
		prepare_data();
 8000796:	f7ff fe53 	bl	8000440 <prepare_data>
		for (uint8_t i = 0; i < 20; i++) {
 800079a:	2300      	movs	r3, #0
 800079c:	707b      	strb	r3, [r7, #1]
 800079e:	e00e      	b.n	80007be <main+0x13e>
			disp_row(0);
 80007a0:	2000      	movs	r0, #0
 80007a2:	f7ff fea9 	bl	80004f8 <disp_row>
			disp_row(1);
 80007a6:	2001      	movs	r0, #1
 80007a8:	f7ff fea6 	bl	80004f8 <disp_row>
			disp_row(2);
 80007ac:	2002      	movs	r0, #2
 80007ae:	f7ff fea3 	bl	80004f8 <disp_row>
			disp_row(3);
 80007b2:	2003      	movs	r0, #3
 80007b4:	f7ff fea0 	bl	80004f8 <disp_row>
		for (uint8_t i = 0; i < 20; i++) {
 80007b8:	787b      	ldrb	r3, [r7, #1]
 80007ba:	3301      	adds	r3, #1
 80007bc:	707b      	strb	r3, [r7, #1]
 80007be:	787b      	ldrb	r3, [r7, #1]
 80007c0:	2b13      	cmp	r3, #19
 80007c2:	d9ed      	bls.n	80007a0 <main+0x120>
		if (hitbox1[0] == 0) {
 80007c4:	e76e      	b.n	80006a4 <main+0x24>
 80007c6:	bf00      	nop
 80007c8:	200002f8 	.word	0x200002f8
 80007cc:	20000344 	.word	0x20000344
 80007d0:	20000340 	.word	0x20000340

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b094      	sub	sp, #80	; 0x50
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007de:	2228      	movs	r2, #40	; 0x28
 80007e0:	2100      	movs	r1, #0
 80007e2:	4618      	mov	r0, r3
 80007e4:	f008 fc6c 	bl	80090c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
 80007f0:	605a      	str	r2, [r3, #4]
 80007f2:	609a      	str	r2, [r3, #8]
 80007f4:	60da      	str	r2, [r3, #12]
 80007f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f8:	1d3b      	adds	r3, r7, #4
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000808:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800080c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 800080e:	2300      	movs	r3, #0
 8000810:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000812:	2301      	movs	r3, #1
 8000814:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000816:	2302      	movs	r3, #2
 8000818:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800081a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800081e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8000820:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000826:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082a:	4618      	mov	r0, r3
 800082c:	f002 fa40 	bl	8002cb0 <HAL_RCC_OscConfig>
 8000830:	4603      	mov	r3, r0
 8000832:	2b00      	cmp	r3, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000836:	f000 f939 	bl	8000aac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083a:	230f      	movs	r3, #15
 800083c:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800083e:	2302      	movs	r3, #2
 8000840:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000842:	2300      	movs	r3, #0
 8000844:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000846:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800084a:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800084c:	2300      	movs	r3, #0
 800084e:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000850:	f107 0314 	add.w	r3, r7, #20
 8000854:	2101      	movs	r1, #1
 8000856:	4618      	mov	r0, r3
 8000858:	f002 fcac 	bl	80031b4 <HAL_RCC_ClockConfig>
 800085c:	4603      	mov	r3, r0
 800085e:	2b00      	cmp	r3, #0
 8000860:	d001      	beq.n	8000866 <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000862:	f000 f923 	bl	8000aac <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000866:	2310      	movs	r3, #16
 8000868:	607b      	str	r3, [r7, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 800086a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800086e:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	4618      	mov	r0, r3
 8000874:	f002 fe04 	bl	8003480 <HAL_RCCEx_PeriphCLKConfig>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800087e:	f000 f915 	bl	8000aac <Error_Handler>
  }
}
 8000882:	bf00      	nop
 8000884:	3750      	adds	r7, #80	; 0x50
 8000886:	46bd      	mov	sp, r7
 8000888:	bd80      	pop	{r7, pc}
	...

0800088c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000890:	4b17      	ldr	r3, [pc, #92]	; (80008f0 <MX_SPI1_Init+0x64>)
 8000892:	4a18      	ldr	r2, [pc, #96]	; (80008f4 <MX_SPI1_Init+0x68>)
 8000894:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000896:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_SPI1_Init+0x64>)
 8000898:	f44f 7282 	mov.w	r2, #260	; 0x104
 800089c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800089e:	4b14      	ldr	r3, [pc, #80]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008a0:	2200      	movs	r2, #0
 80008a2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80008a4:	4b12      	ldr	r3, [pc, #72]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80008aa:	4b11      	ldr	r3, [pc, #68]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80008b0:	4b0f      	ldr	r3, [pc, #60]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80008b6:	4b0e      	ldr	r3, [pc, #56]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008bc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80008be:	4b0c      	ldr	r3, [pc, #48]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008c0:	2210      	movs	r2, #16
 80008c2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008c4:	4b0a      	ldr	r3, [pc, #40]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ca:	4b09      	ldr	r3, [pc, #36]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80008d6:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008d8:	220a      	movs	r2, #10
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008dc:	4804      	ldr	r0, [pc, #16]	; (80008f0 <MX_SPI1_Init+0x64>)
 80008de:	f002 fe85 	bl	80035ec <HAL_SPI_Init>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80008e8:	f000 f8e0 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008ec:	bf00      	nop
 80008ee:	bd80      	pop	{r7, pc}
 80008f0:	200002a0 	.word	0x200002a0
 80008f4:	40013000 	.word	0x40013000

080008f8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b08a      	sub	sp, #40	; 0x28
 80008fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008fe:	f107 0320 	add.w	r3, r7, #32
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
 8000906:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
 8000916:	615a      	str	r2, [r3, #20]
 8000918:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800091a:	4b21      	ldr	r3, [pc, #132]	; (80009a0 <MX_TIM4_Init+0xa8>)
 800091c:	4a21      	ldr	r2, [pc, #132]	; (80009a4 <MX_TIM4_Init+0xac>)
 800091e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 48000;
 8000920:	4b1f      	ldr	r3, [pc, #124]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000922:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8000926:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000928:	4b1d      	ldr	r3, [pc, #116]	; (80009a0 <MX_TIM4_Init+0xa8>)
 800092a:	2200      	movs	r2, #0
 800092c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800092e:	4b1c      	ldr	r3, [pc, #112]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000930:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000934:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000936:	4b1a      	ldr	r3, [pc, #104]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000938:	2200      	movs	r2, #0
 800093a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800093c:	4b18      	ldr	r3, [pc, #96]	; (80009a0 <MX_TIM4_Init+0xa8>)
 800093e:	2200      	movs	r2, #0
 8000940:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000942:	4817      	ldr	r0, [pc, #92]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000944:	f003 f90a 	bl	8003b5c <HAL_TIM_PWM_Init>
 8000948:	4603      	mov	r3, r0
 800094a:	2b00      	cmp	r3, #0
 800094c:	d001      	beq.n	8000952 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800094e:	f000 f8ad 	bl	8000aac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000952:	2300      	movs	r3, #0
 8000954:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000956:	2300      	movs	r3, #0
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800095a:	f107 0320 	add.w	r3, r7, #32
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000962:	f003 fd29 	bl	80043b8 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 800096c:	f000 f89e 	bl	8000aac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000970:	2360      	movs	r3, #96	; 0x60
 8000972:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000974:	2300      	movs	r3, #0
 8000976:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000978:	2300      	movs	r3, #0
 800097a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800097c:	2300      	movs	r3, #0
 800097e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000980:	1d3b      	adds	r3, r7, #4
 8000982:	2200      	movs	r2, #0
 8000984:	4619      	mov	r1, r3
 8000986:	4806      	ldr	r0, [pc, #24]	; (80009a0 <MX_TIM4_Init+0xa8>)
 8000988:	f003 fa40 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 800098c:	4603      	mov	r3, r0
 800098e:	2b00      	cmp	r3, #0
 8000990:	d001      	beq.n	8000996 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000992:	f000 f88b 	bl	8000aac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000996:	bf00      	nop
 8000998:	3728      	adds	r7, #40	; 0x28
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	200002f8 	.word	0x200002f8
 80009a4:	40000800 	.word	0x40000800

080009a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b088      	sub	sp, #32
 80009ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ae:	f107 0310 	add.w	r3, r7, #16
 80009b2:	2200      	movs	r2, #0
 80009b4:	601a      	str	r2, [r3, #0]
 80009b6:	605a      	str	r2, [r3, #4]
 80009b8:	609a      	str	r2, [r3, #8]
 80009ba:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009be:	699b      	ldr	r3, [r3, #24]
 80009c0:	4a36      	ldr	r2, [pc, #216]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009c2:	f043 0310 	orr.w	r3, r3, #16
 80009c6:	6193      	str	r3, [r2, #24]
 80009c8:	4b34      	ldr	r3, [pc, #208]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009ca:	699b      	ldr	r3, [r3, #24]
 80009cc:	f003 0310 	and.w	r3, r3, #16
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d4:	4b31      	ldr	r3, [pc, #196]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009d6:	699b      	ldr	r3, [r3, #24]
 80009d8:	4a30      	ldr	r2, [pc, #192]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009da:	f043 0320 	orr.w	r3, r3, #32
 80009de:	6193      	str	r3, [r2, #24]
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009e2:	699b      	ldr	r3, [r3, #24]
 80009e4:	f003 0320 	and.w	r3, r3, #32
 80009e8:	60bb      	str	r3, [r7, #8]
 80009ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ec:	4b2b      	ldr	r3, [pc, #172]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009ee:	699b      	ldr	r3, [r3, #24]
 80009f0:	4a2a      	ldr	r2, [pc, #168]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009f2:	f043 0304 	orr.w	r3, r3, #4
 80009f6:	6193      	str	r3, [r2, #24]
 80009f8:	4b28      	ldr	r3, [pc, #160]	; (8000a9c <MX_GPIO_Init+0xf4>)
 80009fa:	699b      	ldr	r3, [r3, #24]
 80009fc:	f003 0304 	and.w	r3, r3, #4
 8000a00:	607b      	str	r3, [r7, #4]
 8000a02:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a04:	4b25      	ldr	r3, [pc, #148]	; (8000a9c <MX_GPIO_Init+0xf4>)
 8000a06:	699b      	ldr	r3, [r3, #24]
 8000a08:	4a24      	ldr	r2, [pc, #144]	; (8000a9c <MX_GPIO_Init+0xf4>)
 8000a0a:	f043 0308 	orr.w	r3, r3, #8
 8000a0e:	6193      	str	r3, [r2, #24]
 8000a10:	4b22      	ldr	r3, [pc, #136]	; (8000a9c <MX_GPIO_Init+0xf4>)
 8000a12:	699b      	ldr	r3, [r3, #24]
 8000a14:	f003 0308 	and.w	r3, r3, #8
 8000a18:	603b      	str	r3, [r7, #0]
 8000a1a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a22:	481f      	ldr	r0, [pc, #124]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a24:	f000 fc50 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, nOE_Pin|SCLK_Pin, GPIO_PIN_RESET);
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2150      	movs	r1, #80	; 0x50
 8000a2c:	481d      	ldr	r0, [pc, #116]	; (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a2e:	f000 fc4b 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, A_Pin|B_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	2103      	movs	r1, #3
 8000a36:	481c      	ldr	r0, [pc, #112]	; (8000aa8 <MX_GPIO_Init+0x100>)
 8000a38:	f000 fc46 	bl	80012c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a3c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a42:	2301      	movs	r3, #1
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4e:	f107 0310 	add.w	r3, r7, #16
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_GPIO_Init+0xf8>)
 8000a56:	f000 fab3 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : nOE_Pin SCLK_Pin */
  GPIO_InitStruct.Pin = nOE_Pin|SCLK_Pin;
 8000a5a:	2350      	movs	r3, #80	; 0x50
 8000a5c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a5e:	2301      	movs	r3, #1
 8000a60:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a66:	2302      	movs	r3, #2
 8000a68:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6a:	f107 0310 	add.w	r3, r7, #16
 8000a6e:	4619      	mov	r1, r3
 8000a70:	480c      	ldr	r0, [pc, #48]	; (8000aa4 <MX_GPIO_Init+0xfc>)
 8000a72:	f000 faa5 	bl	8000fc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_Pin B_Pin */
  GPIO_InitStruct.Pin = A_Pin|B_Pin;
 8000a76:	2303      	movs	r3, #3
 8000a78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2302      	movs	r3, #2
 8000a84:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a86:	f107 0310 	add.w	r3, r7, #16
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4806      	ldr	r0, [pc, #24]	; (8000aa8 <MX_GPIO_Init+0x100>)
 8000a8e:	f000 fa97 	bl	8000fc0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a92:	bf00      	nop
 8000a94:	3720      	adds	r7, #32
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40011000 	.word	0x40011000
 8000aa4:	40010800 	.word	0x40010800
 8000aa8:	40010c00 	.word	0x40010c00

08000aac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab0:	b672      	cpsid	i
}
 8000ab2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <Error_Handler+0x8>
	...

08000ab8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab8:	b480      	push	{r7}
 8000aba:	b085      	sub	sp, #20
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000abe:	4b15      	ldr	r3, [pc, #84]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac0:	699b      	ldr	r3, [r3, #24]
 8000ac2:	4a14      	ldr	r2, [pc, #80]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ac4:	f043 0301 	orr.w	r3, r3, #1
 8000ac8:	6193      	str	r3, [r2, #24]
 8000aca:	4b12      	ldr	r3, [pc, #72]	; (8000b14 <HAL_MspInit+0x5c>)
 8000acc:	699b      	ldr	r3, [r3, #24]
 8000ace:	f003 0301 	and.w	r3, r3, #1
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad6:	4b0f      	ldr	r3, [pc, #60]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ad8:	69db      	ldr	r3, [r3, #28]
 8000ada:	4a0e      	ldr	r2, [pc, #56]	; (8000b14 <HAL_MspInit+0x5c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae0:	61d3      	str	r3, [r2, #28]
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	; (8000b14 <HAL_MspInit+0x5c>)
 8000ae4:	69db      	ldr	r3, [r3, #28]
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aea:	607b      	str	r3, [r7, #4]
 8000aec:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000aee:	4b0a      	ldr	r3, [pc, #40]	; (8000b18 <HAL_MspInit+0x60>)
 8000af0:	685b      	ldr	r3, [r3, #4]
 8000af2:	60fb      	str	r3, [r7, #12]
 8000af4:	68fb      	ldr	r3, [r7, #12]
 8000af6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b02:	60fb      	str	r3, [r7, #12]
 8000b04:	4a04      	ldr	r2, [pc, #16]	; (8000b18 <HAL_MspInit+0x60>)
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	3714      	adds	r7, #20
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bc80      	pop	{r7}
 8000b12:	4770      	bx	lr
 8000b14:	40021000 	.word	0x40021000
 8000b18:	40010000 	.word	0x40010000

08000b1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b088      	sub	sp, #32
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b24:	f107 0310 	add.w	r3, r7, #16
 8000b28:	2200      	movs	r2, #0
 8000b2a:	601a      	str	r2, [r3, #0]
 8000b2c:	605a      	str	r2, [r3, #4]
 8000b2e:	609a      	str	r2, [r3, #8]
 8000b30:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	4a15      	ldr	r2, [pc, #84]	; (8000b8c <HAL_SPI_MspInit+0x70>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d123      	bne.n	8000b84 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b3c:	4b14      	ldr	r3, [pc, #80]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b3e:	699b      	ldr	r3, [r3, #24]
 8000b40:	4a13      	ldr	r2, [pc, #76]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b42:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000b46:	6193      	str	r3, [r2, #24]
 8000b48:	4b11      	ldr	r3, [pc, #68]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b4a:	699b      	ldr	r3, [r3, #24]
 8000b4c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b56:	699b      	ldr	r3, [r3, #24]
 8000b58:	4a0d      	ldr	r2, [pc, #52]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b5a:	f043 0304 	orr.w	r3, r3, #4
 8000b5e:	6193      	str	r3, [r2, #24]
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <HAL_SPI_MspInit+0x74>)
 8000b62:	699b      	ldr	r3, [r3, #24]
 8000b64:	f003 0304 	and.w	r3, r3, #4
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000b6c:	23a0      	movs	r3, #160	; 0xa0
 8000b6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b70:	2302      	movs	r3, #2
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b74:	2303      	movs	r3, #3
 8000b76:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b78:	f107 0310 	add.w	r3, r7, #16
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4805      	ldr	r0, [pc, #20]	; (8000b94 <HAL_SPI_MspInit+0x78>)
 8000b80:	f000 fa1e 	bl	8000fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b84:	bf00      	nop
 8000b86:	3720      	adds	r7, #32
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	40013000 	.word	0x40013000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	40010800 	.word	0x40010800

08000b98 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b084      	sub	sp, #16
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	4a0d      	ldr	r2, [pc, #52]	; (8000bdc <HAL_TIM_PWM_MspInit+0x44>)
 8000ba6:	4293      	cmp	r3, r2
 8000ba8:	d113      	bne.n	8000bd2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <HAL_TIM_PWM_MspInit+0x48>)
 8000bac:	69db      	ldr	r3, [r3, #28]
 8000bae:	4a0c      	ldr	r2, [pc, #48]	; (8000be0 <HAL_TIM_PWM_MspInit+0x48>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	61d3      	str	r3, [r2, #28]
 8000bb6:	4b0a      	ldr	r3, [pc, #40]	; (8000be0 <HAL_TIM_PWM_MspInit+0x48>)
 8000bb8:	69db      	ldr	r3, [r3, #28]
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2100      	movs	r1, #0
 8000bc6:	201e      	movs	r0, #30
 8000bc8:	f000 f9c3 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bcc:	201e      	movs	r0, #30
 8000bce:	f000 f9dc 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bd2:	bf00      	nop
 8000bd4:	3710      	adds	r7, #16
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40000800 	.word	0x40000800
 8000be0:	40021000 	.word	0x40021000

08000be4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1)
 8000be8:	e7fe      	b.n	8000be8 <NMI_Handler+0x4>

08000bea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bea:	b480      	push	{r7}
 8000bec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bee:	e7fe      	b.n	8000bee <HardFault_Handler+0x4>

08000bf0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bf4:	e7fe      	b.n	8000bf4 <MemManage_Handler+0x4>

08000bf6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf6:	b480      	push	{r7}
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bfa:	e7fe      	b.n	8000bfa <BusFault_Handler+0x4>

08000bfc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c00:	e7fe      	b.n	8000c00 <UsageFault_Handler+0x4>

08000c02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c02:	b480      	push	{r7}
 8000c04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c06:	bf00      	nop
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bc80      	pop	{r7}
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	bc80      	pop	{r7}
 8000c18:	4770      	bx	lr

08000c1a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1a:	b480      	push	{r7}
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bc80      	pop	{r7}
 8000c24:	4770      	bx	lr

08000c26 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2a:	f000 f89f 	bl	8000d6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c2e:	bf00      	nop
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <USB_LP_CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles USB low priority or CAN RX0 interrupts.
  */
void USB_LP_CAN1_RX0_IRQHandler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 0 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8000c38:	4802      	ldr	r0, [pc, #8]	; (8000c44 <USB_LP_CAN1_RX0_IRQHandler+0x10>)
 8000c3a:	f000 fca7 	bl	800158c <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_CAN1_RX0_IRQn 1 */

  /* USER CODE END USB_LP_CAN1_RX0_IRQn 1 */
}
 8000c3e:	bf00      	nop
 8000c40:	bd80      	pop	{r7, pc}
 8000c42:	bf00      	nop
 8000c44:	20001030 	.word	0x20001030

08000c48 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000c48:	b598      	push	{r3, r4, r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
	HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 8000c4c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <TIM4_IRQHandler+0x34>)
 8000c52:	f000 fb51 	bl	80012f8 <HAL_GPIO_TogglePin>
	CDC_Transmit_FS((uint8_t *) heartbeat, strlen(heartbeat));
 8000c56:	4b0a      	ldr	r3, [pc, #40]	; (8000c80 <TIM4_IRQHandler+0x38>)
 8000c58:	681c      	ldr	r4, [r3, #0]
 8000c5a:	4b09      	ldr	r3, [pc, #36]	; (8000c80 <TIM4_IRQHandler+0x38>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4618      	mov	r0, r3
 8000c60:	f7ff fa74 	bl	800014c <strlen>
 8000c64:	4603      	mov	r3, r0
 8000c66:	b29b      	uxth	r3, r3
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4620      	mov	r0, r4
 8000c6c:	f007 fe18 	bl	80088a0 <CDC_Transmit_FS>
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000c70:	4804      	ldr	r0, [pc, #16]	; (8000c84 <TIM4_IRQHandler+0x3c>)
 8000c72:	f002 ffc2 	bl	8003bfa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000c76:	bf00      	nop
 8000c78:	bd98      	pop	{r3, r4, r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40011000 	.word	0x40011000
 8000c80:	20000004 	.word	0x20000004
 8000c84:	200002f8 	.word	0x200002f8

08000c88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bc80      	pop	{r7}
 8000c92:	4770      	bx	lr

08000c94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c94:	f7ff fff8 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c98:	480b      	ldr	r0, [pc, #44]	; (8000cc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000c9a:	490c      	ldr	r1, [pc, #48]	; (8000ccc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000c9c:	4a0c      	ldr	r2, [pc, #48]	; (8000cd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000c9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca0:	e002      	b.n	8000ca8 <LoopCopyDataInit>

08000ca2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ca6:	3304      	adds	r3, #4

08000ca8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ca8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000caa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cac:	d3f9      	bcc.n	8000ca2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cae:	4a09      	ldr	r2, [pc, #36]	; (8000cd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000cb0:	4c09      	ldr	r4, [pc, #36]	; (8000cd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000cb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb4:	e001      	b.n	8000cba <LoopFillZerobss>

08000cb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cb8:	3204      	adds	r2, #4

08000cba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cbc:	d3fb      	bcc.n	8000cb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cbe:	f008 f9cd 	bl	800905c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000cc2:	f7ff fcdd 	bl	8000680 <main>
  bx lr
 8000cc6:	4770      	bx	lr
  ldr r0, =_sdata
 8000cc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ccc:	20000184 	.word	0x20000184
  ldr r2, =_sidata
 8000cd0:	08009160 	.word	0x08009160
  ldr r2, =_sbss
 8000cd4:	20000184 	.word	0x20000184
  ldr r4, =_ebss
 8000cd8:	2000153c 	.word	0x2000153c

08000cdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cdc:	e7fe      	b.n	8000cdc <ADC1_2_IRQHandler>
	...

08000ce0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ce4:	4b08      	ldr	r3, [pc, #32]	; (8000d08 <HAL_Init+0x28>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	4a07      	ldr	r2, [pc, #28]	; (8000d08 <HAL_Init+0x28>)
 8000cea:	f043 0310 	orr.w	r3, r3, #16
 8000cee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cf0:	2003      	movs	r0, #3
 8000cf2:	f000 f923 	bl	8000f3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000cf6:	200f      	movs	r0, #15
 8000cf8:	f000 f808 	bl	8000d0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000cfc:	f7ff fedc 	bl	8000ab8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d00:	2300      	movs	r3, #0
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	bf00      	nop
 8000d08:	40022000 	.word	0x40022000

08000d0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d14:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <HAL_InitTick+0x54>)
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b12      	ldr	r3, [pc, #72]	; (8000d64 <HAL_InitTick+0x58>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f000 f93b 	bl	8000fa6 <HAL_SYSTICK_Config>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00e      	b.n	8000d58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	2b0f      	cmp	r3, #15
 8000d3e:	d80a      	bhi.n	8000d56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d40:	2200      	movs	r2, #0
 8000d42:	6879      	ldr	r1, [r7, #4]
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f000 f903 	bl	8000f52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d4c:	4a06      	ldr	r2, [pc, #24]	; (8000d68 <HAL_InitTick+0x5c>)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d52:	2300      	movs	r3, #0
 8000d54:	e000      	b.n	8000d58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d56:	2301      	movs	r3, #1
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000008 	.word	0x20000008
 8000d64:	20000010 	.word	0x20000010
 8000d68:	2000000c 	.word	0x2000000c

08000d6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d70:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <HAL_IncTick+0x1c>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	461a      	mov	r2, r3
 8000d76:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <HAL_IncTick+0x20>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	4a03      	ldr	r2, [pc, #12]	; (8000d8c <HAL_IncTick+0x20>)
 8000d7e:	6013      	str	r3, [r2, #0]
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bc80      	pop	{r7}
 8000d86:	4770      	bx	lr
 8000d88:	20000010 	.word	0x20000010
 8000d8c:	20000364 	.word	0x20000364

08000d90 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  return uwTick;
 8000d94:	4b02      	ldr	r3, [pc, #8]	; (8000da0 <HAL_GetTick+0x10>)
 8000d96:	681b      	ldr	r3, [r3, #0]
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bc80      	pop	{r7}
 8000d9e:	4770      	bx	lr
 8000da0:	20000364 	.word	0x20000364

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bc80      	pop	{r7}
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bc80      	pop	{r7}
 8000e00:	4770      	bx	lr
 8000e02:	bf00      	nop
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	db0b      	blt.n	8000e32 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e1a:	79fb      	ldrb	r3, [r7, #7]
 8000e1c:	f003 021f 	and.w	r2, r3, #31
 8000e20:	4906      	ldr	r1, [pc, #24]	; (8000e3c <__NVIC_EnableIRQ+0x34>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	095b      	lsrs	r3, r3, #5
 8000e28:	2001      	movs	r0, #1
 8000e2a:	fa00 f202 	lsl.w	r2, r0, r2
 8000e2e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e32:	bf00      	nop
 8000e34:	370c      	adds	r7, #12
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bc80      	pop	{r7}
 8000e3a:	4770      	bx	lr
 8000e3c:	e000e100 	.word	0xe000e100

08000e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e40:	b480      	push	{r7}
 8000e42:	b083      	sub	sp, #12
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	4603      	mov	r3, r0
 8000e48:	6039      	str	r1, [r7, #0]
 8000e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	db0a      	blt.n	8000e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	b2da      	uxtb	r2, r3
 8000e58:	490c      	ldr	r1, [pc, #48]	; (8000e8c <__NVIC_SetPriority+0x4c>)
 8000e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e5e:	0112      	lsls	r2, r2, #4
 8000e60:	b2d2      	uxtb	r2, r2
 8000e62:	440b      	add	r3, r1
 8000e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e68:	e00a      	b.n	8000e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	b2da      	uxtb	r2, r3
 8000e6e:	4908      	ldr	r1, [pc, #32]	; (8000e90 <__NVIC_SetPriority+0x50>)
 8000e70:	79fb      	ldrb	r3, [r7, #7]
 8000e72:	f003 030f 	and.w	r3, r3, #15
 8000e76:	3b04      	subs	r3, #4
 8000e78:	0112      	lsls	r2, r2, #4
 8000e7a:	b2d2      	uxtb	r2, r2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	761a      	strb	r2, [r3, #24]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bc80      	pop	{r7}
 8000e88:	4770      	bx	lr
 8000e8a:	bf00      	nop
 8000e8c:	e000e100 	.word	0xe000e100
 8000e90:	e000ed00 	.word	0xe000ed00

08000e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b089      	sub	sp, #36	; 0x24
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f003 0307 	and.w	r3, r3, #7
 8000ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	f1c3 0307 	rsb	r3, r3, #7
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	bf28      	it	cs
 8000eb2:	2304      	movcs	r3, #4
 8000eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eb6:	69fb      	ldr	r3, [r7, #28]
 8000eb8:	3304      	adds	r3, #4
 8000eba:	2b06      	cmp	r3, #6
 8000ebc:	d902      	bls.n	8000ec4 <NVIC_EncodePriority+0x30>
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	3b03      	subs	r3, #3
 8000ec2:	e000      	b.n	8000ec6 <NVIC_EncodePriority+0x32>
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ec8:	f04f 32ff 	mov.w	r2, #4294967295
 8000ecc:	69bb      	ldr	r3, [r7, #24]
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	401a      	ands	r2, r3
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000edc:	f04f 31ff 	mov.w	r1, #4294967295
 8000ee0:	697b      	ldr	r3, [r7, #20]
 8000ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ee6:	43d9      	mvns	r1, r3
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eec:	4313      	orrs	r3, r2
         );
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3724      	adds	r7, #36	; 0x24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bc80      	pop	{r7}
 8000ef6:	4770      	bx	lr

08000ef8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	3b01      	subs	r3, #1
 8000f04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f08:	d301      	bcc.n	8000f0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00f      	b.n	8000f2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	; (8000f38 <SysTick_Config+0x40>)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	3b01      	subs	r3, #1
 8000f14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f16:	210f      	movs	r1, #15
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f7ff ff90 	bl	8000e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f20:	4b05      	ldr	r3, [pc, #20]	; (8000f38 <SysTick_Config+0x40>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f26:	4b04      	ldr	r3, [pc, #16]	; (8000f38 <SysTick_Config+0x40>)
 8000f28:	2207      	movs	r2, #7
 8000f2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f2c:	2300      	movs	r3, #0
}
 8000f2e:	4618      	mov	r0, r3
 8000f30:	3708      	adds	r7, #8
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	e000e010 	.word	0xe000e010

08000f3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b082      	sub	sp, #8
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f44:	6878      	ldr	r0, [r7, #4]
 8000f46:	f7ff ff2d 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f4a:	bf00      	nop
 8000f4c:	3708      	adds	r7, #8
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b086      	sub	sp, #24
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	4603      	mov	r3, r0
 8000f5a:	60b9      	str	r1, [r7, #8]
 8000f5c:	607a      	str	r2, [r7, #4]
 8000f5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f60:	2300      	movs	r3, #0
 8000f62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f64:	f7ff ff42 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f6a:	687a      	ldr	r2, [r7, #4]
 8000f6c:	68b9      	ldr	r1, [r7, #8]
 8000f6e:	6978      	ldr	r0, [r7, #20]
 8000f70:	f7ff ff90 	bl	8000e94 <NVIC_EncodePriority>
 8000f74:	4602      	mov	r2, r0
 8000f76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f7a:	4611      	mov	r1, r2
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff ff5f 	bl	8000e40 <__NVIC_SetPriority>
}
 8000f82:	bf00      	nop
 8000f84:	3718      	adds	r7, #24
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b082      	sub	sp, #8
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff ff35 	bl	8000e08 <__NVIC_EnableIRQ>
}
 8000f9e:	bf00      	nop
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}

08000fa6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b082      	sub	sp, #8
 8000faa:	af00      	add	r7, sp, #0
 8000fac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff ffa2 	bl	8000ef8 <SysTick_Config>
 8000fb4:	4603      	mov	r3, r0
}
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	3708      	adds	r7, #8
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	bd80      	pop	{r7, pc}
	...

08000fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b08b      	sub	sp, #44	; 0x2c
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fd2:	e169      	b.n	80012a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fde:	683b      	ldr	r3, [r7, #0]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	69fa      	ldr	r2, [r7, #28]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	429a      	cmp	r2, r3
 8000fee:	f040 8158 	bne.w	80012a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	4a9a      	ldr	r2, [pc, #616]	; (8001260 <HAL_GPIO_Init+0x2a0>)
 8000ff8:	4293      	cmp	r3, r2
 8000ffa:	d05e      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8000ffc:	4a98      	ldr	r2, [pc, #608]	; (8001260 <HAL_GPIO_Init+0x2a0>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d875      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001002:	4a98      	ldr	r2, [pc, #608]	; (8001264 <HAL_GPIO_Init+0x2a4>)
 8001004:	4293      	cmp	r3, r2
 8001006:	d058      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001008:	4a96      	ldr	r2, [pc, #600]	; (8001264 <HAL_GPIO_Init+0x2a4>)
 800100a:	4293      	cmp	r3, r2
 800100c:	d86f      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800100e:	4a96      	ldr	r2, [pc, #600]	; (8001268 <HAL_GPIO_Init+0x2a8>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d052      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001014:	4a94      	ldr	r2, [pc, #592]	; (8001268 <HAL_GPIO_Init+0x2a8>)
 8001016:	4293      	cmp	r3, r2
 8001018:	d869      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800101a:	4a94      	ldr	r2, [pc, #592]	; (800126c <HAL_GPIO_Init+0x2ac>)
 800101c:	4293      	cmp	r3, r2
 800101e:	d04c      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 8001020:	4a92      	ldr	r2, [pc, #584]	; (800126c <HAL_GPIO_Init+0x2ac>)
 8001022:	4293      	cmp	r3, r2
 8001024:	d863      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001026:	4a92      	ldr	r2, [pc, #584]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d046      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
 800102c:	4a90      	ldr	r2, [pc, #576]	; (8001270 <HAL_GPIO_Init+0x2b0>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d85d      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 8001032:	2b12      	cmp	r3, #18
 8001034:	d82a      	bhi.n	800108c <HAL_GPIO_Init+0xcc>
 8001036:	2b12      	cmp	r3, #18
 8001038:	d859      	bhi.n	80010ee <HAL_GPIO_Init+0x12e>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <HAL_GPIO_Init+0x80>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	080010bb 	.word	0x080010bb
 8001044:	08001095 	.word	0x08001095
 8001048:	080010a7 	.word	0x080010a7
 800104c:	080010e9 	.word	0x080010e9
 8001050:	080010ef 	.word	0x080010ef
 8001054:	080010ef 	.word	0x080010ef
 8001058:	080010ef 	.word	0x080010ef
 800105c:	080010ef 	.word	0x080010ef
 8001060:	080010ef 	.word	0x080010ef
 8001064:	080010ef 	.word	0x080010ef
 8001068:	080010ef 	.word	0x080010ef
 800106c:	080010ef 	.word	0x080010ef
 8001070:	080010ef 	.word	0x080010ef
 8001074:	080010ef 	.word	0x080010ef
 8001078:	080010ef 	.word	0x080010ef
 800107c:	080010ef 	.word	0x080010ef
 8001080:	080010ef 	.word	0x080010ef
 8001084:	0800109d 	.word	0x0800109d
 8001088:	080010b1 	.word	0x080010b1
 800108c:	4a79      	ldr	r2, [pc, #484]	; (8001274 <HAL_GPIO_Init+0x2b4>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d013      	beq.n	80010ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001092:	e02c      	b.n	80010ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	68db      	ldr	r3, [r3, #12]
 8001098:	623b      	str	r3, [r7, #32]
          break;
 800109a:	e029      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	3304      	adds	r3, #4
 80010a2:	623b      	str	r3, [r7, #32]
          break;
 80010a4:	e024      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	3308      	adds	r3, #8
 80010ac:	623b      	str	r3, [r7, #32]
          break;
 80010ae:	e01f      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	330c      	adds	r3, #12
 80010b6:	623b      	str	r3, [r7, #32]
          break;
 80010b8:	e01a      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	689b      	ldr	r3, [r3, #8]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d102      	bne.n	80010c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010c2:	2304      	movs	r3, #4
 80010c4:	623b      	str	r3, [r7, #32]
          break;
 80010c6:	e013      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	689b      	ldr	r3, [r3, #8]
 80010cc:	2b01      	cmp	r3, #1
 80010ce:	d105      	bne.n	80010dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d0:	2308      	movs	r3, #8
 80010d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	69fa      	ldr	r2, [r7, #28]
 80010d8:	611a      	str	r2, [r3, #16]
          break;
 80010da:	e009      	b.n	80010f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010dc:	2308      	movs	r3, #8
 80010de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	69fa      	ldr	r2, [r7, #28]
 80010e4:	615a      	str	r2, [r3, #20]
          break;
 80010e6:	e003      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e8:	2300      	movs	r3, #0
 80010ea:	623b      	str	r3, [r7, #32]
          break;
 80010ec:	e000      	b.n	80010f0 <HAL_GPIO_Init+0x130>
          break;
 80010ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010f0:	69bb      	ldr	r3, [r7, #24]
 80010f2:	2bff      	cmp	r3, #255	; 0xff
 80010f4:	d801      	bhi.n	80010fa <HAL_GPIO_Init+0x13a>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	e001      	b.n	80010fe <HAL_GPIO_Init+0x13e>
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	3304      	adds	r3, #4
 80010fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2bff      	cmp	r3, #255	; 0xff
 8001104:	d802      	bhi.n	800110c <HAL_GPIO_Init+0x14c>
 8001106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	e002      	b.n	8001112 <HAL_GPIO_Init+0x152>
 800110c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800110e:	3b08      	subs	r3, #8
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	210f      	movs	r1, #15
 800111a:	693b      	ldr	r3, [r7, #16]
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	43db      	mvns	r3, r3
 8001122:	401a      	ands	r2, r3
 8001124:	6a39      	ldr	r1, [r7, #32]
 8001126:	693b      	ldr	r3, [r7, #16]
 8001128:	fa01 f303 	lsl.w	r3, r1, r3
 800112c:	431a      	orrs	r2, r3
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001132:	683b      	ldr	r3, [r7, #0]
 8001134:	685b      	ldr	r3, [r3, #4]
 8001136:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800113a:	2b00      	cmp	r3, #0
 800113c:	f000 80b1 	beq.w	80012a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001140:	4b4d      	ldr	r3, [pc, #308]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001142:	699b      	ldr	r3, [r3, #24]
 8001144:	4a4c      	ldr	r2, [pc, #304]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 8001146:	f043 0301 	orr.w	r3, r3, #1
 800114a:	6193      	str	r3, [r2, #24]
 800114c:	4b4a      	ldr	r3, [pc, #296]	; (8001278 <HAL_GPIO_Init+0x2b8>)
 800114e:	699b      	ldr	r3, [r3, #24]
 8001150:	f003 0301 	and.w	r3, r3, #1
 8001154:	60bb      	str	r3, [r7, #8]
 8001156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001158:	4a48      	ldr	r2, [pc, #288]	; (800127c <HAL_GPIO_Init+0x2bc>)
 800115a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800115c:	089b      	lsrs	r3, r3, #2
 800115e:	3302      	adds	r3, #2
 8001160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001166:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001168:	f003 0303 	and.w	r3, r3, #3
 800116c:	009b      	lsls	r3, r3, #2
 800116e:	220f      	movs	r2, #15
 8001170:	fa02 f303 	lsl.w	r3, r2, r3
 8001174:	43db      	mvns	r3, r3
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4a40      	ldr	r2, [pc, #256]	; (8001280 <HAL_GPIO_Init+0x2c0>)
 8001180:	4293      	cmp	r3, r2
 8001182:	d013      	beq.n	80011ac <HAL_GPIO_Init+0x1ec>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	4a3f      	ldr	r2, [pc, #252]	; (8001284 <HAL_GPIO_Init+0x2c4>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d00d      	beq.n	80011a8 <HAL_GPIO_Init+0x1e8>
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	4a3e      	ldr	r2, [pc, #248]	; (8001288 <HAL_GPIO_Init+0x2c8>)
 8001190:	4293      	cmp	r3, r2
 8001192:	d007      	beq.n	80011a4 <HAL_GPIO_Init+0x1e4>
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	4a3d      	ldr	r2, [pc, #244]	; (800128c <HAL_GPIO_Init+0x2cc>)
 8001198:	4293      	cmp	r3, r2
 800119a:	d101      	bne.n	80011a0 <HAL_GPIO_Init+0x1e0>
 800119c:	2303      	movs	r3, #3
 800119e:	e006      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a0:	2304      	movs	r3, #4
 80011a2:	e004      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a4:	2302      	movs	r3, #2
 80011a6:	e002      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011a8:	2301      	movs	r3, #1
 80011aa:	e000      	b.n	80011ae <HAL_GPIO_Init+0x1ee>
 80011ac:	2300      	movs	r3, #0
 80011ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80011b0:	f002 0203 	and.w	r2, r2, #3
 80011b4:	0092      	lsls	r2, r2, #2
 80011b6:	4093      	lsls	r3, r2
 80011b8:	68fa      	ldr	r2, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011be:	492f      	ldr	r1, [pc, #188]	; (800127c <HAL_GPIO_Init+0x2bc>)
 80011c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	68fa      	ldr	r2, [r7, #12]
 80011c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d006      	beq.n	80011e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80011d8:	4b2d      	ldr	r3, [pc, #180]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011da:	681a      	ldr	r2, [r3, #0]
 80011dc:	492c      	ldr	r1, [pc, #176]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011de:	69bb      	ldr	r3, [r7, #24]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	600b      	str	r3, [r1, #0]
 80011e4:	e006      	b.n	80011f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80011e6:	4b2a      	ldr	r3, [pc, #168]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	69bb      	ldr	r3, [r7, #24]
 80011ec:	43db      	mvns	r3, r3
 80011ee:	4928      	ldr	r1, [pc, #160]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 80011f0:	4013      	ands	r3, r2
 80011f2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d006      	beq.n	800120e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001202:	685a      	ldr	r2, [r3, #4]
 8001204:	4922      	ldr	r1, [pc, #136]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	4313      	orrs	r3, r2
 800120a:	604b      	str	r3, [r1, #4]
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001210:	685a      	ldr	r2, [r3, #4]
 8001212:	69bb      	ldr	r3, [r7, #24]
 8001214:	43db      	mvns	r3, r3
 8001216:	491e      	ldr	r1, [pc, #120]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001218:	4013      	ands	r3, r2
 800121a:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800121c:	683b      	ldr	r3, [r7, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d006      	beq.n	8001236 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001228:	4b19      	ldr	r3, [pc, #100]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	4918      	ldr	r1, [pc, #96]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 800122e:	69bb      	ldr	r3, [r7, #24]
 8001230:	4313      	orrs	r3, r2
 8001232:	608b      	str	r3, [r1, #8]
 8001234:	e006      	b.n	8001244 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001236:	4b16      	ldr	r3, [pc, #88]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001238:	689a      	ldr	r2, [r3, #8]
 800123a:	69bb      	ldr	r3, [r7, #24]
 800123c:	43db      	mvns	r3, r3
 800123e:	4914      	ldr	r1, [pc, #80]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001240:	4013      	ands	r3, r2
 8001242:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800124c:	2b00      	cmp	r3, #0
 800124e:	d021      	beq.n	8001294 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001252:	68da      	ldr	r2, [r3, #12]
 8001254:	490e      	ldr	r1, [pc, #56]	; (8001290 <HAL_GPIO_Init+0x2d0>)
 8001256:	69bb      	ldr	r3, [r7, #24]
 8001258:	4313      	orrs	r3, r2
 800125a:	60cb      	str	r3, [r1, #12]
 800125c:	e021      	b.n	80012a2 <HAL_GPIO_Init+0x2e2>
 800125e:	bf00      	nop
 8001260:	10320000 	.word	0x10320000
 8001264:	10310000 	.word	0x10310000
 8001268:	10220000 	.word	0x10220000
 800126c:	10210000 	.word	0x10210000
 8001270:	10120000 	.word	0x10120000
 8001274:	10110000 	.word	0x10110000
 8001278:	40021000 	.word	0x40021000
 800127c:	40010000 	.word	0x40010000
 8001280:	40010800 	.word	0x40010800
 8001284:	40010c00 	.word	0x40010c00
 8001288:	40011000 	.word	0x40011000
 800128c:	40011400 	.word	0x40011400
 8001290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001294:	4b0b      	ldr	r3, [pc, #44]	; (80012c4 <HAL_GPIO_Init+0x304>)
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	69bb      	ldr	r3, [r7, #24]
 800129a:	43db      	mvns	r3, r3
 800129c:	4909      	ldr	r1, [pc, #36]	; (80012c4 <HAL_GPIO_Init+0x304>)
 800129e:	4013      	ands	r3, r2
 80012a0:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 80012a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012a4:	3301      	adds	r3, #1
 80012a6:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681a      	ldr	r2, [r3, #0]
 80012ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ae:	fa22 f303 	lsr.w	r3, r2, r3
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	f47f ae8e 	bne.w	8000fd4 <HAL_GPIO_Init+0x14>
  }
}
 80012b8:	bf00      	nop
 80012ba:	bf00      	nop
 80012bc:	372c      	adds	r7, #44	; 0x2c
 80012be:	46bd      	mov	sp, r7
 80012c0:	bc80      	pop	{r7}
 80012c2:	4770      	bx	lr
 80012c4:	40010400 	.word	0x40010400

080012c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	807b      	strh	r3, [r7, #2]
 80012d4:	4613      	mov	r3, r2
 80012d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d8:	787b      	ldrb	r3, [r7, #1]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d003      	beq.n	80012e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012de:	887a      	ldrh	r2, [r7, #2]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e4:	e003      	b.n	80012ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e6:	887b      	ldrh	r3, [r7, #2]
 80012e8:	041a      	lsls	r2, r3, #16
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	611a      	str	r2, [r3, #16]
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bc80      	pop	{r7}
 80012f6:	4770      	bx	lr

080012f8 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b085      	sub	sp, #20
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
 8001300:	460b      	mov	r3, r1
 8001302:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800130a:	887a      	ldrh	r2, [r7, #2]
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	4013      	ands	r3, r2
 8001310:	041a      	lsls	r2, r3, #16
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	43d9      	mvns	r1, r3
 8001316:	887b      	ldrh	r3, [r7, #2]
 8001318:	400b      	ands	r3, r1
 800131a:	431a      	orrs	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	611a      	str	r2, [r3, #16]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	bc80      	pop	{r7}
 8001328:	4770      	bx	lr

0800132a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800132a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800132c:	b08b      	sub	sp, #44	; 0x2c
 800132e:	af06      	add	r7, sp, #24
 8001330:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d101      	bne.n	800133c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001338:	2301      	movs	r3, #1
 800133a:	e0fd      	b.n	8001538 <HAL_PCD_Init+0x20e>

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8001342:	b2db      	uxtb	r3, r3
 8001344:	2b00      	cmp	r3, #0
 8001346:	d106      	bne.n	8001356 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	2200      	movs	r2, #0
 800134c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001350:	6878      	ldr	r0, [r7, #4]
 8001352:	f007 fbd9 	bl	8008b08 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	2203      	movs	r2, #3
 800135a:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    hpcd->Init.dma_enable = 0U;
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	4618      	mov	r0, r3
 8001364:	f003 f8be 	bl	80044e4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	603b      	str	r3, [r7, #0]
 800136e:	687e      	ldr	r6, [r7, #4]
 8001370:	466d      	mov	r5, sp
 8001372:	f106 0410 	add.w	r4, r6, #16
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	6823      	ldr	r3, [r4, #0]
 800137c:	602b      	str	r3, [r5, #0]
 800137e:	1d33      	adds	r3, r6, #4
 8001380:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001382:	6838      	ldr	r0, [r7, #0]
 8001384:	f003 f888 	bl	8004498 <USB_CoreInit>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d005      	beq.n	800139a <HAL_PCD_Init+0x70>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2202      	movs	r2, #2
 8001392:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001396:	2301      	movs	r3, #1
 8001398:	e0ce      	b.n	8001538 <HAL_PCD_Init+0x20e>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f003 f8b9 	bl	8004518 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80013a6:	2300      	movs	r3, #0
 80013a8:	73fb      	strb	r3, [r7, #15]
 80013aa:	e04c      	b.n	8001446 <HAL_PCD_Init+0x11c>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80013ac:	7bfb      	ldrb	r3, [r7, #15]
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	1c5a      	adds	r2, r3, #1
 80013b2:	4613      	mov	r3, r2
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	440b      	add	r3, r1
 80013bc:	3301      	adds	r3, #1
 80013be:	2201      	movs	r2, #1
 80013c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80013c2:	7bfb      	ldrb	r3, [r7, #15]
 80013c4:	6879      	ldr	r1, [r7, #4]
 80013c6:	1c5a      	adds	r2, r3, #1
 80013c8:	4613      	mov	r3, r2
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	4413      	add	r3, r2
 80013ce:	00db      	lsls	r3, r3, #3
 80013d0:	440b      	add	r3, r1
 80013d2:	7bfa      	ldrb	r2, [r7, #15]
 80013d4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80013d6:	7bfa      	ldrb	r2, [r7, #15]
 80013d8:	7bfb      	ldrb	r3, [r7, #15]
 80013da:	b298      	uxth	r0, r3
 80013dc:	6879      	ldr	r1, [r7, #4]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	00db      	lsls	r3, r3, #3
 80013e6:	440b      	add	r3, r1
 80013e8:	3336      	adds	r3, #54	; 0x36
 80013ea:	4602      	mov	r2, r0
 80013ec:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80013ee:	7bfb      	ldrb	r3, [r7, #15]
 80013f0:	6879      	ldr	r1, [r7, #4]
 80013f2:	1c5a      	adds	r2, r3, #1
 80013f4:	4613      	mov	r3, r2
 80013f6:	009b      	lsls	r3, r3, #2
 80013f8:	4413      	add	r3, r2
 80013fa:	00db      	lsls	r3, r3, #3
 80013fc:	440b      	add	r3, r1
 80013fe:	3303      	adds	r3, #3
 8001400:	2200      	movs	r2, #0
 8001402:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001404:	7bfa      	ldrb	r2, [r7, #15]
 8001406:	6879      	ldr	r1, [r7, #4]
 8001408:	4613      	mov	r3, r2
 800140a:	009b      	lsls	r3, r3, #2
 800140c:	4413      	add	r3, r2
 800140e:	00db      	lsls	r3, r3, #3
 8001410:	440b      	add	r3, r1
 8001412:	3338      	adds	r3, #56	; 0x38
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	6879      	ldr	r1, [r7, #4]
 800141c:	4613      	mov	r3, r2
 800141e:	009b      	lsls	r3, r3, #2
 8001420:	4413      	add	r3, r2
 8001422:	00db      	lsls	r3, r3, #3
 8001424:	440b      	add	r3, r1
 8001426:	333c      	adds	r3, #60	; 0x3c
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800142c:	7bfa      	ldrb	r2, [r7, #15]
 800142e:	6879      	ldr	r1, [r7, #4]
 8001430:	4613      	mov	r3, r2
 8001432:	009b      	lsls	r3, r3, #2
 8001434:	4413      	add	r3, r2
 8001436:	00db      	lsls	r3, r3, #3
 8001438:	440b      	add	r3, r1
 800143a:	3340      	adds	r3, #64	; 0x40
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001440:	7bfb      	ldrb	r3, [r7, #15]
 8001442:	3301      	adds	r3, #1
 8001444:	73fb      	strb	r3, [r7, #15]
 8001446:	7bfa      	ldrb	r2, [r7, #15]
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	429a      	cmp	r2, r3
 800144e:	d3ad      	bcc.n	80013ac <HAL_PCD_Init+0x82>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001450:	2300      	movs	r3, #0
 8001452:	73fb      	strb	r3, [r7, #15]
 8001454:	e044      	b.n	80014e0 <HAL_PCD_Init+0x1b6>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001456:	7bfa      	ldrb	r2, [r7, #15]
 8001458:	6879      	ldr	r1, [r7, #4]
 800145a:	4613      	mov	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	4413      	add	r3, r2
 8001460:	00db      	lsls	r3, r3, #3
 8001462:	440b      	add	r3, r1
 8001464:	f203 1369 	addw	r3, r3, #361	; 0x169
 8001468:	2200      	movs	r2, #0
 800146a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800146c:	7bfa      	ldrb	r2, [r7, #15]
 800146e:	6879      	ldr	r1, [r7, #4]
 8001470:	4613      	mov	r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	4413      	add	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	440b      	add	r3, r1
 800147a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800147e:	7bfa      	ldrb	r2, [r7, #15]
 8001480:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001482:	7bfa      	ldrb	r2, [r7, #15]
 8001484:	6879      	ldr	r1, [r7, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	00db      	lsls	r3, r3, #3
 800148e:	440b      	add	r3, r1
 8001490:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001498:	7bfa      	ldrb	r2, [r7, #15]
 800149a:	6879      	ldr	r1, [r7, #4]
 800149c:	4613      	mov	r3, r2
 800149e:	009b      	lsls	r3, r3, #2
 80014a0:	4413      	add	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	440b      	add	r3, r1
 80014a6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80014ae:	7bfa      	ldrb	r2, [r7, #15]
 80014b0:	6879      	ldr	r1, [r7, #4]
 80014b2:	4613      	mov	r3, r2
 80014b4:	009b      	lsls	r3, r3, #2
 80014b6:	4413      	add	r3, r2
 80014b8:	00db      	lsls	r3, r3, #3
 80014ba:	440b      	add	r3, r1
 80014bc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	009b      	lsls	r3, r3, #2
 80014cc:	4413      	add	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	440b      	add	r3, r1
 80014d2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80014d6:	2200      	movs	r2, #0
 80014d8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014da:	7bfb      	ldrb	r3, [r7, #15]
 80014dc:	3301      	adds	r3, #1
 80014de:	73fb      	strb	r3, [r7, #15]
 80014e0:	7bfa      	ldrb	r2, [r7, #15]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	d3b5      	bcc.n	8001456 <HAL_PCD_Init+0x12c>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	603b      	str	r3, [r7, #0]
 80014f0:	687e      	ldr	r6, [r7, #4]
 80014f2:	466d      	mov	r5, sp
 80014f4:	f106 0410 	add.w	r4, r6, #16
 80014f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80014fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80014fc:	6823      	ldr	r3, [r4, #0]
 80014fe:	602b      	str	r3, [r5, #0]
 8001500:	1d33      	adds	r3, r6, #4
 8001502:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001504:	6838      	ldr	r0, [r7, #0]
 8001506:	f003 f813 	bl	8004530 <USB_DevInit>
 800150a:	4603      	mov	r3, r0
 800150c:	2b00      	cmp	r3, #0
 800150e:	d005      	beq.n	800151c <HAL_PCD_Init+0x1f2>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	2202      	movs	r2, #2
 8001514:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
    return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e00d      	b.n	8001538 <HAL_PCD_Init+0x20e>
  }

  hpcd->USB_Address = 0U;
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	2200      	movs	r2, #0
 8001520:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  (void)USB_DevDisconnect(hpcd->Instance);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f005 fcc5 	bl	8006ec0 <USB_DevDisconnect>

  return HAL_OK;
 8001536:	2300      	movs	r3, #0
}
 8001538:	4618      	mov	r0, r3
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001540 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800154e:	2b01      	cmp	r3, #1
 8001550:	d101      	bne.n	8001556 <HAL_PCD_Start+0x16>
 8001552:	2302      	movs	r3, #2
 8001554:	e016      	b.n	8001584 <HAL_PCD_Start+0x44>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	2201      	movs	r2, #1
 800155a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4618      	mov	r0, r3
 8001564:	f002 ffa8 	bl	80044b8 <USB_EnableGlobalInt>

#if defined (USB)
  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8001568:	2101      	movs	r1, #1
 800156a:	6878      	ldr	r0, [r7, #4]
 800156c:	f007 fd3f 	bl	8008fee <HAL_PCDEx_SetConnectionState>
#endif /* defined (USB) */

  (void)USB_DevConnect(hpcd->Instance);
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f005 fc99 	bl	8006eac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	2200      	movs	r2, #0
 800157e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001582:	2300      	movs	r3, #0
}
 8001584:	4618      	mov	r0, r3
 8001586:	3708      	adds	r7, #8
 8001588:	46bd      	mov	sp, r7
 800158a:	bd80      	pop	{r7, pc}

0800158c <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b088      	sub	sp, #32
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  uint16_t store_ep[8];
  uint8_t i;

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4618      	mov	r0, r3
 800159a:	f005 fc9b 	bl	8006ed4 <USB_ReadInterrupts>
 800159e:	4603      	mov	r3, r0
 80015a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80015a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80015a8:	d102      	bne.n	80015b0 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80015aa:	6878      	ldr	r0, [r7, #4]
 80015ac:	f000 fb5f 	bl	8001c6e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4618      	mov	r0, r3
 80015b6:	f005 fc8d 	bl	8006ed4 <USB_ReadInterrupts>
 80015ba:	4603      	mov	r3, r0
 80015bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c4:	d112      	bne.n	80015ec <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80015ce:	b29a      	uxth	r2, r3
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80015d8:	b292      	uxth	r2, r2
 80015da:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 80015de:	6878      	ldr	r0, [r7, #4]
 80015e0:	f007 fb0d 	bl	8008bfe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80015e4:	2100      	movs	r1, #0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 f923 	bl	8001832 <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4618      	mov	r0, r3
 80015f2:	f005 fc6f 	bl	8006ed4 <USB_ReadInterrupts>
 80015f6:	4603      	mov	r3, r0
 80015f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001600:	d10b      	bne.n	800161a <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800160a:	b29a      	uxth	r2, r3
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001614:	b292      	uxth	r2, r2
 8001616:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f005 fc58 	bl	8006ed4 <USB_ReadInterrupts>
 8001624:	4603      	mov	r3, r0
 8001626:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800162a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800162e:	d10b      	bne.n	8001648 <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001638:	b29a      	uxth	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001642:	b292      	uxth	r2, r2
 8001644:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4618      	mov	r0, r3
 800164e:	f005 fc41 	bl	8006ed4 <USB_ReadInterrupts>
 8001652:	4603      	mov	r3, r0
 8001654:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800165c:	d126      	bne.n	80016ac <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LP_MODE);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001666:	b29a      	uxth	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f022 0204 	bic.w	r2, r2, #4
 8001670:	b292      	uxth	r2, r2
 8001672:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800167e:	b29a      	uxth	r2, r3
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f022 0208 	bic.w	r2, r2, #8
 8001688:	b292      	uxth	r2, r2
 800168a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f007 faee 	bl	8008c70 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800169c:	b29a      	uxth	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80016a6:	b292      	uxth	r2, r2
 80016a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fc0f 	bl	8006ed4 <USB_ReadInterrupts>
 80016b6:	4603      	mov	r3, r0
 80016b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80016bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80016c0:	f040 8082 	bne.w	80017c8 <HAL_PCD_IRQHandler+0x23c>
  {
    /* WA: To Clear Wakeup flag if raised with suspend signal */

    /* Store Endpoint register */
    for (i = 0U; i < 8U; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	77fb      	strb	r3, [r7, #31]
 80016c8:	e010      	b.n	80016ec <HAL_PCD_IRQHandler+0x160>
    {
      store_ep[i] = PCD_GET_ENDPOINT(hpcd->Instance, i);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	461a      	mov	r2, r3
 80016d0:	7ffb      	ldrb	r3, [r7, #31]
 80016d2:	009b      	lsls	r3, r3, #2
 80016d4:	441a      	add	r2, r3
 80016d6:	7ffb      	ldrb	r3, [r7, #31]
 80016d8:	8812      	ldrh	r2, [r2, #0]
 80016da:	b292      	uxth	r2, r2
 80016dc:	005b      	lsls	r3, r3, #1
 80016de:	3320      	adds	r3, #32
 80016e0:	443b      	add	r3, r7
 80016e2:	f823 2c14 	strh.w	r2, [r3, #-20]
    for (i = 0U; i < 8U; i++)
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	3301      	adds	r3, #1
 80016ea:	77fb      	strb	r3, [r7, #31]
 80016ec:	7ffb      	ldrb	r3, [r7, #31]
 80016ee:	2b07      	cmp	r3, #7
 80016f0:	d9eb      	bls.n	80016ca <HAL_PCD_IRQHandler+0x13e>
    }

    /* FORCE RESET */
    hpcd->Instance->CNTR |= (uint16_t)(USB_CNTR_FRES);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80016fa:	b29a      	uxth	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f042 0201 	orr.w	r2, r2, #1
 8001704:	b292      	uxth	r2, r2
 8001706:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* CLEAR RESET */
    hpcd->Instance->CNTR &= (uint16_t)(~USB_CNTR_FRES);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001712:	b29a      	uxth	r2, r3
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 0201 	bic.w	r2, r2, #1
 800171c:	b292      	uxth	r2, r2
 800171e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* wait for reset flag in ISTR */
    while ((hpcd->Instance->ISTR & USB_ISTR_RESET) == 0U)
 8001722:	bf00      	nop
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800172c:	b29b      	uxth	r3, r3
 800172e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001732:	2b00      	cmp	r3, #0
 8001734:	d0f6      	beq.n	8001724 <HAL_PCD_IRQHandler+0x198>
    {
    }

    /* Clear Reset Flag */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800173e:	b29a      	uxth	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001748:	b292      	uxth	r2, r2
 800174a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    /* Restore Registre */
    for (i = 0U; i < 8U; i++)
 800174e:	2300      	movs	r3, #0
 8001750:	77fb      	strb	r3, [r7, #31]
 8001752:	e00f      	b.n	8001774 <HAL_PCD_IRQHandler+0x1e8>
    {
      PCD_SET_ENDPOINT(hpcd->Instance, i, store_ep[i]);
 8001754:	7ffb      	ldrb	r3, [r7, #31]
 8001756:	687a      	ldr	r2, [r7, #4]
 8001758:	6812      	ldr	r2, [r2, #0]
 800175a:	4611      	mov	r1, r2
 800175c:	7ffa      	ldrb	r2, [r7, #31]
 800175e:	0092      	lsls	r2, r2, #2
 8001760:	440a      	add	r2, r1
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	3320      	adds	r3, #32
 8001766:	443b      	add	r3, r7
 8001768:	f833 3c14 	ldrh.w	r3, [r3, #-20]
 800176c:	8013      	strh	r3, [r2, #0]
    for (i = 0U; i < 8U; i++)
 800176e:	7ffb      	ldrb	r3, [r7, #31]
 8001770:	3301      	adds	r3, #1
 8001772:	77fb      	strb	r3, [r7, #31]
 8001774:	7ffb      	ldrb	r3, [r7, #31]
 8001776:	2b07      	cmp	r3, #7
 8001778:	d9ec      	bls.n	8001754 <HAL_PCD_IRQHandler+0x1c8>
    }

    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001782:	b29a      	uxth	r2, r3
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0208 	orr.w	r2, r2, #8
 800178c:	b292      	uxth	r2, r2
 800178e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800179a:	b29a      	uxth	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017a4:	b292      	uxth	r2, r2
 80017a6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LP_MODE;
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f042 0204 	orr.w	r2, r2, #4
 80017bc:	b292      	uxth	r2, r2
 80017be:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 80017c2:	6878      	ldr	r0, [r7, #4]
 80017c4:	f007 fa3a 	bl	8008c3c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4618      	mov	r0, r3
 80017ce:	f005 fb81 	bl	8006ed4 <USB_ReadInterrupts>
 80017d2:	4603      	mov	r3, r0
 80017d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017dc:	d10e      	bne.n	80017fc <HAL_PCD_IRQHandler+0x270>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80017e6:	b29a      	uxth	r2, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017f0:	b292      	uxth	r2, r2
 80017f2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f007 f9f3 	bl	8008be2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	4618      	mov	r0, r3
 8001802:	f005 fb67 	bl	8006ed4 <USB_ReadInterrupts>
 8001806:	4603      	mov	r3, r0
 8001808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800180c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001810:	d10b      	bne.n	800182a <HAL_PCD_IRQHandler+0x29e>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800181a:	b29a      	uxth	r2, r3
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001824:	b292      	uxth	r2, r2
 8001826:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 800182a:	bf00      	nop
 800182c:	3720      	adds	r7, #32
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}

08001832 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001832:	b580      	push	{r7, lr}
 8001834:	b082      	sub	sp, #8
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
 800183a:	460b      	mov	r3, r1
 800183c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001844:	2b01      	cmp	r3, #1
 8001846:	d101      	bne.n	800184c <HAL_PCD_SetAddress+0x1a>
 8001848:	2302      	movs	r3, #2
 800184a:	e013      	b.n	8001874 <HAL_PCD_SetAddress+0x42>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	2201      	movs	r2, #1
 8001850:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	78fa      	ldrb	r2, [r7, #3]
 8001858:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	78fa      	ldrb	r2, [r7, #3]
 8001862:	4611      	mov	r1, r2
 8001864:	4618      	mov	r0, r3
 8001866:	f005 fb0e 	bl	8006e86 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	2200      	movs	r2, #0
 800186e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}

0800187c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	4608      	mov	r0, r1
 8001886:	4611      	mov	r1, r2
 8001888:	461a      	mov	r2, r3
 800188a:	4603      	mov	r3, r0
 800188c:	70fb      	strb	r3, [r7, #3]
 800188e:	460b      	mov	r3, r1
 8001890:	803b      	strh	r3, [r7, #0]
 8001892:	4613      	mov	r3, r2
 8001894:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001896:	2300      	movs	r3, #0
 8001898:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800189a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800189e:	2b00      	cmp	r3, #0
 80018a0:	da0e      	bge.n	80018c0 <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80018a2:	78fb      	ldrb	r3, [r7, #3]
 80018a4:	f003 0307 	and.w	r3, r3, #7
 80018a8:	1c5a      	adds	r2, r3, #1
 80018aa:	4613      	mov	r3, r2
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	4413      	add	r3, r2
 80018b0:	00db      	lsls	r3, r3, #3
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	4413      	add	r3, r2
 80018b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2201      	movs	r2, #1
 80018bc:	705a      	strb	r2, [r3, #1]
 80018be:	e00e      	b.n	80018de <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80018c0:	78fb      	ldrb	r3, [r7, #3]
 80018c2:	f003 0207 	and.w	r2, r3, #7
 80018c6:	4613      	mov	r3, r2
 80018c8:	009b      	lsls	r3, r3, #2
 80018ca:	4413      	add	r3, r2
 80018cc:	00db      	lsls	r3, r3, #3
 80018ce:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018d2:	687a      	ldr	r2, [r7, #4]
 80018d4:	4413      	add	r3, r2
 80018d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2200      	movs	r2, #0
 80018dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80018de:	78fb      	ldrb	r3, [r7, #3]
 80018e0:	f003 0307 	and.w	r3, r3, #7
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80018ea:	883a      	ldrh	r2, [r7, #0]
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	78ba      	ldrb	r2, [r7, #2]
 80018f4:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	785b      	ldrb	r3, [r3, #1]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d004      	beq.n	8001908 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	b29a      	uxth	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001908:	78bb      	ldrb	r3, [r7, #2]
 800190a:	2b02      	cmp	r3, #2
 800190c:	d102      	bne.n	8001914 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	2200      	movs	r2, #0
 8001912:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800191a:	2b01      	cmp	r3, #1
 800191c:	d101      	bne.n	8001922 <HAL_PCD_EP_Open+0xa6>
 800191e:	2302      	movs	r3, #2
 8001920:	e00e      	b.n	8001940 <HAL_PCD_EP_Open+0xc4>
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	2201      	movs	r2, #1
 8001926:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	68f9      	ldr	r1, [r7, #12]
 8001930:	4618      	mov	r0, r3
 8001932:	f002 fe1d 	bl	8004570 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	2200      	movs	r2, #0
 800193a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800193e:	7afb      	ldrb	r3, [r7, #11]
}
 8001940:	4618      	mov	r0, r3
 8001942:	3710      	adds	r7, #16
 8001944:	46bd      	mov	sp, r7
 8001946:	bd80      	pop	{r7, pc}

08001948 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	460b      	mov	r3, r1
 8001952:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001954:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001958:	2b00      	cmp	r3, #0
 800195a:	da0e      	bge.n	800197a <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800195c:	78fb      	ldrb	r3, [r7, #3]
 800195e:	f003 0307 	and.w	r3, r3, #7
 8001962:	1c5a      	adds	r2, r3, #1
 8001964:	4613      	mov	r3, r2
 8001966:	009b      	lsls	r3, r3, #2
 8001968:	4413      	add	r3, r2
 800196a:	00db      	lsls	r3, r3, #3
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	4413      	add	r3, r2
 8001970:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2201      	movs	r2, #1
 8001976:	705a      	strb	r2, [r3, #1]
 8001978:	e00e      	b.n	8001998 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800197a:	78fb      	ldrb	r3, [r7, #3]
 800197c:	f003 0207 	and.w	r2, r3, #7
 8001980:	4613      	mov	r3, r2
 8001982:	009b      	lsls	r3, r3, #2
 8001984:	4413      	add	r3, r2
 8001986:	00db      	lsls	r3, r3, #3
 8001988:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	2200      	movs	r2, #0
 8001996:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001998:	78fb      	ldrb	r3, [r7, #3]
 800199a:	f003 0307 	and.w	r3, r3, #7
 800199e:	b2da      	uxtb	r2, r3
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80019aa:	2b01      	cmp	r3, #1
 80019ac:	d101      	bne.n	80019b2 <HAL_PCD_EP_Close+0x6a>
 80019ae:	2302      	movs	r3, #2
 80019b0:	e00e      	b.n	80019d0 <HAL_PCD_EP_Close+0x88>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	4618      	mov	r0, r3
 80019c2:	f003 f93f 	bl	8004c44 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	2200      	movs	r2, #0
 80019ca:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80019ce:	2300      	movs	r3, #0
}
 80019d0:	4618      	mov	r0, r3
 80019d2:	3710      	adds	r7, #16
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}

080019d8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b086      	sub	sp, #24
 80019dc:	af00      	add	r7, sp, #0
 80019de:	60f8      	str	r0, [r7, #12]
 80019e0:	607a      	str	r2, [r7, #4]
 80019e2:	603b      	str	r3, [r7, #0]
 80019e4:	460b      	mov	r3, r1
 80019e6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	f003 0207 	and.w	r2, r3, #7
 80019ee:	4613      	mov	r3, r2
 80019f0:	009b      	lsls	r3, r3, #2
 80019f2:	4413      	add	r3, r2
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80019fa:	68fa      	ldr	r2, [r7, #12]
 80019fc:	4413      	add	r3, r2
 80019fe:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	687a      	ldr	r2, [r7, #4]
 8001a04:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	683a      	ldr	r2, [r7, #0]
 8001a0a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	2200      	movs	r2, #0
 8001a10:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	2200      	movs	r2, #0
 8001a16:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001a18:	7afb      	ldrb	r3, [r7, #11]
 8001a1a:	f003 0307 	and.w	r3, r3, #7
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001a24:	7afb      	ldrb	r3, [r7, #11]
 8001a26:	f003 0307 	and.w	r3, r3, #7
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d106      	bne.n	8001a3c <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	6979      	ldr	r1, [r7, #20]
 8001a34:	4618      	mov	r0, r3
 8001a36:	f003 faf1 	bl	800501c <USB_EPStartXfer>
 8001a3a:	e005      	b.n	8001a48 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	6979      	ldr	r1, [r7, #20]
 8001a42:	4618      	mov	r0, r3
 8001a44:	f003 faea 	bl	800501c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3718      	adds	r7, #24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001a52:	b480      	push	{r7}
 8001a54:	b083      	sub	sp, #12
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001a5e:	78fb      	ldrb	r3, [r7, #3]
 8001a60:	f003 0207 	and.w	r2, r3, #7
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	4613      	mov	r3, r2
 8001a68:	009b      	lsls	r3, r3, #2
 8001a6a:	4413      	add	r3, r2
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	440b      	add	r3, r1
 8001a70:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001a74:	681b      	ldr	r3, [r3, #0]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b086      	sub	sp, #24
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	60f8      	str	r0, [r7, #12]
 8001a88:	607a      	str	r2, [r7, #4]
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	460b      	mov	r3, r1
 8001a8e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001a90:	7afb      	ldrb	r3, [r7, #11]
 8001a92:	f003 0307 	and.w	r3, r3, #7
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	4613      	mov	r3, r2
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	4413      	add	r3, r2
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	68fa      	ldr	r2, [r7, #12]
 8001aa2:	4413      	add	r3, r2
 8001aa4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001aa6:	697b      	ldr	r3, [r7, #20]
 8001aa8:	687a      	ldr	r2, [r7, #4]
 8001aaa:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001aac:	697b      	ldr	r3, [r7, #20]
 8001aae:	683a      	ldr	r2, [r7, #0]
 8001ab0:	619a      	str	r2, [r3, #24]
#if defined (USB)
  ep->xfer_fill_db = 1U;
 8001ab2:	697b      	ldr	r3, [r7, #20]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	683a      	ldr	r2, [r7, #0]
 8001abe:	621a      	str	r2, [r3, #32]
#endif /* defined (USB) */
  ep->xfer_count = 0U;
 8001ac0:	697b      	ldr	r3, [r7, #20]
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001ac6:	697b      	ldr	r3, [r7, #20]
 8001ac8:	2201      	movs	r2, #1
 8001aca:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001acc:	7afb      	ldrb	r3, [r7, #11]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	b2da      	uxtb	r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ad8:	7afb      	ldrb	r3, [r7, #11]
 8001ada:	f003 0307 	and.w	r3, r3, #7
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d106      	bne.n	8001af0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	6979      	ldr	r1, [r7, #20]
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f003 fa97 	bl	800501c <USB_EPStartXfer>
 8001aee:	e005      	b.n	8001afc <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	6979      	ldr	r1, [r7, #20]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f003 fa90 	bl	800501c <USB_EPStartXfer>
  }

  return HAL_OK;
 8001afc:	2300      	movs	r3, #0
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}

08001b06 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	460b      	mov	r3, r1
 8001b10:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001b12:	78fb      	ldrb	r3, [r7, #3]
 8001b14:	f003 0207 	and.w	r2, r3, #7
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d901      	bls.n	8001b24 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001b20:	2301      	movs	r3, #1
 8001b22:	e04c      	b.n	8001bbe <HAL_PCD_EP_SetStall+0xb8>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001b24:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	da0e      	bge.n	8001b4a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001b2c:	78fb      	ldrb	r3, [r7, #3]
 8001b2e:	f003 0307 	and.w	r3, r3, #7
 8001b32:	1c5a      	adds	r2, r3, #1
 8001b34:	4613      	mov	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4413      	add	r3, r2
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	687a      	ldr	r2, [r7, #4]
 8001b3e:	4413      	add	r3, r2
 8001b40:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2201      	movs	r2, #1
 8001b46:	705a      	strb	r2, [r3, #1]
 8001b48:	e00c      	b.n	8001b64 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001b4a:	78fa      	ldrb	r2, [r7, #3]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	4413      	add	r3, r2
 8001b52:	00db      	lsls	r3, r3, #3
 8001b54:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	4413      	add	r3, r2
 8001b5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	2200      	movs	r2, #0
 8001b62:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	f003 0307 	and.w	r3, r3, #7
 8001b70:	b2da      	uxtb	r2, r3
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001b7c:	2b01      	cmp	r3, #1
 8001b7e:	d101      	bne.n	8001b84 <HAL_PCD_EP_SetStall+0x7e>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e01c      	b.n	8001bbe <HAL_PCD_EP_SetStall+0xb8>
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2201      	movs	r2, #1
 8001b88:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	68f9      	ldr	r1, [r7, #12]
 8001b92:	4618      	mov	r0, r3
 8001b94:	f005 f87a 	bl	8006c8c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001b98:	78fb      	ldrb	r3, [r7, #3]
 8001b9a:	f003 0307 	and.w	r3, r3, #7
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d108      	bne.n	8001bb4 <HAL_PCD_EP_SetStall+0xae>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t *)hpcd->Setup);
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681a      	ldr	r2, [r3, #0]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8001bac:	4619      	mov	r1, r3
 8001bae:	4610      	mov	r0, r2
 8001bb0:	f005 f99f 	bl	8006ef2 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	3710      	adds	r7, #16
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bd80      	pop	{r7, pc}

08001bc6 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b084      	sub	sp, #16
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001bd2:	78fb      	ldrb	r3, [r7, #3]
 8001bd4:	f003 020f 	and.w	r2, r3, #15
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	d901      	bls.n	8001be4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001be0:	2301      	movs	r3, #1
 8001be2:	e040      	b.n	8001c66 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001be4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	da0e      	bge.n	8001c0a <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001bec:	78fb      	ldrb	r3, [r7, #3]
 8001bee:	f003 0307 	and.w	r3, r3, #7
 8001bf2:	1c5a      	adds	r2, r3, #1
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	4413      	add	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	687a      	ldr	r2, [r7, #4]
 8001bfe:	4413      	add	r3, r2
 8001c00:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	2201      	movs	r2, #1
 8001c06:	705a      	strb	r2, [r3, #1]
 8001c08:	e00e      	b.n	8001c28 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001c0a:	78fb      	ldrb	r3, [r7, #3]
 8001c0c:	f003 0207 	and.w	r2, r3, #7
 8001c10:	4613      	mov	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	4413      	add	r3, r2
 8001c16:	00db      	lsls	r3, r3, #3
 8001c18:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001c1c:	687a      	ldr	r2, [r7, #4]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2200      	movs	r2, #0
 8001c26:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001c2e:	78fb      	ldrb	r3, [r7, #3]
 8001c30:	f003 0307 	and.w	r3, r3, #7
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d101      	bne.n	8001c48 <HAL_PCD_EP_ClrStall+0x82>
 8001c44:	2302      	movs	r3, #2
 8001c46:	e00e      	b.n	8001c66 <HAL_PCD_EP_ClrStall+0xa0>
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	68f9      	ldr	r1, [r7, #12]
 8001c56:	4618      	mov	r0, r3
 8001c58:	f005 f868 	bl	8006d2c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c64:	2300      	movs	r3, #0
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8001c6e:	b580      	push	{r7, lr}
 8001c70:	b08e      	sub	sp, #56	; 0x38
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8001c76:	e2ec      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c80:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8001c82:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	f003 030f 	and.w	r3, r3, #15
 8001c8a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 8001c8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	f040 8161 	bne.w	8001f5a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8001c98:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d152      	bne.n	8001d48 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	881b      	ldrh	r3, [r3, #0]
 8001ca8:	b29b      	uxth	r3, r3
 8001caa:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8001cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001cb2:	81fb      	strh	r3, [r7, #14]
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	89fb      	ldrh	r3, [r7, #14]
 8001cba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001cbe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001cc2:	b29b      	uxth	r3, r3
 8001cc4:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3328      	adds	r3, #40	; 0x28
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001cd4:	b29b      	uxth	r3, r3
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	00db      	lsls	r3, r3, #3
 8001cde:	4413      	add	r3, r2
 8001ce0:	3302      	adds	r3, #2
 8001ce2:	005b      	lsls	r3, r3, #1
 8001ce4:	687a      	ldr	r2, [r7, #4]
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001cee:	881b      	ldrh	r3, [r3, #0]
 8001cf0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfa:	695a      	ldr	r2, [r3, #20]
 8001cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfe:	69db      	ldr	r3, [r3, #28]
 8001d00:	441a      	add	r2, r3
 8001d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d04:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8001d06:	2100      	movs	r1, #0
 8001d08:	6878      	ldr	r0, [r7, #4]
 8001d0a:	f006 ff50 	bl	8008bae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 829b 	beq.w	8002252 <PCD_EP_ISR_Handler+0x5e4>
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f040 8296 	bne.w	8002252 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001d2c:	b2db      	uxtb	r3, r3
 8001d2e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b292      	uxth	r2, r2
 8001d3a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2200      	movs	r2, #0
 8001d42:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8001d46:	e284      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d4e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	881b      	ldrh	r3, [r3, #0]
 8001d56:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8001d58:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8001d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d034      	beq.n	8001dcc <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	00db      	lsls	r3, r3, #3
 8001d74:	4413      	add	r3, r2
 8001d76:	3306      	adds	r3, #6
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	6812      	ldr	r2, [r2, #0]
 8001d7e:	4413      	add	r3, r2
 8001d80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001d84:	881b      	ldrh	r3, [r3, #0]
 8001d86:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d8c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6818      	ldr	r0, [r3, #0]
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8001d98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8001d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d9e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8001da0:	b29b      	uxth	r3, r3
 8001da2:	f005 f8f6 	bl	8006f92 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	881b      	ldrh	r3, [r3, #0]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001db2:	4013      	ands	r3, r2
 8001db4:	823b      	strh	r3, [r7, #16]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	8a3a      	ldrh	r2, [r7, #16]
 8001dbc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001dc0:	b292      	uxth	r2, r2
 8001dc2:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8001dc4:	6878      	ldr	r0, [r7, #4]
 8001dc6:	f006 fec5 	bl	8008b54 <HAL_PCD_SetupStageCallback>
 8001dca:	e242      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001dcc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	f280 823e 	bge.w	8002252 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	881b      	ldrh	r3, [r3, #0]
 8001ddc:	b29a      	uxth	r2, r3
 8001dde:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001de2:	4013      	ands	r3, r2
 8001de4:	83bb      	strh	r3, [r7, #28]
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	8bba      	ldrh	r2, [r7, #28]
 8001dec:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001df0:	b292      	uxth	r2, r2
 8001df2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	461a      	mov	r2, r3
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	00db      	lsls	r3, r3, #3
 8001e06:	4413      	add	r3, r2
 8001e08:	3306      	adds	r3, #6
 8001e0a:	005b      	lsls	r3, r3, #1
 8001e0c:	687a      	ldr	r2, [r7, #4]
 8001e0e:	6812      	ldr	r2, [r2, #0]
 8001e10:	4413      	add	r3, r2
 8001e12:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e1e:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8001e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e22:	69db      	ldr	r3, [r3, #28]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d019      	beq.n	8001e5c <PCD_EP_ISR_Handler+0x1ee>
 8001e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e2a:	695b      	ldr	r3, [r3, #20]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d015      	beq.n	8001e5c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6818      	ldr	r0, [r3, #0]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e36:	6959      	ldr	r1, [r3, #20]
 8001e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3a:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 8001e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e3e:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8001e40:	b29b      	uxth	r3, r3
 8001e42:	f005 f8a6 	bl	8006f92 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8001e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e48:	695a      	ldr	r2, [r3, #20]
 8001e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e4c:	69db      	ldr	r3, [r3, #28]
 8001e4e:	441a      	add	r2, r3
 8001e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e52:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8001e54:	2100      	movs	r1, #0
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f006 fe8e 	bl	8008b78 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	881b      	ldrh	r3, [r3, #0]
 8001e62:	b29b      	uxth	r3, r3
 8001e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	f040 81f2 	bne.w	8002252 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	61bb      	str	r3, [r7, #24]
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001e7c:	b29b      	uxth	r3, r3
 8001e7e:	461a      	mov	r2, r3
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	4413      	add	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8001e8c:	617b      	str	r3, [r7, #20]
 8001e8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e90:	691b      	ldr	r3, [r3, #16]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d112      	bne.n	8001ebc <PCD_EP_ISR_Handler+0x24e>
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	881b      	ldrh	r3, [r3, #0]
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8001ea0:	b29a      	uxth	r2, r3
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	801a      	strh	r2, [r3, #0]
 8001ea6:	697b      	ldr	r3, [r7, #20]
 8001ea8:	881b      	ldrh	r3, [r3, #0]
 8001eaa:	b29b      	uxth	r3, r3
 8001eac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001eb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001eb4:	b29a      	uxth	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	801a      	strh	r2, [r3, #0]
 8001eba:	e02f      	b.n	8001f1c <PCD_EP_ISR_Handler+0x2ae>
 8001ebc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b3e      	cmp	r3, #62	; 0x3e
 8001ec2:	d813      	bhi.n	8001eec <PCD_EP_ISR_Handler+0x27e>
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	085b      	lsrs	r3, r3, #1
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
 8001ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ece:	691b      	ldr	r3, [r3, #16]
 8001ed0:	f003 0301 	and.w	r3, r3, #1
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d002      	beq.n	8001ede <PCD_EP_ISR_Handler+0x270>
 8001ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001eda:	3301      	adds	r3, #1
 8001edc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ee0:	b29b      	uxth	r3, r3
 8001ee2:	029b      	lsls	r3, r3, #10
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	801a      	strh	r2, [r3, #0]
 8001eea:	e017      	b.n	8001f1c <PCD_EP_ISR_Handler+0x2ae>
 8001eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eee:	691b      	ldr	r3, [r3, #16]
 8001ef0:	095b      	lsrs	r3, r3, #5
 8001ef2:	633b      	str	r3, [r7, #48]	; 0x30
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	691b      	ldr	r3, [r3, #16]
 8001ef8:	f003 031f 	and.w	r3, r3, #31
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d102      	bne.n	8001f06 <PCD_EP_ISR_Handler+0x298>
 8001f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f02:	3b01      	subs	r3, #1
 8001f04:	633b      	str	r3, [r7, #48]	; 0x30
 8001f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f08:	b29b      	uxth	r3, r3
 8001f0a:	029b      	lsls	r3, r3, #10
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8001f12:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8001f16:	b29a      	uxth	r2, r3
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	b29b      	uxth	r3, r3
 8001f24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2c:	827b      	strh	r3, [r7, #18]
 8001f2e:	8a7b      	ldrh	r3, [r7, #18]
 8001f30:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8001f34:	827b      	strh	r3, [r7, #18]
 8001f36:	8a7b      	ldrh	r3, [r7, #18]
 8001f38:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8001f3c:	827b      	strh	r3, [r7, #18]
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	8a7b      	ldrh	r3, [r7, #18]
 8001f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8001f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	8013      	strh	r3, [r2, #0]
 8001f58:	e17b      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	461a      	mov	r2, r3
 8001f60:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f64:	009b      	lsls	r3, r3, #2
 8001f66:	4413      	add	r3, r2
 8001f68:	881b      	ldrh	r3, [r3, #0]
 8001f6a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8001f6c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f280 80ea 	bge.w	800214a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	4413      	add	r3, r2
 8001f84:	881b      	ldrh	r3, [r3, #0]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	f640 738f 	movw	r3, #3983	; 0xf8f
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	853b      	strh	r3, [r7, #40]	; 0x28
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	461a      	mov	r2, r3
 8001f96:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	4413      	add	r3, r2
 8001f9e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001fa0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001fa4:	b292      	uxth	r2, r2
 8001fa6:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8001fa8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001fac:	4613      	mov	r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	4413      	add	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001fb8:	687a      	ldr	r2, [r7, #4]
 8001fba:	4413      	add	r3, r2
 8001fbc:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8001fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fc0:	7b1b      	ldrb	r3, [r3, #12]
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d122      	bne.n	800200c <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8001fce:	b29b      	uxth	r3, r3
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	00db      	lsls	r3, r3, #3
 8001fd8:	4413      	add	r3, r2
 8001fda:	3306      	adds	r3, #6
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	6812      	ldr	r2, [r2, #0]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001fe8:	881b      	ldrh	r3, [r3, #0]
 8001fea:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001fee:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 8001ff0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	f000 8087 	beq.w	8002106 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6818      	ldr	r0, [r3, #0]
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	6959      	ldr	r1, [r3, #20]
 8002000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002002:	88da      	ldrh	r2, [r3, #6]
 8002004:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002006:	f004 ffc4 	bl	8006f92 <USB_ReadPMA>
 800200a:	e07c      	b.n	8002106 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 800200c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800200e:	78db      	ldrb	r3, [r3, #3]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d108      	bne.n	8002026 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 8002014:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002016:	461a      	mov	r2, r3
 8002018:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 f927 	bl	800226e <HAL_PCD_EP_DB_Receive>
 8002020:	4603      	mov	r3, r0
 8002022:	86fb      	strh	r3, [r7, #54]	; 0x36
 8002024:	e06f      	b.n	8002106 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	461a      	mov	r2, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	009b      	lsls	r3, r3, #2
 8002032:	4413      	add	r3, r2
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	b29b      	uxth	r3, r3
 8002038:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800203c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002040:	847b      	strh	r3, [r7, #34]	; 0x22
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	461a      	mov	r2, r3
 8002048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	441a      	add	r2, r3
 8002050:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002052:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002056:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800205a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800205e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002062:	b29b      	uxth	r3, r3
 8002064:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	461a      	mov	r2, r3
 800206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	009b      	lsls	r3, r3, #2
 8002072:	4413      	add	r3, r2
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	b29b      	uxth	r3, r3
 8002078:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800207c:	2b00      	cmp	r3, #0
 800207e:	d021      	beq.n	80020c4 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002088:	b29b      	uxth	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800208e:	781b      	ldrb	r3, [r3, #0]
 8002090:	00db      	lsls	r3, r3, #3
 8002092:	4413      	add	r3, r2
 8002094:	3302      	adds	r3, #2
 8002096:	005b      	lsls	r3, r3, #1
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	4413      	add	r3, r2
 800209e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020a2:	881b      	ldrh	r3, [r3, #0]
 80020a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020a8:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020aa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d02a      	beq.n	8002106 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b6:	6959      	ldr	r1, [r3, #20]
 80020b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ba:	891a      	ldrh	r2, [r3, #8]
 80020bc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020be:	f004 ff68 	bl	8006f92 <USB_ReadPMA>
 80020c2:	e020      	b.n	8002106 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020cc:	b29b      	uxth	r3, r3
 80020ce:	461a      	mov	r2, r3
 80020d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d2:	781b      	ldrb	r3, [r3, #0]
 80020d4:	00db      	lsls	r3, r3, #3
 80020d6:	4413      	add	r3, r2
 80020d8:	3306      	adds	r3, #6
 80020da:	005b      	lsls	r3, r3, #1
 80020dc:	687a      	ldr	r2, [r7, #4]
 80020de:	6812      	ldr	r2, [r2, #0]
 80020e0:	4413      	add	r3, r2
 80020e2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80020ec:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80020ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d008      	beq.n	8002106 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	6818      	ldr	r0, [r3, #0]
 80020f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fa:	6959      	ldr	r1, [r3, #20]
 80020fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020fe:	895a      	ldrh	r2, [r3, #10]
 8002100:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002102:	f004 ff46 	bl	8006f92 <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 8002106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002108:	69da      	ldr	r2, [r3, #28]
 800210a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800210c:	441a      	add	r2, r3
 800210e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002110:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 8002112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002114:	695a      	ldr	r2, [r3, #20]
 8002116:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002118:	441a      	add	r2, r3
 800211a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800211c:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b00      	cmp	r3, #0
 8002124:	d004      	beq.n	8002130 <PCD_EP_ISR_Handler+0x4c2>
 8002126:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	429a      	cmp	r2, r3
 800212e:	d206      	bcs.n	800213e <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	6878      	ldr	r0, [r7, #4]
 8002138:	f006 fd1e 	bl	8008b78 <HAL_PCD_DataOutStageCallback>
 800213c:	e005      	b.n	800214a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002144:	4618      	mov	r0, r3
 8002146:	f002 ff69 	bl	800501c <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800214a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800214c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002150:	2b00      	cmp	r3, #0
 8002152:	d07e      	beq.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8002154:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002158:	1c5a      	adds	r2, r3, #1
 800215a:	4613      	mov	r3, r2
 800215c:	009b      	lsls	r3, r3, #2
 800215e:	4413      	add	r3, r2
 8002160:	00db      	lsls	r3, r3, #3
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	4413      	add	r3, r2
 8002166:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	461a      	mov	r2, r3
 800216e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	4413      	add	r3, r2
 8002176:	881b      	ldrh	r3, [r3, #0]
 8002178:	b29b      	uxth	r3, r3
 800217a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800217e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002182:	843b      	strh	r3, [r7, #32]
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800218e:	009b      	lsls	r3, r3, #2
 8002190:	441a      	add	r2, r3
 8002192:	8c3b      	ldrh	r3, [r7, #32]
 8002194:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002198:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800219c:	b29b      	uxth	r3, r3
 800219e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021a2:	78db      	ldrb	r3, [r3, #3]
 80021a4:	2b03      	cmp	r3, #3
 80021a6:	d00c      	beq.n	80021c2 <PCD_EP_ISR_Handler+0x554>
 80021a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021aa:	78db      	ldrb	r3, [r3, #3]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021b2:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d146      	bne.n	8002246 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 80021b8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80021ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d141      	bne.n	8002246 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021ca:	b29b      	uxth	r3, r3
 80021cc:	461a      	mov	r2, r3
 80021ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d0:	781b      	ldrb	r3, [r3, #0]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	3302      	adds	r3, #2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	6812      	ldr	r2, [r2, #0]
 80021de:	4413      	add	r3, r2
 80021e0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80021e4:	881b      	ldrh	r3, [r3, #0]
 80021e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80021ea:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80021ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021ee:	699a      	ldr	r2, [r3, #24]
 80021f0:	8bfb      	ldrh	r3, [r7, #30]
 80021f2:	429a      	cmp	r2, r3
 80021f4:	d906      	bls.n	8002204 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	699a      	ldr	r2, [r3, #24]
 80021fa:	8bfb      	ldrh	r3, [r7, #30]
 80021fc:	1ad2      	subs	r2, r2, r3
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	619a      	str	r2, [r3, #24]
 8002202:	e002      	b.n	800220a <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 8002204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002206:	2200      	movs	r2, #0
 8002208:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 800220a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	781b      	ldrb	r3, [r3, #0]
 8002216:	4619      	mov	r1, r3
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f006 fcc8 	bl	8008bae <HAL_PCD_DataInStageCallback>
 800221e:	e018      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 8002220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002222:	695a      	ldr	r2, [r3, #20]
 8002224:	8bfb      	ldrh	r3, [r7, #30]
 8002226:	441a      	add	r2, r3
 8002228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222a:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 800222c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800222e:	69da      	ldr	r2, [r3, #28]
 8002230:	8bfb      	ldrh	r3, [r7, #30]
 8002232:	441a      	add	r2, r3
 8002234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002236:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800223e:	4618      	mov	r0, r3
 8002240:	f002 feec 	bl	800501c <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8002244:	e005      	b.n	8002252 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002246:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002248:	461a      	mov	r2, r3
 800224a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800224c:	6878      	ldr	r0, [r7, #4]
 800224e:	f000 f91b 	bl	8002488 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800225a:	b29b      	uxth	r3, r3
 800225c:	b21b      	sxth	r3, r3
 800225e:	2b00      	cmp	r3, #0
 8002260:	f6ff ad0a 	blt.w	8001c78 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002264:	2300      	movs	r3, #0
}
 8002266:	4618      	mov	r0, r3
 8002268:	3738      	adds	r7, #56	; 0x38
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}

0800226e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 800226e:	b580      	push	{r7, lr}
 8002270:	b088      	sub	sp, #32
 8002272:	af00      	add	r7, sp, #0
 8002274:	60f8      	str	r0, [r7, #12]
 8002276:	60b9      	str	r1, [r7, #8]
 8002278:	4613      	mov	r3, r2
 800227a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800227c:	88fb      	ldrh	r3, [r7, #6]
 800227e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d07e      	beq.n	8002384 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800228e:	b29b      	uxth	r3, r3
 8002290:	461a      	mov	r2, r3
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	781b      	ldrb	r3, [r3, #0]
 8002296:	00db      	lsls	r3, r3, #3
 8002298:	4413      	add	r3, r2
 800229a:	3302      	adds	r3, #2
 800229c:	005b      	lsls	r3, r3, #1
 800229e:	68fa      	ldr	r2, [r7, #12]
 80022a0:	6812      	ldr	r2, [r2, #0]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ae:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	699a      	ldr	r2, [r3, #24]
 80022b4:	8b7b      	ldrh	r3, [r7, #26]
 80022b6:	429a      	cmp	r2, r3
 80022b8:	d306      	bcc.n	80022c8 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	699a      	ldr	r2, [r3, #24]
 80022be:	8b7b      	ldrh	r3, [r7, #26]
 80022c0:	1ad2      	subs	r2, r2, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	619a      	str	r2, [r3, #24]
 80022c6:	e002      	b.n	80022ce <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	2200      	movs	r2, #0
 80022cc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80022ce:	68bb      	ldr	r3, [r7, #8]
 80022d0:	699b      	ldr	r3, [r3, #24]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d123      	bne.n	800231e <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	461a      	mov	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	4413      	add	r3, r2
 80022e4:	881b      	ldrh	r3, [r3, #0]
 80022e6:	b29b      	uxth	r3, r3
 80022e8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022f0:	833b      	strh	r3, [r7, #24]
 80022f2:	8b3b      	ldrh	r3, [r7, #24]
 80022f4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80022f8:	833b      	strh	r3, [r7, #24]
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	461a      	mov	r2, r3
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	781b      	ldrb	r3, [r3, #0]
 8002304:	009b      	lsls	r3, r3, #2
 8002306:	441a      	add	r2, r3
 8002308:	8b3b      	ldrh	r3, [r7, #24]
 800230a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800230e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002312:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002316:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800231a:	b29b      	uxth	r3, r3
 800231c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002324:	2b00      	cmp	r3, #0
 8002326:	d01f      	beq.n	8002368 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	461a      	mov	r2, r3
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	781b      	ldrb	r3, [r3, #0]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	4413      	add	r3, r2
 8002336:	881b      	ldrh	r3, [r3, #0]
 8002338:	b29b      	uxth	r3, r3
 800233a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800233e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002342:	82fb      	strh	r3, [r7, #22]
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	461a      	mov	r2, r3
 800234a:	68bb      	ldr	r3, [r7, #8]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	009b      	lsls	r3, r3, #2
 8002350:	441a      	add	r2, r3
 8002352:	8afb      	ldrh	r3, [r7, #22]
 8002354:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002358:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800235c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002360:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002364:	b29b      	uxth	r3, r3
 8002366:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002368:	8b7b      	ldrh	r3, [r7, #26]
 800236a:	2b00      	cmp	r3, #0
 800236c:	f000 8087 	beq.w	800247e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	68bb      	ldr	r3, [r7, #8]
 8002376:	6959      	ldr	r1, [r3, #20]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	891a      	ldrh	r2, [r3, #8]
 800237c:	8b7b      	ldrh	r3, [r7, #26]
 800237e:	f004 fe08 	bl	8006f92 <USB_ReadPMA>
 8002382:	e07c      	b.n	800247e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800238c:	b29b      	uxth	r3, r3
 800238e:	461a      	mov	r2, r3
 8002390:	68bb      	ldr	r3, [r7, #8]
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	00db      	lsls	r3, r3, #3
 8002396:	4413      	add	r3, r2
 8002398:	3306      	adds	r3, #6
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	68fa      	ldr	r2, [r7, #12]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	4413      	add	r3, r2
 80023a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023ac:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80023ae:	68bb      	ldr	r3, [r7, #8]
 80023b0:	699a      	ldr	r2, [r3, #24]
 80023b2:	8b7b      	ldrh	r3, [r7, #26]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d306      	bcc.n	80023c6 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 80023b8:	68bb      	ldr	r3, [r7, #8]
 80023ba:	699a      	ldr	r2, [r3, #24]
 80023bc:	8b7b      	ldrh	r3, [r7, #26]
 80023be:	1ad2      	subs	r2, r2, r3
 80023c0:	68bb      	ldr	r3, [r7, #8]
 80023c2:	619a      	str	r2, [r3, #24]
 80023c4:	e002      	b.n	80023cc <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 80023c6:	68bb      	ldr	r3, [r7, #8]
 80023c8:	2200      	movs	r2, #0
 80023ca:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80023cc:	68bb      	ldr	r3, [r7, #8]
 80023ce:	699b      	ldr	r3, [r3, #24]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d123      	bne.n	800241c <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	461a      	mov	r2, r3
 80023da:	68bb      	ldr	r3, [r7, #8]
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	4413      	add	r3, r2
 80023e2:	881b      	ldrh	r3, [r3, #0]
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80023ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023ee:	83fb      	strh	r3, [r7, #30]
 80023f0:	8bfb      	ldrh	r3, [r7, #30]
 80023f2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80023f6:	83fb      	strh	r3, [r7, #30]
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	461a      	mov	r2, r3
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	009b      	lsls	r3, r3, #2
 8002404:	441a      	add	r2, r3
 8002406:	8bfb      	ldrh	r3, [r7, #30]
 8002408:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800240c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002410:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002418:	b29b      	uxth	r3, r3
 800241a:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002422:	2b00      	cmp	r3, #0
 8002424:	d11f      	bne.n	8002466 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	461a      	mov	r2, r3
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	009b      	lsls	r3, r3, #2
 8002432:	4413      	add	r3, r2
 8002434:	881b      	ldrh	r3, [r3, #0]
 8002436:	b29b      	uxth	r3, r3
 8002438:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800243c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002440:	83bb      	strh	r3, [r7, #28]
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	461a      	mov	r2, r3
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	781b      	ldrb	r3, [r3, #0]
 800244c:	009b      	lsls	r3, r3, #2
 800244e:	441a      	add	r2, r3
 8002450:	8bbb      	ldrh	r3, [r7, #28]
 8002452:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002456:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800245a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800245e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002462:	b29b      	uxth	r3, r3
 8002464:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002466:	8b7b      	ldrh	r3, [r7, #26]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d008      	beq.n	800247e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	6818      	ldr	r0, [r3, #0]
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	6959      	ldr	r1, [r3, #20]
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	895a      	ldrh	r2, [r3, #10]
 8002478:	8b7b      	ldrh	r3, [r7, #26]
 800247a:	f004 fd8a 	bl	8006f92 <USB_ReadPMA>
    }
  }

  return count;
 800247e:	8b7b      	ldrh	r3, [r7, #26]
}
 8002480:	4618      	mov	r0, r3
 8002482:	3720      	adds	r7, #32
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b0a2      	sub	sp, #136	; 0x88
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	4613      	mov	r3, r2
 8002494:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002496:	88fb      	ldrh	r3, [r7, #6]
 8002498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800249c:	2b00      	cmp	r3, #0
 800249e:	f000 81c7 	beq.w	8002830 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024aa:	b29b      	uxth	r3, r3
 80024ac:	461a      	mov	r2, r3
 80024ae:	68bb      	ldr	r3, [r7, #8]
 80024b0:	781b      	ldrb	r3, [r3, #0]
 80024b2:	00db      	lsls	r3, r3, #3
 80024b4:	4413      	add	r3, r2
 80024b6:	3302      	adds	r3, #2
 80024b8:	005b      	lsls	r3, r3, #1
 80024ba:	68fa      	ldr	r2, [r7, #12]
 80024bc:	6812      	ldr	r2, [r2, #0]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80024c4:	881b      	ldrh	r3, [r3, #0]
 80024c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024ca:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	699a      	ldr	r2, [r3, #24]
 80024d2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024d6:	429a      	cmp	r2, r3
 80024d8:	d907      	bls.n	80024ea <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	699a      	ldr	r2, [r3, #24]
 80024de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80024e2:	1ad2      	subs	r2, r2, r3
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	619a      	str	r2, [r3, #24]
 80024e8:	e002      	b.n	80024f0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	2200      	movs	r2, #0
 80024ee:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 80024f0:	68bb      	ldr	r3, [r7, #8]
 80024f2:	699b      	ldr	r3, [r3, #24]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	f040 80b9 	bne.w	800266c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	785b      	ldrb	r3, [r3, #1]
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d126      	bne.n	8002550 <HAL_PCD_EP_DB_Transmit+0xc8>
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	62bb      	str	r3, [r7, #40]	; 0x28
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002510:	b29b      	uxth	r3, r3
 8002512:	461a      	mov	r2, r3
 8002514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002516:	4413      	add	r3, r2
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	781b      	ldrb	r3, [r3, #0]
 800251e:	011a      	lsls	r2, r3, #4
 8002520:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002522:	4413      	add	r3, r2
 8002524:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002528:	627b      	str	r3, [r7, #36]	; 0x24
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	881b      	ldrh	r3, [r3, #0]
 800252e:	b29b      	uxth	r3, r3
 8002530:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002534:	b29a      	uxth	r2, r3
 8002536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002538:	801a      	strh	r2, [r3, #0]
 800253a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800253c:	881b      	ldrh	r3, [r3, #0]
 800253e:	b29b      	uxth	r3, r3
 8002540:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002544:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002548:	b29a      	uxth	r2, r3
 800254a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254c:	801a      	strh	r2, [r3, #0]
 800254e:	e01a      	b.n	8002586 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	785b      	ldrb	r3, [r3, #1]
 8002554:	2b01      	cmp	r3, #1
 8002556:	d116      	bne.n	8002586 <HAL_PCD_EP_DB_Transmit+0xfe>
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	633b      	str	r3, [r7, #48]	; 0x30
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002566:	b29b      	uxth	r3, r3
 8002568:	461a      	mov	r2, r3
 800256a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256c:	4413      	add	r3, r2
 800256e:	633b      	str	r3, [r7, #48]	; 0x30
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	011a      	lsls	r2, r3, #4
 8002576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002578:	4413      	add	r3, r2
 800257a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800257e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002582:	2200      	movs	r2, #0
 8002584:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	623b      	str	r3, [r7, #32]
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	785b      	ldrb	r3, [r3, #1]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d126      	bne.n	80025e2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	61bb      	str	r3, [r7, #24]
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025a2:	b29b      	uxth	r3, r3
 80025a4:	461a      	mov	r2, r3
 80025a6:	69bb      	ldr	r3, [r7, #24]
 80025a8:	4413      	add	r3, r2
 80025aa:	61bb      	str	r3, [r7, #24]
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	011a      	lsls	r2, r3, #4
 80025b2:	69bb      	ldr	r3, [r7, #24]
 80025b4:	4413      	add	r3, r2
 80025b6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	b29b      	uxth	r3, r3
 80025c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025c6:	b29a      	uxth	r2, r3
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	801a      	strh	r2, [r3, #0]
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80025d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80025da:	b29a      	uxth	r2, r3
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	e017      	b.n	8002612 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025e2:	68bb      	ldr	r3, [r7, #8]
 80025e4:	785b      	ldrb	r3, [r3, #1]
 80025e6:	2b01      	cmp	r3, #1
 80025e8:	d113      	bne.n	8002612 <HAL_PCD_EP_DB_Transmit+0x18a>
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025f2:	b29b      	uxth	r3, r3
 80025f4:	461a      	mov	r2, r3
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	4413      	add	r3, r2
 80025fa:	623b      	str	r3, [r7, #32]
 80025fc:	68bb      	ldr	r3, [r7, #8]
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	011a      	lsls	r2, r3, #4
 8002602:	6a3b      	ldr	r3, [r7, #32]
 8002604:	4413      	add	r3, r2
 8002606:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800260a:	61fb      	str	r3, [r7, #28]
 800260c:	69fb      	ldr	r3, [r7, #28]
 800260e:	2200      	movs	r2, #0
 8002610:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f006 fac8 	bl	8008bae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800261e:	88fb      	ldrh	r3, [r7, #6]
 8002620:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002624:	2b00      	cmp	r3, #0
 8002626:	f000 82d4 	beq.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	461a      	mov	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	009b      	lsls	r3, r3, #2
 8002636:	4413      	add	r3, r2
 8002638:	881b      	ldrh	r3, [r3, #0]
 800263a:	b29b      	uxth	r3, r3
 800263c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002644:	827b      	strh	r3, [r7, #18]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	461a      	mov	r2, r3
 800264c:	68bb      	ldr	r3, [r7, #8]
 800264e:	781b      	ldrb	r3, [r3, #0]
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	441a      	add	r2, r3
 8002654:	8a7b      	ldrh	r3, [r7, #18]
 8002656:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800265a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800265e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002662:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002666:	b29b      	uxth	r3, r3
 8002668:	8013      	strh	r3, [r2, #0]
 800266a:	e2b2      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800266c:	88fb      	ldrh	r3, [r7, #6]
 800266e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d021      	beq.n	80026ba <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	461a      	mov	r2, r3
 800267c:	68bb      	ldr	r3, [r7, #8]
 800267e:	781b      	ldrb	r3, [r3, #0]
 8002680:	009b      	lsls	r3, r3, #2
 8002682:	4413      	add	r3, r2
 8002684:	881b      	ldrh	r3, [r3, #0]
 8002686:	b29b      	uxth	r3, r3
 8002688:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800268c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002690:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	781b      	ldrb	r3, [r3, #0]
 800269e:	009b      	lsls	r3, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80026a6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80026aa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80026ae:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80026b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80026b6:	b29b      	uxth	r3, r3
 80026b8:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80026c0:	2b01      	cmp	r3, #1
 80026c2:	f040 8286 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 80026c6:	68bb      	ldr	r3, [r7, #8]
 80026c8:	695a      	ldr	r2, [r3, #20]
 80026ca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026ce:	441a      	add	r2, r3
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	69da      	ldr	r2, [r3, #28]
 80026d8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80026dc:	441a      	add	r2, r3
 80026de:	68bb      	ldr	r3, [r7, #8]
 80026e0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	6a1a      	ldr	r2, [r3, #32]
 80026e6:	68bb      	ldr	r3, [r7, #8]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	429a      	cmp	r2, r3
 80026ec:	d309      	bcc.n	8002702 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 80026ee:	68bb      	ldr	r3, [r7, #8]
 80026f0:	691b      	ldr	r3, [r3, #16]
 80026f2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	6a1a      	ldr	r2, [r3, #32]
 80026f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80026fa:	1ad2      	subs	r2, r2, r3
 80026fc:	68bb      	ldr	r3, [r7, #8]
 80026fe:	621a      	str	r2, [r3, #32]
 8002700:	e015      	b.n	800272e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	6a1b      	ldr	r3, [r3, #32]
 8002706:	2b00      	cmp	r3, #0
 8002708:	d107      	bne.n	800271a <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 800270a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800270e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002718:	e009      	b.n	800272e <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 800271a:	68bb      	ldr	r3, [r7, #8]
 800271c:	2200      	movs	r2, #0
 800271e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002722:	68bb      	ldr	r3, [r7, #8]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002728:	68bb      	ldr	r3, [r7, #8]
 800272a:	2200      	movs	r2, #0
 800272c:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 800272e:	68bb      	ldr	r3, [r7, #8]
 8002730:	785b      	ldrb	r3, [r3, #1]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d155      	bne.n	80027e2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	63bb      	str	r3, [r7, #56]	; 0x38
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002744:	b29b      	uxth	r3, r3
 8002746:	461a      	mov	r2, r3
 8002748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274a:	4413      	add	r3, r2
 800274c:	63bb      	str	r3, [r7, #56]	; 0x38
 800274e:	68bb      	ldr	r3, [r7, #8]
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	011a      	lsls	r2, r3, #4
 8002754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002756:	4413      	add	r3, r2
 8002758:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800275c:	637b      	str	r3, [r7, #52]	; 0x34
 800275e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002760:	2b00      	cmp	r3, #0
 8002762:	d112      	bne.n	800278a <HAL_PCD_EP_DB_Transmit+0x302>
 8002764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	b29b      	uxth	r3, r3
 800276a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800276e:	b29a      	uxth	r2, r3
 8002770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002772:	801a      	strh	r2, [r3, #0]
 8002774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002776:	881b      	ldrh	r3, [r3, #0]
 8002778:	b29b      	uxth	r3, r3
 800277a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800277e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002782:	b29a      	uxth	r2, r3
 8002784:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002786:	801a      	strh	r2, [r3, #0]
 8002788:	e047      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x392>
 800278a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800278c:	2b3e      	cmp	r3, #62	; 0x3e
 800278e:	d811      	bhi.n	80027b4 <HAL_PCD_EP_DB_Transmit+0x32c>
 8002790:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002792:	085b      	lsrs	r3, r3, #1
 8002794:	64bb      	str	r3, [r7, #72]	; 0x48
 8002796:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002798:	f003 0301 	and.w	r3, r3, #1
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80027a0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a2:	3301      	adds	r3, #1
 80027a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80027a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027a8:	b29b      	uxth	r3, r3
 80027aa:	029b      	lsls	r3, r3, #10
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b0:	801a      	strh	r2, [r3, #0]
 80027b2:	e032      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x392>
 80027b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b6:	095b      	lsrs	r3, r3, #5
 80027b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027bc:	f003 031f 	and.w	r3, r3, #31
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d102      	bne.n	80027ca <HAL_PCD_EP_DB_Transmit+0x342>
 80027c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027c6:	3b01      	subs	r3, #1
 80027c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80027ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80027cc:	b29b      	uxth	r3, r3
 80027ce:	029b      	lsls	r3, r3, #10
 80027d0:	b29b      	uxth	r3, r3
 80027d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80027d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80027da:	b29a      	uxth	r2, r3
 80027dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027de:	801a      	strh	r2, [r3, #0]
 80027e0:	e01b      	b.n	800281a <HAL_PCD_EP_DB_Transmit+0x392>
 80027e2:	68bb      	ldr	r3, [r7, #8]
 80027e4:	785b      	ldrb	r3, [r3, #1]
 80027e6:	2b01      	cmp	r3, #1
 80027e8:	d117      	bne.n	800281a <HAL_PCD_EP_DB_Transmit+0x392>
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	643b      	str	r3, [r7, #64]	; 0x40
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027f8:	b29b      	uxth	r3, r3
 80027fa:	461a      	mov	r2, r3
 80027fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027fe:	4413      	add	r3, r2
 8002800:	643b      	str	r3, [r7, #64]	; 0x40
 8002802:	68bb      	ldr	r3, [r7, #8]
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	011a      	lsls	r2, r3, #4
 8002808:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280a:	4413      	add	r3, r2
 800280c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8002810:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002814:	b29a      	uxth	r2, r3
 8002816:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002818:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	6818      	ldr	r0, [r3, #0]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	6959      	ldr	r1, [r3, #20]
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	891a      	ldrh	r2, [r3, #8]
 8002826:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002828:	b29b      	uxth	r3, r3
 800282a:	f004 fb6d 	bl	8006f08 <USB_WritePMA>
 800282e:	e1d0      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002838:	b29b      	uxth	r3, r3
 800283a:	461a      	mov	r2, r3
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	781b      	ldrb	r3, [r3, #0]
 8002840:	00db      	lsls	r3, r3, #3
 8002842:	4413      	add	r3, r2
 8002844:	3306      	adds	r3, #6
 8002846:	005b      	lsls	r3, r3, #1
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	6812      	ldr	r2, [r2, #0]
 800284c:	4413      	add	r3, r2
 800284e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002852:	881b      	ldrh	r3, [r3, #0]
 8002854:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002858:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	699a      	ldr	r2, [r3, #24]
 8002860:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002864:	429a      	cmp	r2, r3
 8002866:	d307      	bcc.n	8002878 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	699a      	ldr	r2, [r3, #24]
 800286c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002870:	1ad2      	subs	r2, r2, r3
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	619a      	str	r2, [r3, #24]
 8002876:	e002      	b.n	800287e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	2200      	movs	r2, #0
 800287c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800287e:	68bb      	ldr	r3, [r7, #8]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b00      	cmp	r3, #0
 8002884:	f040 80c4 	bne.w	8002a10 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	785b      	ldrb	r3, [r3, #1]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d126      	bne.n	80028de <HAL_PCD_EP_DB_Transmit+0x456>
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800289e:	b29b      	uxth	r3, r3
 80028a0:	461a      	mov	r2, r3
 80028a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028a4:	4413      	add	r3, r2
 80028a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	781b      	ldrb	r3, [r3, #0]
 80028ac:	011a      	lsls	r2, r3, #4
 80028ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028b0:	4413      	add	r3, r2
 80028b2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80028b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80028b8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ba:	881b      	ldrh	r3, [r3, #0]
 80028bc:	b29b      	uxth	r3, r3
 80028be:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80028c2:	b29a      	uxth	r2, r3
 80028c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028c6:	801a      	strh	r2, [r3, #0]
 80028c8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	b29b      	uxth	r3, r3
 80028ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80028d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80028da:	801a      	strh	r2, [r3, #0]
 80028dc:	e01a      	b.n	8002914 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028de:	68bb      	ldr	r3, [r7, #8]
 80028e0:	785b      	ldrb	r3, [r3, #1]
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d116      	bne.n	8002914 <HAL_PCD_EP_DB_Transmit+0x48c>
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	677b      	str	r3, [r7, #116]	; 0x74
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028f4:	b29b      	uxth	r3, r3
 80028f6:	461a      	mov	r2, r3
 80028f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fa:	4413      	add	r3, r2
 80028fc:	677b      	str	r3, [r7, #116]	; 0x74
 80028fe:	68bb      	ldr	r3, [r7, #8]
 8002900:	781b      	ldrb	r3, [r3, #0]
 8002902:	011a      	lsls	r2, r3, #4
 8002904:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002906:	4413      	add	r3, r2
 8002908:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800290c:	673b      	str	r3, [r7, #112]	; 0x70
 800290e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002910:	2200      	movs	r2, #0
 8002912:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	67bb      	str	r3, [r7, #120]	; 0x78
 800291a:	68bb      	ldr	r3, [r7, #8]
 800291c:	785b      	ldrb	r3, [r3, #1]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d12f      	bne.n	8002982 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002932:	b29b      	uxth	r3, r3
 8002934:	461a      	mov	r2, r3
 8002936:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800293a:	4413      	add	r3, r2
 800293c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002940:	68bb      	ldr	r3, [r7, #8]
 8002942:	781b      	ldrb	r3, [r3, #0]
 8002944:	011a      	lsls	r2, r3, #4
 8002946:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800294a:	4413      	add	r3, r2
 800294c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002950:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002954:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002960:	b29a      	uxth	r2, r3
 8002962:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800296c:	881b      	ldrh	r3, [r3, #0]
 800296e:	b29b      	uxth	r3, r3
 8002970:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002974:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002978:	b29a      	uxth	r2, r3
 800297a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800297e:	801a      	strh	r2, [r3, #0]
 8002980:	e017      	b.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x52a>
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	785b      	ldrb	r3, [r3, #1]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d113      	bne.n	80029b2 <HAL_PCD_EP_DB_Transmit+0x52a>
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002992:	b29b      	uxth	r3, r3
 8002994:	461a      	mov	r2, r3
 8002996:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002998:	4413      	add	r3, r2
 800299a:	67bb      	str	r3, [r7, #120]	; 0x78
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	781b      	ldrb	r3, [r3, #0]
 80029a0:	011a      	lsls	r2, r3, #4
 80029a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029a4:	4413      	add	r3, r2
 80029a6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80029aa:	67fb      	str	r3, [r7, #124]	; 0x7c
 80029ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80029ae:	2200      	movs	r2, #0
 80029b0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80029b2:	68bb      	ldr	r3, [r7, #8]
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	4619      	mov	r1, r3
 80029b8:	68f8      	ldr	r0, [r7, #12]
 80029ba:	f006 f8f8 	bl	8008bae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80029be:	88fb      	ldrh	r3, [r7, #6]
 80029c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f040 8104 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	461a      	mov	r2, r3
 80029d0:	68bb      	ldr	r3, [r7, #8]
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	881b      	ldrh	r3, [r3, #0]
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80029e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029e4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	461a      	mov	r2, r3
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	441a      	add	r2, r3
 80029f6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80029fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80029fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a02:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	8013      	strh	r3, [r2, #0]
 8002a0e:	e0e0      	b.n	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002a10:	88fb      	ldrh	r3, [r7, #6]
 8002a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d121      	bne.n	8002a5e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	461a      	mov	r2, r3
 8002a20:	68bb      	ldr	r3, [r7, #8]
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	009b      	lsls	r3, r3, #2
 8002a26:	4413      	add	r3, r2
 8002a28:	881b      	ldrh	r3, [r3, #0]
 8002a2a:	b29b      	uxth	r3, r3
 8002a2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002a30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a34:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	461a      	mov	r2, r3
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	781b      	ldrb	r3, [r3, #0]
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	441a      	add	r2, r3
 8002a46:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002a52:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a5a:	b29b      	uxth	r3, r3
 8002a5c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a64:	2b01      	cmp	r3, #1
 8002a66:	f040 80b4 	bne.w	8002bd2 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	695a      	ldr	r2, [r3, #20]
 8002a6e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a72:	441a      	add	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	69da      	ldr	r2, [r3, #28]
 8002a7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a80:	441a      	add	r2, r3
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	6a1a      	ldr	r2, [r3, #32]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	691b      	ldr	r3, [r3, #16]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d309      	bcc.n	8002aa6 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	6a1a      	ldr	r2, [r3, #32]
 8002a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a9e:	1ad2      	subs	r2, r2, r3
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	621a      	str	r2, [r3, #32]
 8002aa4:	e015      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	6a1b      	ldr	r3, [r3, #32]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d107      	bne.n	8002abe <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 8002aae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002ab2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002abc:	e009      	b.n	8002ad2 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	6a1b      	ldr	r3, [r3, #32]
 8002ac2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002ac4:	68bb      	ldr	r3, [r7, #8]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	2200      	movs	r2, #0
 8002ace:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	667b      	str	r3, [r7, #100]	; 0x64
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	785b      	ldrb	r3, [r3, #1]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d155      	bne.n	8002b8c <HAL_PCD_EP_DB_Transmit+0x704>
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aee:	b29b      	uxth	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002af4:	4413      	add	r3, r2
 8002af6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002af8:	68bb      	ldr	r3, [r7, #8]
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	011a      	lsls	r2, r3, #4
 8002afe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002b00:	4413      	add	r3, r2
 8002b02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002b06:	65bb      	str	r3, [r7, #88]	; 0x58
 8002b08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d112      	bne.n	8002b34 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8002b0e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b10:	881b      	ldrh	r3, [r3, #0]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b1c:	801a      	strh	r2, [r3, #0]
 8002b1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b20:	881b      	ldrh	r3, [r3, #0]
 8002b22:	b29b      	uxth	r3, r3
 8002b24:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b28:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b2c:	b29a      	uxth	r2, r3
 8002b2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b30:	801a      	strh	r2, [r3, #0]
 8002b32:	e044      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x736>
 8002b34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b36:	2b3e      	cmp	r3, #62	; 0x3e
 8002b38:	d811      	bhi.n	8002b5e <HAL_PCD_EP_DB_Transmit+0x6d6>
 8002b3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b3c:	085b      	lsrs	r3, r3, #1
 8002b3e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b40:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b42:	f003 0301 	and.w	r3, r3, #1
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d002      	beq.n	8002b50 <HAL_PCD_EP_DB_Transmit+0x6c8>
 8002b4a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b4c:	3301      	adds	r3, #1
 8002b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8002b50:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	029b      	lsls	r3, r3, #10
 8002b56:	b29a      	uxth	r2, r3
 8002b58:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b5a:	801a      	strh	r2, [r3, #0]
 8002b5c:	e02f      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x736>
 8002b5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b60:	095b      	lsrs	r3, r3, #5
 8002b62:	657b      	str	r3, [r7, #84]	; 0x54
 8002b64:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002b66:	f003 031f 	and.w	r3, r3, #31
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d102      	bne.n	8002b74 <HAL_PCD_EP_DB_Transmit+0x6ec>
 8002b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b70:	3b01      	subs	r3, #1
 8002b72:	657b      	str	r3, [r7, #84]	; 0x54
 8002b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	029b      	lsls	r3, r3, #10
 8002b7a:	b29b      	uxth	r3, r3
 8002b7c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002b80:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b84:	b29a      	uxth	r2, r3
 8002b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002b88:	801a      	strh	r2, [r3, #0]
 8002b8a:	e018      	b.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x736>
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	785b      	ldrb	r3, [r3, #1]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d114      	bne.n	8002bbe <HAL_PCD_EP_DB_Transmit+0x736>
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b9c:	b29b      	uxth	r3, r3
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ba2:	4413      	add	r3, r2
 8002ba4:	667b      	str	r3, [r7, #100]	; 0x64
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	011a      	lsls	r2, r3, #4
 8002bac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002bae:	4413      	add	r3, r2
 8002bb0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8002bb4:	663b      	str	r3, [r7, #96]	; 0x60
 8002bb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bb8:	b29a      	uxth	r2, r3
 8002bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbc:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6818      	ldr	r0, [r3, #0]
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	6959      	ldr	r1, [r3, #20]
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	895a      	ldrh	r2, [r3, #10]
 8002bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002bcc:	b29b      	uxth	r3, r3
 8002bce:	f004 f99b 	bl	8006f08 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	461a      	mov	r2, r3
 8002bd8:	68bb      	ldr	r3, [r7, #8]
 8002bda:	781b      	ldrb	r3, [r3, #0]
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	881b      	ldrh	r3, [r3, #0]
 8002be2:	b29b      	uxth	r3, r3
 8002be4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002be8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bec:	823b      	strh	r3, [r7, #16]
 8002bee:	8a3b      	ldrh	r3, [r7, #16]
 8002bf0:	f083 0310 	eor.w	r3, r3, #16
 8002bf4:	823b      	strh	r3, [r7, #16]
 8002bf6:	8a3b      	ldrh	r3, [r7, #16]
 8002bf8:	f083 0320 	eor.w	r3, r3, #32
 8002bfc:	823b      	strh	r3, [r7, #16]
 8002bfe:	68fb      	ldr	r3, [r7, #12]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	461a      	mov	r2, r3
 8002c04:	68bb      	ldr	r3, [r7, #8]
 8002c06:	781b      	ldrb	r3, [r3, #0]
 8002c08:	009b      	lsls	r3, r3, #2
 8002c0a:	441a      	add	r2, r3
 8002c0c:	8a3b      	ldrh	r3, [r7, #16]
 8002c0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002c12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002c16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c1e:	b29b      	uxth	r3, r3
 8002c20:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3788      	adds	r7, #136	; 0x88
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}

08002c2c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	b087      	sub	sp, #28
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	60f8      	str	r0, [r7, #12]
 8002c34:	607b      	str	r3, [r7, #4]
 8002c36:	460b      	mov	r3, r1
 8002c38:	817b      	strh	r3, [r7, #10]
 8002c3a:	4613      	mov	r3, r2
 8002c3c:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8002c3e:	897b      	ldrh	r3, [r7, #10]
 8002c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c44:	b29b      	uxth	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d00b      	beq.n	8002c62 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c4a:	897b      	ldrh	r3, [r7, #10]
 8002c4c:	f003 0307 	and.w	r3, r3, #7
 8002c50:	1c5a      	adds	r2, r3, #1
 8002c52:	4613      	mov	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4413      	add	r3, r2
 8002c58:	00db      	lsls	r3, r3, #3
 8002c5a:	68fa      	ldr	r2, [r7, #12]
 8002c5c:	4413      	add	r3, r2
 8002c5e:	617b      	str	r3, [r7, #20]
 8002c60:	e009      	b.n	8002c76 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002c62:	897a      	ldrh	r2, [r7, #10]
 8002c64:	4613      	mov	r3, r2
 8002c66:	009b      	lsls	r3, r3, #2
 8002c68:	4413      	add	r3, r2
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002c70:	68fa      	ldr	r2, [r7, #12]
 8002c72:	4413      	add	r3, r2
 8002c74:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8002c76:	893b      	ldrh	r3, [r7, #8]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d107      	bne.n	8002c8c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	2200      	movs	r2, #0
 8002c80:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	697b      	ldr	r3, [r7, #20]
 8002c88:	80da      	strh	r2, [r3, #6]
 8002c8a:	e00b      	b.n	8002ca4 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	b29a      	uxth	r2, r3
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	0c1b      	lsrs	r3, r3, #16
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8002ca4:	2300      	movs	r3, #0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	371c      	adds	r7, #28
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bc80      	pop	{r7}
 8002cae:	4770      	bx	lr

08002cb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b086      	sub	sp, #24
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d101      	bne.n	8002cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	e272      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0301 	and.w	r3, r3, #1
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f000 8087 	beq.w	8002dde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002cd0:	4b92      	ldr	r3, [pc, #584]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 030c 	and.w	r3, r3, #12
 8002cd8:	2b04      	cmp	r3, #4
 8002cda:	d00c      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002cdc:	4b8f      	ldr	r3, [pc, #572]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	f003 030c 	and.w	r3, r3, #12
 8002ce4:	2b08      	cmp	r3, #8
 8002ce6:	d112      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
 8002ce8:	4b8c      	ldr	r3, [pc, #560]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cf4:	d10b      	bne.n	8002d0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf6:	4b89      	ldr	r3, [pc, #548]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d06c      	beq.n	8002ddc <HAL_RCC_OscConfig+0x12c>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d168      	bne.n	8002ddc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e24c      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d16:	d106      	bne.n	8002d26 <HAL_RCC_OscConfig+0x76>
 8002d18:	4b80      	ldr	r3, [pc, #512]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a7f      	ldr	r2, [pc, #508]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d22:	6013      	str	r3, [r2, #0]
 8002d24:	e02e      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d10c      	bne.n	8002d48 <HAL_RCC_OscConfig+0x98>
 8002d2e:	4b7b      	ldr	r3, [pc, #492]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a7a      	ldr	r2, [pc, #488]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	4b78      	ldr	r3, [pc, #480]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a77      	ldr	r2, [pc, #476]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d40:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d44:	6013      	str	r3, [r2, #0]
 8002d46:	e01d      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d50:	d10c      	bne.n	8002d6c <HAL_RCC_OscConfig+0xbc>
 8002d52:	4b72      	ldr	r3, [pc, #456]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a71      	ldr	r2, [pc, #452]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d5c:	6013      	str	r3, [r2, #0]
 8002d5e:	4b6f      	ldr	r3, [pc, #444]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a6e      	ldr	r2, [pc, #440]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	e00b      	b.n	8002d84 <HAL_RCC_OscConfig+0xd4>
 8002d6c:	4b6b      	ldr	r3, [pc, #428]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a6a      	ldr	r2, [pc, #424]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d76:	6013      	str	r3, [r2, #0]
 8002d78:	4b68      	ldr	r3, [pc, #416]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a67      	ldr	r2, [pc, #412]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002d7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d013      	beq.n	8002db4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d8c:	f7fe f800 	bl	8000d90 <HAL_GetTick>
 8002d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d92:	e008      	b.n	8002da6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d94:	f7fd fffc 	bl	8000d90 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	2b64      	cmp	r3, #100	; 0x64
 8002da0:	d901      	bls.n	8002da6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002da2:	2303      	movs	r3, #3
 8002da4:	e200      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002da6:	4b5d      	ldr	r3, [pc, #372]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d0f0      	beq.n	8002d94 <HAL_RCC_OscConfig+0xe4>
 8002db2:	e014      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db4:	f7fd ffec 	bl	8000d90 <HAL_GetTick>
 8002db8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dba:	e008      	b.n	8002dce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dbc:	f7fd ffe8 	bl	8000d90 <HAL_GetTick>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	693b      	ldr	r3, [r7, #16]
 8002dc4:	1ad3      	subs	r3, r2, r3
 8002dc6:	2b64      	cmp	r3, #100	; 0x64
 8002dc8:	d901      	bls.n	8002dce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002dca:	2303      	movs	r3, #3
 8002dcc:	e1ec      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dce:	4b53      	ldr	r3, [pc, #332]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d1f0      	bne.n	8002dbc <HAL_RCC_OscConfig+0x10c>
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ddc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d063      	beq.n	8002eb2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dea:	4b4c      	ldr	r3, [pc, #304]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	f003 030c 	and.w	r3, r3, #12
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d00b      	beq.n	8002e0e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002df6:	4b49      	ldr	r3, [pc, #292]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	f003 030c 	and.w	r3, r3, #12
 8002dfe:	2b08      	cmp	r3, #8
 8002e00:	d11c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d116      	bne.n	8002e3c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0e:	4b43      	ldr	r3, [pc, #268]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d005      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	2b01      	cmp	r3, #1
 8002e20:	d001      	beq.n	8002e26 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e1c0      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e26:	4b3d      	ldr	r3, [pc, #244]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	695b      	ldr	r3, [r3, #20]
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4939      	ldr	r1, [pc, #228]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e36:	4313      	orrs	r3, r2
 8002e38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3a:	e03a      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691b      	ldr	r3, [r3, #16]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d020      	beq.n	8002e86 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e44:	4b36      	ldr	r3, [pc, #216]	; (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e4a:	f7fd ffa1 	bl	8000d90 <HAL_GetTick>
 8002e4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e50:	e008      	b.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e52:	f7fd ff9d 	bl	8000d90 <HAL_GetTick>
 8002e56:	4602      	mov	r2, r0
 8002e58:	693b      	ldr	r3, [r7, #16]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	2b02      	cmp	r3, #2
 8002e5e:	d901      	bls.n	8002e64 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e1a1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e64:	4b2d      	ldr	r3, [pc, #180]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f003 0302 	and.w	r3, r3, #2
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0f0      	beq.n	8002e52 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e70:	4b2a      	ldr	r3, [pc, #168]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	695b      	ldr	r3, [r3, #20]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	4927      	ldr	r1, [pc, #156]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	600b      	str	r3, [r1, #0]
 8002e84:	e015      	b.n	8002eb2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e86:	4b26      	ldr	r3, [pc, #152]	; (8002f20 <HAL_RCC_OscConfig+0x270>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fd ff80 	bl	8000d90 <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e94:	f7fd ff7c 	bl	8000d90 <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e180      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ea6:	4b1d      	ldr	r3, [pc, #116]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f003 0308 	and.w	r3, r3, #8
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d03a      	beq.n	8002f34 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	699b      	ldr	r3, [r3, #24]
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d019      	beq.n	8002efa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ec6:	4b17      	ldr	r3, [pc, #92]	; (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002ec8:	2201      	movs	r2, #1
 8002eca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ecc:	f7fd ff60 	bl	8000d90 <HAL_GetTick>
 8002ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ed2:	e008      	b.n	8002ee6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ed4:	f7fd ff5c 	bl	8000d90 <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d901      	bls.n	8002ee6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e160      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ee6:	4b0d      	ldr	r3, [pc, #52]	; (8002f1c <HAL_RCC_OscConfig+0x26c>)
 8002ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002eea:	f003 0302 	and.w	r3, r3, #2
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d0f0      	beq.n	8002ed4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002ef2:	2001      	movs	r0, #1
 8002ef4:	f000 faa6 	bl	8003444 <RCC_Delay>
 8002ef8:	e01c      	b.n	8002f34 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002efa:	4b0a      	ldr	r3, [pc, #40]	; (8002f24 <HAL_RCC_OscConfig+0x274>)
 8002efc:	2200      	movs	r2, #0
 8002efe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f00:	f7fd ff46 	bl	8000d90 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f06:	e00f      	b.n	8002f28 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f08:	f7fd ff42 	bl	8000d90 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b02      	cmp	r3, #2
 8002f14:	d908      	bls.n	8002f28 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e146      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8002f1a:	bf00      	nop
 8002f1c:	40021000 	.word	0x40021000
 8002f20:	42420000 	.word	0x42420000
 8002f24:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f28:	4b92      	ldr	r3, [pc, #584]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d1e9      	bne.n	8002f08 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0304 	and.w	r3, r3, #4
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	f000 80a6 	beq.w	800308e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f42:	2300      	movs	r3, #0
 8002f44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f46:	4b8b      	ldr	r3, [pc, #556]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10d      	bne.n	8002f6e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f52:	4b88      	ldr	r3, [pc, #544]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	4a87      	ldr	r2, [pc, #540]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f5c:	61d3      	str	r3, [r2, #28]
 8002f5e:	4b85      	ldr	r3, [pc, #532]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f66:	60bb      	str	r3, [r7, #8]
 8002f68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f6e:	4b82      	ldr	r3, [pc, #520]	; (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d118      	bne.n	8002fac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f7a:	4b7f      	ldr	r3, [pc, #508]	; (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a7e      	ldr	r2, [pc, #504]	; (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002f80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f86:	f7fd ff03 	bl	8000d90 <HAL_GetTick>
 8002f8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f8c:	e008      	b.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f8e:	f7fd feff 	bl	8000d90 <HAL_GetTick>
 8002f92:	4602      	mov	r2, r0
 8002f94:	693b      	ldr	r3, [r7, #16]
 8002f96:	1ad3      	subs	r3, r2, r3
 8002f98:	2b64      	cmp	r3, #100	; 0x64
 8002f9a:	d901      	bls.n	8002fa0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002f9c:	2303      	movs	r3, #3
 8002f9e:	e103      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa0:	4b75      	ldr	r3, [pc, #468]	; (8003178 <HAL_RCC_OscConfig+0x4c8>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d0f0      	beq.n	8002f8e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	2b01      	cmp	r3, #1
 8002fb2:	d106      	bne.n	8002fc2 <HAL_RCC_OscConfig+0x312>
 8002fb4:	4b6f      	ldr	r3, [pc, #444]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	6a1b      	ldr	r3, [r3, #32]
 8002fb8:	4a6e      	ldr	r2, [pc, #440]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fba:	f043 0301 	orr.w	r3, r3, #1
 8002fbe:	6213      	str	r3, [r2, #32]
 8002fc0:	e02d      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d10c      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x334>
 8002fca:	4b6a      	ldr	r3, [pc, #424]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	4a69      	ldr	r2, [pc, #420]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6213      	str	r3, [r2, #32]
 8002fd6:	4b67      	ldr	r3, [pc, #412]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
 8002fda:	4a66      	ldr	r2, [pc, #408]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	6213      	str	r3, [r2, #32]
 8002fe2:	e01c      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	2b05      	cmp	r3, #5
 8002fea:	d10c      	bne.n	8003006 <HAL_RCC_OscConfig+0x356>
 8002fec:	4b61      	ldr	r3, [pc, #388]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002fee:	6a1b      	ldr	r3, [r3, #32]
 8002ff0:	4a60      	ldr	r2, [pc, #384]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ff2:	f043 0304 	orr.w	r3, r3, #4
 8002ff6:	6213      	str	r3, [r2, #32]
 8002ff8:	4b5e      	ldr	r3, [pc, #376]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	4a5d      	ldr	r2, [pc, #372]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8002ffe:	f043 0301 	orr.w	r3, r3, #1
 8003002:	6213      	str	r3, [r2, #32]
 8003004:	e00b      	b.n	800301e <HAL_RCC_OscConfig+0x36e>
 8003006:	4b5b      	ldr	r3, [pc, #364]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	4a5a      	ldr	r2, [pc, #360]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	f023 0301 	bic.w	r3, r3, #1
 8003010:	6213      	str	r3, [r2, #32]
 8003012:	4b58      	ldr	r3, [pc, #352]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	4a57      	ldr	r2, [pc, #348]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003018:	f023 0304 	bic.w	r3, r3, #4
 800301c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	68db      	ldr	r3, [r3, #12]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d015      	beq.n	8003052 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003026:	f7fd feb3 	bl	8000d90 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fd feaf 	bl	8000d90 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0b1      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003044:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003046:	6a1b      	ldr	r3, [r3, #32]
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d0ee      	beq.n	800302e <HAL_RCC_OscConfig+0x37e>
 8003050:	e014      	b.n	800307c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003052:	f7fd fe9d 	bl	8000d90 <HAL_GetTick>
 8003056:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003058:	e00a      	b.n	8003070 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800305a:	f7fd fe99 	bl	8000d90 <HAL_GetTick>
 800305e:	4602      	mov	r2, r0
 8003060:	693b      	ldr	r3, [r7, #16]
 8003062:	1ad3      	subs	r3, r2, r3
 8003064:	f241 3288 	movw	r2, #5000	; 0x1388
 8003068:	4293      	cmp	r3, r2
 800306a:	d901      	bls.n	8003070 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800306c:	2303      	movs	r3, #3
 800306e:	e09b      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003070:	4b40      	ldr	r3, [pc, #256]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ee      	bne.n	800305a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800307c:	7dfb      	ldrb	r3, [r7, #23]
 800307e:	2b01      	cmp	r3, #1
 8003080:	d105      	bne.n	800308e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003084:	69db      	ldr	r3, [r3, #28]
 8003086:	4a3b      	ldr	r2, [pc, #236]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003088:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800308c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	2b00      	cmp	r3, #0
 8003094:	f000 8087 	beq.w	80031a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003098:	4b36      	ldr	r3, [pc, #216]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b08      	cmp	r3, #8
 80030a2:	d061      	beq.n	8003168 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	69db      	ldr	r3, [r3, #28]
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d146      	bne.n	800313a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030ac:	4b33      	ldr	r3, [pc, #204]	; (800317c <HAL_RCC_OscConfig+0x4cc>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030b2:	f7fd fe6d 	bl	8000d90 <HAL_GetTick>
 80030b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030b8:	e008      	b.n	80030cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030ba:	f7fd fe69 	bl	8000d90 <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d901      	bls.n	80030cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80030c8:	2303      	movs	r3, #3
 80030ca:	e06d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80030cc:	4b29      	ldr	r3, [pc, #164]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d1f0      	bne.n	80030ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a1b      	ldr	r3, [r3, #32]
 80030dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030e0:	d108      	bne.n	80030f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80030e2:	4b24      	ldr	r3, [pc, #144]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	4921      	ldr	r1, [pc, #132]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f0:	4313      	orrs	r3, r2
 80030f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030f4:	4b1f      	ldr	r3, [pc, #124]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a19      	ldr	r1, [r3, #32]
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003104:	430b      	orrs	r3, r1
 8003106:	491b      	ldr	r1, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 8003108:	4313      	orrs	r3, r2
 800310a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800310c:	4b1b      	ldr	r3, [pc, #108]	; (800317c <HAL_RCC_OscConfig+0x4cc>)
 800310e:	2201      	movs	r2, #1
 8003110:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003112:	f7fd fe3d 	bl	8000d90 <HAL_GetTick>
 8003116:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800311a:	f7fd fe39 	bl	8000d90 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e03d      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800312c:	4b11      	ldr	r3, [pc, #68]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d0f0      	beq.n	800311a <HAL_RCC_OscConfig+0x46a>
 8003138:	e035      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800313a:	4b10      	ldr	r3, [pc, #64]	; (800317c <HAL_RCC_OscConfig+0x4cc>)
 800313c:	2200      	movs	r2, #0
 800313e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003140:	f7fd fe26 	bl	8000d90 <HAL_GetTick>
 8003144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003146:	e008      	b.n	800315a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003148:	f7fd fe22 	bl	8000d90 <HAL_GetTick>
 800314c:	4602      	mov	r2, r0
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	1ad3      	subs	r3, r2, r3
 8003152:	2b02      	cmp	r3, #2
 8003154:	d901      	bls.n	800315a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003156:	2303      	movs	r3, #3
 8003158:	e026      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800315a:	4b06      	ldr	r3, [pc, #24]	; (8003174 <HAL_RCC_OscConfig+0x4c4>)
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d1f0      	bne.n	8003148 <HAL_RCC_OscConfig+0x498>
 8003166:	e01e      	b.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	69db      	ldr	r3, [r3, #28]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d107      	bne.n	8003180 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e019      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
 8003174:	40021000 	.word	0x40021000
 8003178:	40007000 	.word	0x40007000
 800317c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003180:	4b0b      	ldr	r3, [pc, #44]	; (80031b0 <HAL_RCC_OscConfig+0x500>)
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	6a1b      	ldr	r3, [r3, #32]
 8003190:	429a      	cmp	r2, r3
 8003192:	d106      	bne.n	80031a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800319e:	429a      	cmp	r2, r3
 80031a0:	d001      	beq.n	80031a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e000      	b.n	80031a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80031a6:	2300      	movs	r3, #0
}
 80031a8:	4618      	mov	r0, r3
 80031aa:	3718      	adds	r7, #24
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bd80      	pop	{r7, pc}
 80031b0:	40021000 	.word	0x40021000

080031b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d101      	bne.n	80031c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031c4:	2301      	movs	r3, #1
 80031c6:	e0d0      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031c8:	4b6a      	ldr	r3, [pc, #424]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	683a      	ldr	r2, [r7, #0]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d910      	bls.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031d6:	4b67      	ldr	r3, [pc, #412]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f023 0207 	bic.w	r2, r3, #7
 80031de:	4965      	ldr	r1, [pc, #404]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031e6:	4b63      	ldr	r3, [pc, #396]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	683a      	ldr	r2, [r7, #0]
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d001      	beq.n	80031f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80031f4:	2301      	movs	r3, #1
 80031f6:	e0b8      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	2b00      	cmp	r3, #0
 8003202:	d020      	beq.n	8003246 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b00      	cmp	r3, #0
 800320e:	d005      	beq.n	800321c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003210:	4b59      	ldr	r3, [pc, #356]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	4a58      	ldr	r2, [pc, #352]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003216:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800321a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0308 	and.w	r3, r3, #8
 8003224:	2b00      	cmp	r3, #0
 8003226:	d005      	beq.n	8003234 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003228:	4b53      	ldr	r3, [pc, #332]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	4a52      	ldr	r2, [pc, #328]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003232:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003234:	4b50      	ldr	r3, [pc, #320]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	494d      	ldr	r1, [pc, #308]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003242:	4313      	orrs	r3, r2
 8003244:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0301 	and.w	r3, r3, #1
 800324e:	2b00      	cmp	r3, #0
 8003250:	d040      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800325a:	4b47      	ldr	r3, [pc, #284]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d115      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e07f      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b02      	cmp	r3, #2
 8003270:	d107      	bne.n	8003282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003272:	4b41      	ldr	r3, [pc, #260]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800327a:	2b00      	cmp	r3, #0
 800327c:	d109      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e073      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003282:	4b3d      	ldr	r3, [pc, #244]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e06b      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003292:	4b39      	ldr	r3, [pc, #228]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003294:	685b      	ldr	r3, [r3, #4]
 8003296:	f023 0203 	bic.w	r2, r3, #3
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	4936      	ldr	r1, [pc, #216]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032a0:	4313      	orrs	r3, r2
 80032a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a4:	f7fd fd74 	bl	8000d90 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032aa:	e00a      	b.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ac:	f7fd fd70 	bl	8000d90 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d901      	bls.n	80032c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e053      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c2:	4b2d      	ldr	r3, [pc, #180]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	f003 020c 	and.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	009b      	lsls	r3, r3, #2
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d1eb      	bne.n	80032ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032d4:	4b27      	ldr	r3, [pc, #156]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d210      	bcs.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b24      	ldr	r3, [pc, #144]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f023 0207 	bic.w	r2, r3, #7
 80032ea:	4922      	ldr	r1, [pc, #136]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f2:	4b20      	ldr	r3, [pc, #128]	; (8003374 <HAL_RCC_ClockConfig+0x1c0>)
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f003 0307 	and.w	r3, r3, #7
 80032fa:	683a      	ldr	r2, [r7, #0]
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e032      	b.n	800336a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d008      	beq.n	8003322 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003310:	4b19      	ldr	r3, [pc, #100]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	68db      	ldr	r3, [r3, #12]
 800331c:	4916      	ldr	r1, [pc, #88]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800331e:	4313      	orrs	r3, r2
 8003320:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0308 	and.w	r3, r3, #8
 800332a:	2b00      	cmp	r3, #0
 800332c:	d009      	beq.n	8003342 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800332e:	4b12      	ldr	r3, [pc, #72]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	691b      	ldr	r3, [r3, #16]
 800333a:	00db      	lsls	r3, r3, #3
 800333c:	490e      	ldr	r1, [pc, #56]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003342:	f000 f821 	bl	8003388 <HAL_RCC_GetSysClockFreq>
 8003346:	4602      	mov	r2, r0
 8003348:	4b0b      	ldr	r3, [pc, #44]	; (8003378 <HAL_RCC_ClockConfig+0x1c4>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	091b      	lsrs	r3, r3, #4
 800334e:	f003 030f 	and.w	r3, r3, #15
 8003352:	490a      	ldr	r1, [pc, #40]	; (800337c <HAL_RCC_ClockConfig+0x1c8>)
 8003354:	5ccb      	ldrb	r3, [r1, r3]
 8003356:	fa22 f303 	lsr.w	r3, r2, r3
 800335a:	4a09      	ldr	r2, [pc, #36]	; (8003380 <HAL_RCC_ClockConfig+0x1cc>)
 800335c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800335e:	4b09      	ldr	r3, [pc, #36]	; (8003384 <HAL_RCC_ClockConfig+0x1d0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd fcd2 	bl	8000d0c <HAL_InitTick>

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}
 8003372:	bf00      	nop
 8003374:	40022000 	.word	0x40022000
 8003378:	40021000 	.word	0x40021000
 800337c:	08009148 	.word	0x08009148
 8003380:	20000008 	.word	0x20000008
 8003384:	2000000c 	.word	0x2000000c

08003388 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003388:	b490      	push	{r4, r7}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800338e:	4b29      	ldr	r3, [pc, #164]	; (8003434 <HAL_RCC_GetSysClockFreq+0xac>)
 8003390:	1d3c      	adds	r4, r7, #4
 8003392:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8003394:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8003398:	f240 2301 	movw	r3, #513	; 0x201
 800339c:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	61fb      	str	r3, [r7, #28]
 80033a2:	2300      	movs	r3, #0
 80033a4:	61bb      	str	r3, [r7, #24]
 80033a6:	2300      	movs	r3, #0
 80033a8:	627b      	str	r3, [r7, #36]	; 0x24
 80033aa:	2300      	movs	r3, #0
 80033ac:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033ae:	2300      	movs	r3, #0
 80033b0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80033b2:	4b21      	ldr	r3, [pc, #132]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033b8:	69fb      	ldr	r3, [r7, #28]
 80033ba:	f003 030c 	and.w	r3, r3, #12
 80033be:	2b04      	cmp	r3, #4
 80033c0:	d002      	beq.n	80033c8 <HAL_RCC_GetSysClockFreq+0x40>
 80033c2:	2b08      	cmp	r3, #8
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_GetSysClockFreq+0x46>
 80033c6:	e02b      	b.n	8003420 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033c8:	4b1c      	ldr	r3, [pc, #112]	; (800343c <HAL_RCC_GetSysClockFreq+0xb4>)
 80033ca:	623b      	str	r3, [r7, #32]
      break;
 80033cc:	e02b      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80033ce:	69fb      	ldr	r3, [r7, #28]
 80033d0:	0c9b      	lsrs	r3, r3, #18
 80033d2:	f003 030f 	and.w	r3, r3, #15
 80033d6:	3328      	adds	r3, #40	; 0x28
 80033d8:	443b      	add	r3, r7
 80033da:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 80033de:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d012      	beq.n	8003410 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80033ea:	4b13      	ldr	r3, [pc, #76]	; (8003438 <HAL_RCC_GetSysClockFreq+0xb0>)
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	0c5b      	lsrs	r3, r3, #17
 80033f0:	f003 0301 	and.w	r3, r3, #1
 80033f4:	3328      	adds	r3, #40	; 0x28
 80033f6:	443b      	add	r3, r7
 80033f8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 80033fc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	4a0e      	ldr	r2, [pc, #56]	; (800343c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003402:	fb03 f202 	mul.w	r2, r3, r2
 8003406:	69bb      	ldr	r3, [r7, #24]
 8003408:	fbb2 f3f3 	udiv	r3, r2, r3
 800340c:	627b      	str	r3, [r7, #36]	; 0x24
 800340e:	e004      	b.n	800341a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003410:	697b      	ldr	r3, [r7, #20]
 8003412:	4a0b      	ldr	r2, [pc, #44]	; (8003440 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003414:	fb02 f303 	mul.w	r3, r2, r3
 8003418:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	623b      	str	r3, [r7, #32]
      break;
 800341e:	e002      	b.n	8003426 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003420:	4b06      	ldr	r3, [pc, #24]	; (800343c <HAL_RCC_GetSysClockFreq+0xb4>)
 8003422:	623b      	str	r3, [r7, #32]
      break;
 8003424:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003426:	6a3b      	ldr	r3, [r7, #32]
}
 8003428:	4618      	mov	r0, r3
 800342a:	3728      	adds	r7, #40	; 0x28
 800342c:	46bd      	mov	sp, r7
 800342e:	bc90      	pop	{r4, r7}
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	080090f4 	.word	0x080090f4
 8003438:	40021000 	.word	0x40021000
 800343c:	007a1200 	.word	0x007a1200
 8003440:	003d0900 	.word	0x003d0900

08003444 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800344c:	4b0a      	ldr	r3, [pc, #40]	; (8003478 <RCC_Delay+0x34>)
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	4a0a      	ldr	r2, [pc, #40]	; (800347c <RCC_Delay+0x38>)
 8003452:	fba2 2303 	umull	r2, r3, r2, r3
 8003456:	0a5b      	lsrs	r3, r3, #9
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	fb02 f303 	mul.w	r3, r2, r3
 800345e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003460:	bf00      	nop
  }
  while (Delay --);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	1e5a      	subs	r2, r3, #1
 8003466:	60fa      	str	r2, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1f9      	bne.n	8003460 <RCC_Delay+0x1c>
}
 800346c:	bf00      	nop
 800346e:	bf00      	nop
 8003470:	3714      	adds	r7, #20
 8003472:	46bd      	mov	sp, r7
 8003474:	bc80      	pop	{r7}
 8003476:	4770      	bx	lr
 8003478:	20000008 	.word	0x20000008
 800347c:	10624dd3 	.word	0x10624dd3

08003480 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b086      	sub	sp, #24
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8003488:	2300      	movs	r3, #0
 800348a:	613b      	str	r3, [r7, #16]
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f003 0301 	and.w	r3, r3, #1
 8003498:	2b00      	cmp	r3, #0
 800349a:	d07d      	beq.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 800349c:	2300      	movs	r3, #0
 800349e:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a0:	4b4f      	ldr	r3, [pc, #316]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034a2:	69db      	ldr	r3, [r3, #28]
 80034a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d10d      	bne.n	80034c8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ac:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ae:	69db      	ldr	r3, [r3, #28]
 80034b0:	4a4b      	ldr	r2, [pc, #300]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034b6:	61d3      	str	r3, [r2, #28]
 80034b8:	4b49      	ldr	r3, [pc, #292]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c0:	60bb      	str	r3, [r7, #8]
 80034c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034c4:	2301      	movs	r3, #1
 80034c6:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034c8:	4b46      	ldr	r3, [pc, #280]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d118      	bne.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034d4:	4b43      	ldr	r3, [pc, #268]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a42      	ldr	r2, [pc, #264]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e0:	f7fd fc56 	bl	8000d90 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034e6:	e008      	b.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034e8:	f7fd fc52 	bl	8000d90 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	; 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e06d      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034fa:	4b3a      	ldr	r3, [pc, #232]	; (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0f0      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003506:	4b36      	ldr	r3, [pc, #216]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800350e:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d02e      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351e:	68fa      	ldr	r2, [r7, #12]
 8003520:	429a      	cmp	r2, r3
 8003522:	d027      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003524:	4b2e      	ldr	r3, [pc, #184]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003526:	6a1b      	ldr	r3, [r3, #32]
 8003528:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800352c:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800352e:	4b2e      	ldr	r3, [pc, #184]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003534:	4b2c      	ldr	r3, [pc, #176]	; (80035e8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003536:	2200      	movs	r2, #0
 8003538:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800353a:	4a29      	ldr	r2, [pc, #164]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	f003 0301 	and.w	r3, r3, #1
 8003546:	2b00      	cmp	r3, #0
 8003548:	d014      	beq.n	8003574 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800354a:	f7fd fc21 	bl	8000d90 <HAL_GetTick>
 800354e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003550:	e00a      	b.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003552:	f7fd fc1d 	bl	8000d90 <HAL_GetTick>
 8003556:	4602      	mov	r2, r0
 8003558:	693b      	ldr	r3, [r7, #16]
 800355a:	1ad3      	subs	r3, r2, r3
 800355c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003560:	4293      	cmp	r3, r2
 8003562:	d901      	bls.n	8003568 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003564:	2303      	movs	r3, #3
 8003566:	e036      	b.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003568:	4b1d      	ldr	r3, [pc, #116]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800356a:	6a1b      	ldr	r3, [r3, #32]
 800356c:	f003 0302 	and.w	r3, r3, #2
 8003570:	2b00      	cmp	r3, #0
 8003572:	d0ee      	beq.n	8003552 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003574:	4b1a      	ldr	r3, [pc, #104]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	4917      	ldr	r1, [pc, #92]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003582:	4313      	orrs	r3, r2
 8003584:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003586:	7dfb      	ldrb	r3, [r7, #23]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d105      	bne.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800358c:	4b14      	ldr	r3, [pc, #80]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4a13      	ldr	r2, [pc, #76]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003596:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0302 	and.w	r3, r3, #2
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d008      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a4:	4b0e      	ldr	r3, [pc, #56]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	689b      	ldr	r3, [r3, #8]
 80035b0:	490b      	ldr	r1, [pc, #44]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035b2:	4313      	orrs	r3, r2
 80035b4:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f003 0310 	and.w	r3, r3, #16
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d008      	beq.n	80035d4 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80035c2:	4b07      	ldr	r3, [pc, #28]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	4904      	ldr	r1, [pc, #16]	; (80035e0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80035d4:	2300      	movs	r3, #0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3718      	adds	r7, #24
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop
 80035e0:	40021000 	.word	0x40021000
 80035e4:	40007000 	.word	0x40007000
 80035e8:	42420440 	.word	0x42420440

080035ec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b082      	sub	sp, #8
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d101      	bne.n	80035fe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e076      	b.n	80036ec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003602:	2b00      	cmp	r3, #0
 8003604:	d108      	bne.n	8003618 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800360e:	d009      	beq.n	8003624 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2200      	movs	r2, #0
 8003614:	61da      	str	r2, [r3, #28]
 8003616:	e005      	b.n	8003624 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	2200      	movs	r2, #0
 800361c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2200      	movs	r2, #0
 8003622:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2200      	movs	r2, #0
 8003628:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003630:	b2db      	uxtb	r3, r3
 8003632:	2b00      	cmp	r3, #0
 8003634:	d106      	bne.n	8003644 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2200      	movs	r2, #0
 800363a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800363e:	6878      	ldr	r0, [r7, #4]
 8003640:	f7fd fa6c 	bl	8000b1c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681a      	ldr	r2, [r3, #0]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800365a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800366c:	431a      	orrs	r2, r3
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	68db      	ldr	r3, [r3, #12]
 8003672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003676:	431a      	orrs	r2, r3
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	f003 0302 	and.w	r3, r3, #2
 8003680:	431a      	orrs	r2, r3
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	695b      	ldr	r3, [r3, #20]
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	431a      	orrs	r2, r3
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	699b      	ldr	r3, [r3, #24]
 8003690:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003694:	431a      	orrs	r2, r3
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	69db      	ldr	r3, [r3, #28]
 800369a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800369e:	431a      	orrs	r2, r3
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6a1b      	ldr	r3, [r3, #32]
 80036a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036a8:	ea42 0103 	orr.w	r1, r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036b0:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	430a      	orrs	r2, r1
 80036ba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	0c1a      	lsrs	r2, r3, #16
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f002 0204 	and.w	r2, r2, #4
 80036ca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	69da      	ldr	r2, [r3, #28]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036da:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2200      	movs	r2, #0
 80036e0:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2201      	movs	r2, #1
 80036e6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80036ea:	2300      	movs	r3, #0
}
 80036ec:	4618      	mov	r0, r3
 80036ee:	3708      	adds	r7, #8
 80036f0:	46bd      	mov	sp, r7
 80036f2:	bd80      	pop	{r7, pc}

080036f4 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	b088      	sub	sp, #32
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	60f8      	str	r0, [r7, #12]
 80036fc:	60b9      	str	r1, [r7, #8]
 80036fe:	603b      	str	r3, [r7, #0]
 8003700:	4613      	mov	r3, r2
 8003702:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003704:	2300      	movs	r3, #0
 8003706:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800370e:	2b01      	cmp	r3, #1
 8003710:	d101      	bne.n	8003716 <HAL_SPI_Transmit+0x22>
 8003712:	2302      	movs	r3, #2
 8003714:	e126      	b.n	8003964 <HAL_SPI_Transmit+0x270>
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800371e:	f7fd fb37 	bl	8000d90 <HAL_GetTick>
 8003722:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003724:	88fb      	ldrh	r3, [r7, #6]
 8003726:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d002      	beq.n	800373a <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003734:	2302      	movs	r3, #2
 8003736:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003738:	e10b      	b.n	8003952 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d002      	beq.n	8003746 <HAL_SPI_Transmit+0x52>
 8003740:	88fb      	ldrh	r3, [r7, #6]
 8003742:	2b00      	cmp	r3, #0
 8003744:	d102      	bne.n	800374c <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003746:	2301      	movs	r3, #1
 8003748:	77fb      	strb	r3, [r7, #31]
    goto error;
 800374a:	e102      	b.n	8003952 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2203      	movs	r2, #3
 8003750:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2200      	movs	r2, #0
 8003758:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	68ba      	ldr	r2, [r7, #8]
 800375e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	88fa      	ldrh	r2, [r7, #6]
 8003764:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	88fa      	ldrh	r2, [r7, #6]
 800376a:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	2200      	movs	r2, #0
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	2200      	movs	r2, #0
 8003782:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003792:	d10f      	bne.n	80037b4 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	681a      	ldr	r2, [r3, #0]
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037a2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037b2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037be:	2b40      	cmp	r3, #64	; 0x40
 80037c0:	d007      	beq.n	80037d2 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037d0:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037da:	d14b      	bne.n	8003874 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d002      	beq.n	80037ea <HAL_SPI_Transmit+0xf6>
 80037e4:	8afb      	ldrh	r3, [r7, #22]
 80037e6:	2b01      	cmp	r3, #1
 80037e8:	d13e      	bne.n	8003868 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ee:	881a      	ldrh	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fa:	1c9a      	adds	r2, r3, #2
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003804:	b29b      	uxth	r3, r3
 8003806:	3b01      	subs	r3, #1
 8003808:	b29a      	uxth	r2, r3
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800380e:	e02b      	b.n	8003868 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	2b02      	cmp	r3, #2
 800381c:	d112      	bne.n	8003844 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	1c9a      	adds	r2, r3, #2
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003838:	b29b      	uxth	r3, r3
 800383a:	3b01      	subs	r3, #1
 800383c:	b29a      	uxth	r2, r3
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	86da      	strh	r2, [r3, #54]	; 0x36
 8003842:	e011      	b.n	8003868 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003844:	f7fd faa4 	bl	8000d90 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	69bb      	ldr	r3, [r7, #24]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	683a      	ldr	r2, [r7, #0]
 8003850:	429a      	cmp	r2, r3
 8003852:	d803      	bhi.n	800385c <HAL_SPI_Transmit+0x168>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	f1b3 3fff 	cmp.w	r3, #4294967295
 800385a:	d102      	bne.n	8003862 <HAL_SPI_Transmit+0x16e>
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d102      	bne.n	8003868 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003866:	e074      	b.n	8003952 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800386c:	b29b      	uxth	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ce      	bne.n	8003810 <HAL_SPI_Transmit+0x11c>
 8003872:	e04c      	b.n	800390e <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d002      	beq.n	8003882 <HAL_SPI_Transmit+0x18e>
 800387c:	8afb      	ldrh	r3, [r7, #22]
 800387e:	2b01      	cmp	r3, #1
 8003880:	d140      	bne.n	8003904 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	330c      	adds	r3, #12
 800388c:	7812      	ldrb	r2, [r2, #0]
 800388e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003894:	1c5a      	adds	r2, r3, #1
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800389e:	b29b      	uxth	r3, r3
 80038a0:	3b01      	subs	r3, #1
 80038a2:	b29a      	uxth	r2, r3
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038a8:	e02c      	b.n	8003904 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	f003 0302 	and.w	r3, r3, #2
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d113      	bne.n	80038e0 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	330c      	adds	r3, #12
 80038c2:	7812      	ldrb	r2, [r2, #0]
 80038c4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ca:	1c5a      	adds	r2, r3, #1
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	3b01      	subs	r3, #1
 80038d8:	b29a      	uxth	r2, r3
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	86da      	strh	r2, [r3, #54]	; 0x36
 80038de:	e011      	b.n	8003904 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80038e0:	f7fd fa56 	bl	8000d90 <HAL_GetTick>
 80038e4:	4602      	mov	r2, r0
 80038e6:	69bb      	ldr	r3, [r7, #24]
 80038e8:	1ad3      	subs	r3, r2, r3
 80038ea:	683a      	ldr	r2, [r7, #0]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	d803      	bhi.n	80038f8 <HAL_SPI_Transmit+0x204>
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038f6:	d102      	bne.n	80038fe <HAL_SPI_Transmit+0x20a>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80038fe:	2303      	movs	r3, #3
 8003900:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003902:	e026      	b.n	8003952 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003908:	b29b      	uxth	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d1cd      	bne.n	80038aa <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800390e:	69ba      	ldr	r2, [r7, #24]
 8003910:	6839      	ldr	r1, [r7, #0]
 8003912:	68f8      	ldr	r0, [r7, #12]
 8003914:	f000 f8b2 	bl	8003a7c <SPI_EndRxTxTransaction>
 8003918:	4603      	mov	r3, r0
 800391a:	2b00      	cmp	r3, #0
 800391c:	d002      	beq.n	8003924 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2220      	movs	r2, #32
 8003922:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	2b00      	cmp	r3, #0
 800392a:	d10a      	bne.n	8003942 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800392c:	2300      	movs	r3, #0
 800392e:	613b      	str	r3, [r7, #16]
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	689b      	ldr	r3, [r3, #8]
 800393e:	613b      	str	r3, [r7, #16]
 8003940:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003946:	2b00      	cmp	r3, #0
 8003948:	d002      	beq.n	8003950 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 800394a:	2301      	movs	r3, #1
 800394c:	77fb      	strb	r3, [r7, #31]
 800394e:	e000      	b.n	8003952 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003950:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2201      	movs	r2, #1
 8003956:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003962:	7ffb      	ldrb	r3, [r7, #31]
}
 8003964:	4618      	mov	r0, r3
 8003966:	3720      	adds	r7, #32
 8003968:	46bd      	mov	sp, r7
 800396a:	bd80      	pop	{r7, pc}

0800396c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	b088      	sub	sp, #32
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	603b      	str	r3, [r7, #0]
 8003978:	4613      	mov	r3, r2
 800397a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800397c:	f7fd fa08 	bl	8000d90 <HAL_GetTick>
 8003980:	4602      	mov	r2, r0
 8003982:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003984:	1a9b      	subs	r3, r3, r2
 8003986:	683a      	ldr	r2, [r7, #0]
 8003988:	4413      	add	r3, r2
 800398a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800398c:	f7fd fa00 	bl	8000d90 <HAL_GetTick>
 8003990:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003992:	4b39      	ldr	r3, [pc, #228]	; (8003a78 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	015b      	lsls	r3, r3, #5
 8003998:	0d1b      	lsrs	r3, r3, #20
 800399a:	69fa      	ldr	r2, [r7, #28]
 800399c:	fb02 f303 	mul.w	r3, r2, r3
 80039a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039a2:	e054      	b.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039aa:	d050      	beq.n	8003a4e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ac:	f7fd f9f0 	bl	8000d90 <HAL_GetTick>
 80039b0:	4602      	mov	r2, r0
 80039b2:	69bb      	ldr	r3, [r7, #24]
 80039b4:	1ad3      	subs	r3, r2, r3
 80039b6:	69fa      	ldr	r2, [r7, #28]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d902      	bls.n	80039c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d13d      	bne.n	8003a3e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	685a      	ldr	r2, [r3, #4]
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80039d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80039da:	d111      	bne.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0x94>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80039e4:	d004      	beq.n	80039f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039ee:	d107      	bne.n	8003a00 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681a      	ldr	r2, [r3, #0]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80039fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a08:	d10f      	bne.n	8003a2a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	681a      	ldr	r2, [r3, #0]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a18:	601a      	str	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	681a      	ldr	r2, [r3, #0]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a28:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	2201      	movs	r2, #1
 8003a2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	2200      	movs	r2, #0
 8003a36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a3a:	2303      	movs	r3, #3
 8003a3c:	e017      	b.n	8003a6e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003a3e:	697b      	ldr	r3, [r7, #20]
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d101      	bne.n	8003a48 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a44:	2300      	movs	r3, #0
 8003a46:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	3b01      	subs	r3, #1
 8003a4c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	4013      	ands	r3, r2
 8003a58:	68ba      	ldr	r2, [r7, #8]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	bf0c      	ite	eq
 8003a5e:	2301      	moveq	r3, #1
 8003a60:	2300      	movne	r3, #0
 8003a62:	b2db      	uxtb	r3, r3
 8003a64:	461a      	mov	r2, r3
 8003a66:	79fb      	ldrb	r3, [r7, #7]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d19b      	bne.n	80039a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	3720      	adds	r7, #32
 8003a72:	46bd      	mov	sp, r7
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000008 	.word	0x20000008

08003a7c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af02      	add	r7, sp, #8
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	9300      	str	r3, [sp, #0]
 8003a8c:	68bb      	ldr	r3, [r7, #8]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	2180      	movs	r1, #128	; 0x80
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f7ff ff6a 	bl	800396c <SPI_WaitFlagStateUntilTimeout>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003aa2:	f043 0220 	orr.w	r2, r3, #32
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	e000      	b.n	8003ab0 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d001      	beq.n	8003ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e03a      	b.n	8003b46 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2202      	movs	r2, #2
 8003ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68da      	ldr	r2, [r3, #12]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f042 0201 	orr.w	r2, r2, #1
 8003ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a18      	ldr	r2, [pc, #96]	; (8003b50 <HAL_TIM_Base_Start_IT+0x98>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d00e      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d009      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a14      	ldr	r2, [pc, #80]	; (8003b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d004      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0x58>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a13      	ldr	r2, [pc, #76]	; (8003b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d111      	bne.n	8003b34 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	689b      	ldr	r3, [r3, #8]
 8003b16:	f003 0307 	and.w	r3, r3, #7
 8003b1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2b06      	cmp	r3, #6
 8003b20:	d010      	beq.n	8003b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f042 0201 	orr.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b32:	e007      	b.n	8003b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f042 0201 	orr.w	r2, r2, #1
 8003b42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3714      	adds	r7, #20
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bc80      	pop	{r7}
 8003b4e:	4770      	bx	lr
 8003b50:	40012c00 	.word	0x40012c00
 8003b54:	40000400 	.word	0x40000400
 8003b58:	40000800 	.word	0x40000800

08003b5c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b082      	sub	sp, #8
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e041      	b.n	8003bf2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b74:	b2db      	uxtb	r3, r3
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d106      	bne.n	8003b88 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b82:	6878      	ldr	r0, [r7, #4]
 8003b84:	f7fd f808 	bl	8000b98 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2202      	movs	r2, #2
 8003b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681a      	ldr	r2, [r3, #0]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	3304      	adds	r3, #4
 8003b98:	4619      	mov	r1, r3
 8003b9a:	4610      	mov	r0, r2
 8003b9c:	f000 fa22 	bl	8003fe4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bf0:	2300      	movs	r3, #0
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3708      	adds	r7, #8
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	691b      	ldr	r3, [r3, #16]
 8003c08:	f003 0302 	and.w	r3, r3, #2
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d122      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	68db      	ldr	r3, [r3, #12]
 8003c16:	f003 0302 	and.w	r3, r3, #2
 8003c1a:	2b02      	cmp	r3, #2
 8003c1c:	d11b      	bne.n	8003c56 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f06f 0202 	mvn.w	r2, #2
 8003c26:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	699b      	ldr	r3, [r3, #24]
 8003c34:	f003 0303 	and.w	r3, r3, #3
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3c:	6878      	ldr	r0, [r7, #4]
 8003c3e:	f000 f9b5 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003c42:	e005      	b.n	8003c50 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c44:	6878      	ldr	r0, [r7, #4]
 8003c46:	f000 f9a8 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 f9b7 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2200      	movs	r2, #0
 8003c54:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	f003 0304 	and.w	r3, r3, #4
 8003c60:	2b04      	cmp	r3, #4
 8003c62:	d122      	bne.n	8003caa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	f003 0304 	and.w	r3, r3, #4
 8003c6e:	2b04      	cmp	r3, #4
 8003c70:	d11b      	bne.n	8003caa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f06f 0204 	mvn.w	r2, #4
 8003c7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2202      	movs	r2, #2
 8003c80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d003      	beq.n	8003c98 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c90:	6878      	ldr	r0, [r7, #4]
 8003c92:	f000 f98b 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003c96:	e005      	b.n	8003ca4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f000 f97e 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9e:	6878      	ldr	r0, [r7, #4]
 8003ca0:	f000 f98d 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	691b      	ldr	r3, [r3, #16]
 8003cb0:	f003 0308 	and.w	r3, r3, #8
 8003cb4:	2b08      	cmp	r3, #8
 8003cb6:	d122      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	f003 0308 	and.w	r3, r3, #8
 8003cc2:	2b08      	cmp	r3, #8
 8003cc4:	d11b      	bne.n	8003cfe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f06f 0208 	mvn.w	r2, #8
 8003cce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2204      	movs	r2, #4
 8003cd4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	69db      	ldr	r3, [r3, #28]
 8003cdc:	f003 0303 	and.w	r3, r3, #3
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d003      	beq.n	8003cec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f000 f961 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003cea:	e005      	b.n	8003cf8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cec:	6878      	ldr	r0, [r7, #4]
 8003cee:	f000 f954 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f000 f963 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2200      	movs	r2, #0
 8003cfc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	691b      	ldr	r3, [r3, #16]
 8003d04:	f003 0310 	and.w	r3, r3, #16
 8003d08:	2b10      	cmp	r3, #16
 8003d0a:	d122      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68db      	ldr	r3, [r3, #12]
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	2b10      	cmp	r3, #16
 8003d18:	d11b      	bne.n	8003d52 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f06f 0210 	mvn.w	r2, #16
 8003d22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2208      	movs	r2, #8
 8003d28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d003      	beq.n	8003d40 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f000 f937 	bl	8003fac <HAL_TIM_IC_CaptureCallback>
 8003d3e:	e005      	b.n	8003d4c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d40:	6878      	ldr	r0, [r7, #4]
 8003d42:	f000 f92a 	bl	8003f9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f939 	bl	8003fbe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2200      	movs	r2, #0
 8003d50:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	f003 0301 	and.w	r3, r3, #1
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d10e      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f003 0301 	and.w	r3, r3, #1
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d107      	bne.n	8003d7e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f06f 0201 	mvn.w	r2, #1
 8003d76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d78:	6878      	ldr	r0, [r7, #4]
 8003d7a:	f000 f905 	bl	8003f88 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691b      	ldr	r3, [r3, #16]
 8003d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d88:	2b80      	cmp	r3, #128	; 0x80
 8003d8a:	d10e      	bne.n	8003daa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68db      	ldr	r3, [r3, #12]
 8003d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d96:	2b80      	cmp	r3, #128	; 0x80
 8003d98:	d107      	bne.n	8003daa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003da2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 fb6e 	bl	8004486 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003db4:	2b40      	cmp	r3, #64	; 0x40
 8003db6:	d10e      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	68db      	ldr	r3, [r3, #12]
 8003dbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d107      	bne.n	8003dd6 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003dce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f000 f8fd 	bl	8003fd0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	691b      	ldr	r3, [r3, #16]
 8003ddc:	f003 0320 	and.w	r3, r3, #32
 8003de0:	2b20      	cmp	r3, #32
 8003de2:	d10e      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f003 0320 	and.w	r3, r3, #32
 8003dee:	2b20      	cmp	r3, #32
 8003df0:	d107      	bne.n	8003e02 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f06f 0220 	mvn.w	r2, #32
 8003dfa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fb39 	bl	8004474 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e02:	bf00      	nop
 8003e04:	3708      	adds	r7, #8
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}
	...

08003e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b084      	sub	sp, #16
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e1e:	2b01      	cmp	r3, #1
 8003e20:	d101      	bne.n	8003e26 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e22:	2302      	movs	r3, #2
 8003e24:	e0ac      	b.n	8003f80 <HAL_TIM_PWM_ConfigChannel+0x174>
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2201      	movs	r2, #1
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2b0c      	cmp	r3, #12
 8003e32:	f200 809f 	bhi.w	8003f74 <HAL_TIM_PWM_ConfigChannel+0x168>
 8003e36:	a201      	add	r2, pc, #4	; (adr r2, 8003e3c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8003e38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e3c:	08003e71 	.word	0x08003e71
 8003e40:	08003f75 	.word	0x08003f75
 8003e44:	08003f75 	.word	0x08003f75
 8003e48:	08003f75 	.word	0x08003f75
 8003e4c:	08003eb1 	.word	0x08003eb1
 8003e50:	08003f75 	.word	0x08003f75
 8003e54:	08003f75 	.word	0x08003f75
 8003e58:	08003f75 	.word	0x08003f75
 8003e5c:	08003ef3 	.word	0x08003ef3
 8003e60:	08003f75 	.word	0x08003f75
 8003e64:	08003f75 	.word	0x08003f75
 8003e68:	08003f75 	.word	0x08003f75
 8003e6c:	08003f33 	.word	0x08003f33
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	68b9      	ldr	r1, [r7, #8]
 8003e76:	4618      	mov	r0, r3
 8003e78:	f000 f916 	bl	80040a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	699a      	ldr	r2, [r3, #24]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0208 	orr.w	r2, r2, #8
 8003e8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	699a      	ldr	r2, [r3, #24]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f022 0204 	bic.w	r2, r2, #4
 8003e9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6999      	ldr	r1, [r3, #24]
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	691a      	ldr	r2, [r3, #16]
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	619a      	str	r2, [r3, #24]
      break;
 8003eae:	e062      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	f000 f95c 	bl	8004174 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	699a      	ldr	r2, [r3, #24]
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003eca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	699a      	ldr	r2, [r3, #24]
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003eda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	6999      	ldr	r1, [r3, #24]
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	021a      	lsls	r2, r3, #8
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	430a      	orrs	r2, r1
 8003eee:	619a      	str	r2, [r3, #24]
      break;
 8003ef0:	e041      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	68b9      	ldr	r1, [r7, #8]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f000 f9a5 	bl	8004248 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	69da      	ldr	r2, [r3, #28]
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	f042 0208 	orr.w	r2, r2, #8
 8003f0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	69da      	ldr	r2, [r3, #28]
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f022 0204 	bic.w	r2, r2, #4
 8003f1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	69d9      	ldr	r1, [r3, #28]
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	691a      	ldr	r2, [r3, #16]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	430a      	orrs	r2, r1
 8003f2e:	61da      	str	r2, [r3, #28]
      break;
 8003f30:	e021      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	68b9      	ldr	r1, [r7, #8]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f000 f9ef 	bl	800431c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	69da      	ldr	r2, [r3, #28]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	69da      	ldr	r2, [r3, #28]
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	69d9      	ldr	r1, [r3, #28]
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	021a      	lsls	r2, r3, #8
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	430a      	orrs	r2, r1
 8003f70:	61da      	str	r2, [r3, #28]
      break;
 8003f72:	e000      	b.n	8003f76 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003f74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b083      	sub	sp, #12
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f90:	bf00      	nop
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	bc80      	pop	{r7}
 8003f98:	4770      	bx	lr

08003f9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bc80      	pop	{r7}
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bc80      	pop	{r7}
 8003fbc:	4770      	bx	lr

08003fbe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fbe:	b480      	push	{r7}
 8003fc0:	b083      	sub	sp, #12
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bc80      	pop	{r7}
 8003fce:	4770      	bx	lr

08003fd0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fd0:	b480      	push	{r7}
 8003fd2:	b083      	sub	sp, #12
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fd8:	bf00      	nop
 8003fda:	370c      	adds	r7, #12
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bc80      	pop	{r7}
 8003fe0:	4770      	bx	lr
	...

08003fe4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003fe4:	b480      	push	{r7}
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	4a29      	ldr	r2, [pc, #164]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00b      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004002:	d007      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a26      	ldr	r2, [pc, #152]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d003      	beq.n	8004014 <TIM_Base_SetConfig+0x30>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	4a25      	ldr	r2, [pc, #148]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004010:	4293      	cmp	r3, r2
 8004012:	d108      	bne.n	8004026 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800401a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	68fa      	ldr	r2, [r7, #12]
 8004022:	4313      	orrs	r3, r2
 8004024:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	4a1c      	ldr	r2, [pc, #112]	; (800409c <TIM_Base_SetConfig+0xb8>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d00b      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004034:	d007      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a19      	ldr	r2, [pc, #100]	; (80040a0 <TIM_Base_SetConfig+0xbc>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d003      	beq.n	8004046 <TIM_Base_SetConfig+0x62>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	4a18      	ldr	r2, [pc, #96]	; (80040a4 <TIM_Base_SetConfig+0xc0>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d108      	bne.n	8004058 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800404c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	68db      	ldr	r3, [r3, #12]
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	4313      	orrs	r3, r2
 8004056:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	4313      	orrs	r3, r2
 8004064:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	68fa      	ldr	r2, [r7, #12]
 800406a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681a      	ldr	r2, [r3, #0]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <TIM_Base_SetConfig+0xb8>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d103      	bne.n	800408c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	691a      	ldr	r2, [r3, #16]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2201      	movs	r2, #1
 8004090:	615a      	str	r2, [r3, #20]
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40012c00 	.word	0x40012c00
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800

080040a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b087      	sub	sp, #28
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6a1b      	ldr	r3, [r3, #32]
 80040b6:	f023 0201 	bic.w	r2, r3, #1
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	6a1b      	ldr	r3, [r3, #32]
 80040c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f023 0303 	bic.w	r3, r3, #3
 80040de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68fa      	ldr	r2, [r7, #12]
 80040e6:	4313      	orrs	r3, r2
 80040e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	f023 0302 	bic.w	r3, r3, #2
 80040f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	697a      	ldr	r2, [r7, #20]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a1c      	ldr	r2, [pc, #112]	; (8004170 <TIM_OC1_SetConfig+0xc8>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d10c      	bne.n	800411e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004104:	697b      	ldr	r3, [r7, #20]
 8004106:	f023 0308 	bic.w	r3, r3, #8
 800410a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	68db      	ldr	r3, [r3, #12]
 8004110:	697a      	ldr	r2, [r7, #20]
 8004112:	4313      	orrs	r3, r2
 8004114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	f023 0304 	bic.w	r3, r3, #4
 800411c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	4a13      	ldr	r2, [pc, #76]	; (8004170 <TIM_OC1_SetConfig+0xc8>)
 8004122:	4293      	cmp	r3, r2
 8004124:	d111      	bne.n	800414a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800412c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800412e:	693b      	ldr	r3, [r7, #16]
 8004130:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004134:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004136:	683b      	ldr	r3, [r7, #0]
 8004138:	695b      	ldr	r3, [r3, #20]
 800413a:	693a      	ldr	r2, [r7, #16]
 800413c:	4313      	orrs	r3, r2
 800413e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	693a      	ldr	r2, [r7, #16]
 8004146:	4313      	orrs	r3, r2
 8004148:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	693a      	ldr	r2, [r7, #16]
 800414e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	68fa      	ldr	r2, [r7, #12]
 8004154:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	685a      	ldr	r2, [r3, #4]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	697a      	ldr	r2, [r7, #20]
 8004162:	621a      	str	r2, [r3, #32]
}
 8004164:	bf00      	nop
 8004166:	371c      	adds	r7, #28
 8004168:	46bd      	mov	sp, r7
 800416a:	bc80      	pop	{r7}
 800416c:	4770      	bx	lr
 800416e:	bf00      	nop
 8004170:	40012c00 	.word	0x40012c00

08004174 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004174:	b480      	push	{r7}
 8004176:	b087      	sub	sp, #28
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a1b      	ldr	r3, [r3, #32]
 8004182:	f023 0210 	bic.w	r2, r3, #16
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	685b      	ldr	r3, [r3, #4]
 8004194:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	699b      	ldr	r3, [r3, #24]
 800419a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	021b      	lsls	r3, r3, #8
 80041b2:	68fa      	ldr	r2, [r7, #12]
 80041b4:	4313      	orrs	r3, r2
 80041b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	f023 0320 	bic.w	r3, r3, #32
 80041be:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689b      	ldr	r3, [r3, #8]
 80041c4:	011b      	lsls	r3, r3, #4
 80041c6:	697a      	ldr	r2, [r7, #20]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a1d      	ldr	r2, [pc, #116]	; (8004244 <TIM_OC2_SetConfig+0xd0>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d10d      	bne.n	80041f0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041da:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	68db      	ldr	r3, [r3, #12]
 80041e0:	011b      	lsls	r3, r3, #4
 80041e2:	697a      	ldr	r2, [r7, #20]
 80041e4:	4313      	orrs	r3, r2
 80041e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041e8:	697b      	ldr	r3, [r7, #20]
 80041ea:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041ee:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	4a14      	ldr	r2, [pc, #80]	; (8004244 <TIM_OC2_SetConfig+0xd0>)
 80041f4:	4293      	cmp	r3, r2
 80041f6:	d113      	bne.n	8004220 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004200:	693b      	ldr	r3, [r7, #16]
 8004202:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004206:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	695b      	ldr	r3, [r3, #20]
 800420c:	009b      	lsls	r3, r3, #2
 800420e:	693a      	ldr	r2, [r7, #16]
 8004210:	4313      	orrs	r3, r2
 8004212:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	699b      	ldr	r3, [r3, #24]
 8004218:	009b      	lsls	r3, r3, #2
 800421a:	693a      	ldr	r2, [r7, #16]
 800421c:	4313      	orrs	r3, r2
 800421e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	693a      	ldr	r2, [r7, #16]
 8004224:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68fa      	ldr	r2, [r7, #12]
 800422a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685a      	ldr	r2, [r3, #4]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	697a      	ldr	r2, [r7, #20]
 8004238:	621a      	str	r2, [r3, #32]
}
 800423a:	bf00      	nop
 800423c:	371c      	adds	r7, #28
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	40012c00 	.word	0x40012c00

08004248 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004248:	b480      	push	{r7}
 800424a:	b087      	sub	sp, #28
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a1b      	ldr	r3, [r3, #32]
 8004256:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004276:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f023 0303 	bic.w	r3, r3, #3
 800427e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	4313      	orrs	r3, r2
 8004288:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800428a:	697b      	ldr	r3, [r7, #20]
 800428c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004290:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	021b      	lsls	r3, r3, #8
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	4313      	orrs	r3, r2
 800429c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	4a1d      	ldr	r2, [pc, #116]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d10d      	bne.n	80042c2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042a6:	697b      	ldr	r3, [r7, #20]
 80042a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042ae:	683b      	ldr	r3, [r7, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	021b      	lsls	r3, r3, #8
 80042b4:	697a      	ldr	r2, [r7, #20]
 80042b6:	4313      	orrs	r3, r2
 80042b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	4a14      	ldr	r2, [pc, #80]	; (8004318 <TIM_OC3_SetConfig+0xd0>)
 80042c6:	4293      	cmp	r3, r2
 80042c8:	d113      	bne.n	80042f2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	695b      	ldr	r3, [r3, #20]
 80042de:	011b      	lsls	r3, r3, #4
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	011b      	lsls	r3, r3, #4
 80042ec:	693a      	ldr	r2, [r7, #16]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	685a      	ldr	r2, [r3, #4]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	697a      	ldr	r2, [r7, #20]
 800430a:	621a      	str	r2, [r3, #32]
}
 800430c:	bf00      	nop
 800430e:	371c      	adds	r7, #28
 8004310:	46bd      	mov	sp, r7
 8004312:	bc80      	pop	{r7}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	40012c00 	.word	0x40012c00

0800431c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800431c:	b480      	push	{r7}
 800431e:	b087      	sub	sp, #28
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
 8004324:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6a1b      	ldr	r3, [r3, #32]
 800432a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6a1b      	ldr	r3, [r3, #32]
 8004336:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	69db      	ldr	r3, [r3, #28]
 8004342:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800434a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004352:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	021b      	lsls	r3, r3, #8
 800435a:	68fa      	ldr	r2, [r7, #12]
 800435c:	4313      	orrs	r3, r2
 800435e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004366:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	689b      	ldr	r3, [r3, #8]
 800436c:	031b      	lsls	r3, r3, #12
 800436e:	693a      	ldr	r2, [r7, #16]
 8004370:	4313      	orrs	r3, r2
 8004372:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a0f      	ldr	r2, [pc, #60]	; (80043b4 <TIM_OC4_SetConfig+0x98>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d109      	bne.n	8004390 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004382:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	695b      	ldr	r3, [r3, #20]
 8004388:	019b      	lsls	r3, r3, #6
 800438a:	697a      	ldr	r2, [r7, #20]
 800438c:	4313      	orrs	r3, r2
 800438e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	621a      	str	r2, [r3, #32]
}
 80043aa:	bf00      	nop
 80043ac:	371c      	adds	r7, #28
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr
 80043b4:	40012c00 	.word	0x40012c00

080043b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d101      	bne.n	80043d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80043cc:	2302      	movs	r3, #2
 80043ce:	e046      	b.n	800445e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2201      	movs	r2, #1
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2202      	movs	r2, #2
 80043dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	685b      	ldr	r3, [r3, #4]
 80043e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004410:	4293      	cmp	r3, r2
 8004412:	d00e      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800441c:	d009      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a12      	ldr	r2, [pc, #72]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d004      	beq.n	8004432 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	4a10      	ldr	r2, [pc, #64]	; (8004470 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d10c      	bne.n	800444c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004432:	68bb      	ldr	r3, [r7, #8]
 8004434:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004438:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	68ba      	ldr	r2, [r7, #8]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68ba      	ldr	r2, [r7, #8]
 800444a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3714      	adds	r7, #20
 8004462:	46bd      	mov	sp, r7
 8004464:	bc80      	pop	{r7}
 8004466:	4770      	bx	lr
 8004468:	40012c00 	.word	0x40012c00
 800446c:	40000400 	.word	0x40000400
 8004470:	40000800 	.word	0x40000800

08004474 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	bc80      	pop	{r7}
 8004496:	4770      	bx	lr

08004498 <USB_CoreInit>:
  * @param  cfg pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004498:	b084      	sub	sp, #16
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
 80044a2:	f107 0014 	add.w	r0, r7, #20
 80044a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 80044aa:	2300      	movs	r3, #0
}
 80044ac:	4618      	mov	r0, r3
 80044ae:	370c      	adds	r7, #12
 80044b0:	46bd      	mov	sp, r7
 80044b2:	bc80      	pop	{r7}
 80044b4:	b004      	add	sp, #16
 80044b6:	4770      	bx	lr

080044b8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2200      	movs	r2, #0
 80044c4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044c8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044cc:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	b29a      	uxth	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80044d8:	2300      	movs	r3, #0
}
 80044da:	4618      	mov	r0, r3
 80044dc:	3714      	adds	r7, #20
 80044de:	46bd      	mov	sp, r7
 80044e0:	bc80      	pop	{r7}
 80044e2:	4770      	bx	lr

080044e4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b085      	sub	sp, #20
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80044ec:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80044f0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80044f8:	b29a      	uxth	r2, r3
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	43db      	mvns	r3, r3
 8004500:	b29b      	uxth	r3, r3
 8004502:	4013      	ands	r3, r2
 8004504:	b29a      	uxth	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3714      	adds	r7, #20
 8004512:	46bd      	mov	sp, r7
 8004514:	bc80      	pop	{r7}
 8004516:	4770      	bx	lr

08004518 <USB_SetCurrentMode>:
  *          This parameter can be one of the these values:
  *            @arg USB_DEVICE_MODE Peripheral mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_TypeDef *USBx, USB_ModeTypeDef mode)
{
 8004518:	b480      	push	{r7}
 800451a:	b083      	sub	sp, #12
 800451c:	af00      	add	r7, sp, #0
 800451e:	6078      	str	r0, [r7, #4]
 8004520:	460b      	mov	r3, r1
 8004522:	70fb      	strb	r3, [r7, #3]

  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8004524:	2300      	movs	r3, #0
}
 8004526:	4618      	mov	r0, r3
 8004528:	370c      	adds	r7, #12
 800452a:	46bd      	mov	sp, r7
 800452c:	bc80      	pop	{r7}
 800452e:	4770      	bx	lr

08004530 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004530:	b084      	sub	sp, #16
 8004532:	b480      	push	{r7}
 8004534:	b083      	sub	sp, #12
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	f107 0014 	add.w	r0, r7, #20
 800453e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2200      	movs	r2, #0
 8004556:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8004562:	2300      	movs	r3, #0
}
 8004564:	4618      	mov	r0, r3
 8004566:	370c      	adds	r7, #12
 8004568:	46bd      	mov	sp, r7
 800456a:	bc80      	pop	{r7}
 800456c:	b004      	add	sp, #16
 800456e:	4770      	bx	lr

08004570 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004570:	b480      	push	{r7}
 8004572:	b09b      	sub	sp, #108	; 0x6c
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
 8004578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800457a:	2300      	movs	r3, #0
 800457c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004580:	687a      	ldr	r2, [r7, #4]
 8004582:	683b      	ldr	r3, [r7, #0]
 8004584:	781b      	ldrb	r3, [r3, #0]
 8004586:	009b      	lsls	r3, r3, #2
 8004588:	4413      	add	r3, r2
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	b29b      	uxth	r3, r3
 800458e:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8004592:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004596:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	78db      	ldrb	r3, [r3, #3]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d81f      	bhi.n	80045e2 <USB_ActivateEndpoint+0x72>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <USB_ActivateEndpoint+0x38>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045d5 	.word	0x080045d5
 80045b0:	080045eb 	.word	0x080045eb
 80045b4:	080045c7 	.word	0x080045c7
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80045b8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045c0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045c4:	e012      	b.n	80045ec <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80045c6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045ca:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80045ce:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045d2:	e00b      	b.n	80045ec <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80045d4:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045d8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045dc:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 80045e0:	e004      	b.n	80045ec <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 80045e8:	e000      	b.n	80045ec <USB_ActivateEndpoint+0x7c>
      break;
 80045ea:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80045ec:	687a      	ldr	r2, [r7, #4]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	009b      	lsls	r3, r3, #2
 80045f4:	441a      	add	r2, r3
 80045f6:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80045fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80045fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004602:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004606:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800460a:	b29b      	uxth	r3, r3
 800460c:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	781b      	ldrb	r3, [r3, #0]
 8004614:	009b      	lsls	r3, r3, #2
 8004616:	4413      	add	r3, r2
 8004618:	881b      	ldrh	r3, [r3, #0]
 800461a:	b29b      	uxth	r3, r3
 800461c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004620:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004624:	b29a      	uxth	r2, r3
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	781b      	ldrb	r3, [r3, #0]
 800462a:	b29b      	uxth	r3, r3
 800462c:	4313      	orrs	r3, r2
 800462e:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8004632:	687a      	ldr	r2, [r7, #4]
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	781b      	ldrb	r3, [r3, #0]
 8004638:	009b      	lsls	r3, r3, #2
 800463a:	441a      	add	r2, r3
 800463c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8004640:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004644:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004648:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800464c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004650:	b29b      	uxth	r3, r3
 8004652:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8004654:	683b      	ldr	r3, [r7, #0]
 8004656:	7b1b      	ldrb	r3, [r3, #12]
 8004658:	2b00      	cmp	r3, #0
 800465a:	f040 8149 	bne.w	80048f0 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	785b      	ldrb	r3, [r3, #1]
 8004662:	2b00      	cmp	r3, #0
 8004664:	f000 8084 	beq.w	8004770 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	617b      	str	r3, [r7, #20]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004672:	b29b      	uxth	r3, r3
 8004674:	461a      	mov	r2, r3
 8004676:	697b      	ldr	r3, [r7, #20]
 8004678:	4413      	add	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	011a      	lsls	r2, r3, #4
 8004682:	697b      	ldr	r3, [r7, #20]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	88db      	ldrh	r3, [r3, #6]
 8004690:	085b      	lsrs	r3, r3, #1
 8004692:	b29b      	uxth	r3, r3
 8004694:	005b      	lsls	r3, r3, #1
 8004696:	b29a      	uxth	r2, r3
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800469c:	687a      	ldr	r2, [r7, #4]
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	4413      	add	r3, r2
 80046a6:	881b      	ldrh	r3, [r3, #0]
 80046a8:	81fb      	strh	r3, [r7, #14]
 80046aa:	89fb      	ldrh	r3, [r7, #14]
 80046ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d01b      	beq.n	80046ec <USB_ActivateEndpoint+0x17c>
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	683b      	ldr	r3, [r7, #0]
 80046b8:	781b      	ldrb	r3, [r3, #0]
 80046ba:	009b      	lsls	r3, r3, #2
 80046bc:	4413      	add	r3, r2
 80046be:	881b      	ldrh	r3, [r3, #0]
 80046c0:	b29b      	uxth	r3, r3
 80046c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046ca:	81bb      	strh	r3, [r7, #12]
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	441a      	add	r2, r3
 80046d6:	89bb      	ldrh	r3, [r7, #12]
 80046d8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80046dc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80046e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046e4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80046e8:	b29b      	uxth	r3, r3
 80046ea:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	78db      	ldrb	r3, [r3, #3]
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d020      	beq.n	8004736 <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80046f4:	687a      	ldr	r2, [r7, #4]
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	781b      	ldrb	r3, [r3, #0]
 80046fa:	009b      	lsls	r3, r3, #2
 80046fc:	4413      	add	r3, r2
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b29b      	uxth	r3, r3
 8004702:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004706:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800470a:	813b      	strh	r3, [r7, #8]
 800470c:	893b      	ldrh	r3, [r7, #8]
 800470e:	f083 0320 	eor.w	r3, r3, #32
 8004712:	813b      	strh	r3, [r7, #8]
 8004714:	687a      	ldr	r2, [r7, #4]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	781b      	ldrb	r3, [r3, #0]
 800471a:	009b      	lsls	r3, r3, #2
 800471c:	441a      	add	r2, r3
 800471e:	893b      	ldrh	r3, [r7, #8]
 8004720:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004724:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004728:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800472c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004730:	b29b      	uxth	r3, r3
 8004732:	8013      	strh	r3, [r2, #0]
 8004734:	e27f      	b.n	8004c36 <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	781b      	ldrb	r3, [r3, #0]
 800473c:	009b      	lsls	r3, r3, #2
 800473e:	4413      	add	r3, r2
 8004740:	881b      	ldrh	r3, [r3, #0]
 8004742:	b29b      	uxth	r3, r3
 8004744:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004748:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800474c:	817b      	strh	r3, [r7, #10]
 800474e:	687a      	ldr	r2, [r7, #4]
 8004750:	683b      	ldr	r3, [r7, #0]
 8004752:	781b      	ldrb	r3, [r3, #0]
 8004754:	009b      	lsls	r3, r3, #2
 8004756:	441a      	add	r2, r3
 8004758:	897b      	ldrh	r3, [r7, #10]
 800475a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800475e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004762:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004766:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800476a:	b29b      	uxth	r3, r3
 800476c:	8013      	strh	r3, [r2, #0]
 800476e:	e262      	b.n	8004c36 <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800477a:	b29b      	uxth	r3, r3
 800477c:	461a      	mov	r2, r3
 800477e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004780:	4413      	add	r3, r2
 8004782:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	781b      	ldrb	r3, [r3, #0]
 8004788:	011a      	lsls	r2, r3, #4
 800478a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478c:	4413      	add	r3, r2
 800478e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004792:	62bb      	str	r3, [r7, #40]	; 0x28
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	88db      	ldrh	r3, [r3, #6]
 8004798:	085b      	lsrs	r3, r3, #1
 800479a:	b29b      	uxth	r3, r3
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	b29a      	uxth	r2, r3
 80047a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047a2:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	627b      	str	r3, [r7, #36]	; 0x24
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	461a      	mov	r2, r3
 80047b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b4:	4413      	add	r3, r2
 80047b6:	627b      	str	r3, [r7, #36]	; 0x24
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	781b      	ldrb	r3, [r3, #0]
 80047bc:	011a      	lsls	r2, r3, #4
 80047be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c0:	4413      	add	r3, r2
 80047c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80047c6:	623b      	str	r3, [r7, #32]
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	691b      	ldr	r3, [r3, #16]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d112      	bne.n	80047f6 <USB_ActivateEndpoint+0x286>
 80047d0:	6a3b      	ldr	r3, [r7, #32]
 80047d2:	881b      	ldrh	r3, [r3, #0]
 80047d4:	b29b      	uxth	r3, r3
 80047d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80047da:	b29a      	uxth	r2, r3
 80047dc:	6a3b      	ldr	r3, [r7, #32]
 80047de:	801a      	strh	r2, [r3, #0]
 80047e0:	6a3b      	ldr	r3, [r7, #32]
 80047e2:	881b      	ldrh	r3, [r3, #0]
 80047e4:	b29b      	uxth	r3, r3
 80047e6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80047ea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	6a3b      	ldr	r3, [r7, #32]
 80047f2:	801a      	strh	r2, [r3, #0]
 80047f4:	e02f      	b.n	8004856 <USB_ActivateEndpoint+0x2e6>
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	2b3e      	cmp	r3, #62	; 0x3e
 80047fc:	d813      	bhi.n	8004826 <USB_ActivateEndpoint+0x2b6>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	691b      	ldr	r3, [r3, #16]
 8004802:	085b      	lsrs	r3, r3, #1
 8004804:	663b      	str	r3, [r7, #96]	; 0x60
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	691b      	ldr	r3, [r3, #16]
 800480a:	f003 0301 	and.w	r3, r3, #1
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <USB_ActivateEndpoint+0x2a8>
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	3301      	adds	r3, #1
 8004816:	663b      	str	r3, [r7, #96]	; 0x60
 8004818:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800481a:	b29b      	uxth	r3, r3
 800481c:	029b      	lsls	r3, r3, #10
 800481e:	b29a      	uxth	r2, r3
 8004820:	6a3b      	ldr	r3, [r7, #32]
 8004822:	801a      	strh	r2, [r3, #0]
 8004824:	e017      	b.n	8004856 <USB_ActivateEndpoint+0x2e6>
 8004826:	683b      	ldr	r3, [r7, #0]
 8004828:	691b      	ldr	r3, [r3, #16]
 800482a:	095b      	lsrs	r3, r3, #5
 800482c:	663b      	str	r3, [r7, #96]	; 0x60
 800482e:	683b      	ldr	r3, [r7, #0]
 8004830:	691b      	ldr	r3, [r3, #16]
 8004832:	f003 031f 	and.w	r3, r3, #31
 8004836:	2b00      	cmp	r3, #0
 8004838:	d102      	bne.n	8004840 <USB_ActivateEndpoint+0x2d0>
 800483a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800483c:	3b01      	subs	r3, #1
 800483e:	663b      	str	r3, [r7, #96]	; 0x60
 8004840:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004842:	b29b      	uxth	r3, r3
 8004844:	029b      	lsls	r3, r3, #10
 8004846:	b29b      	uxth	r3, r3
 8004848:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800484c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8004850:	b29a      	uxth	r2, r3
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004856:	687a      	ldr	r2, [r7, #4]
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	009b      	lsls	r3, r3, #2
 800485e:	4413      	add	r3, r2
 8004860:	881b      	ldrh	r3, [r3, #0]
 8004862:	83fb      	strh	r3, [r7, #30]
 8004864:	8bfb      	ldrh	r3, [r7, #30]
 8004866:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01b      	beq.n	80048a6 <USB_ActivateEndpoint+0x336>
 800486e:	687a      	ldr	r2, [r7, #4]
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	781b      	ldrb	r3, [r3, #0]
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	881b      	ldrh	r3, [r3, #0]
 800487a:	b29b      	uxth	r3, r3
 800487c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004880:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004884:	83bb      	strh	r3, [r7, #28]
 8004886:	687a      	ldr	r2, [r7, #4]
 8004888:	683b      	ldr	r3, [r7, #0]
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	009b      	lsls	r3, r3, #2
 800488e:	441a      	add	r2, r3
 8004890:	8bbb      	ldrh	r3, [r7, #28]
 8004892:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004896:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800489a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800489e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80048a6:	687a      	ldr	r2, [r7, #4]
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	781b      	ldrb	r3, [r3, #0]
 80048ac:	009b      	lsls	r3, r3, #2
 80048ae:	4413      	add	r3, r2
 80048b0:	881b      	ldrh	r3, [r3, #0]
 80048b2:	b29b      	uxth	r3, r3
 80048b4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80048b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048bc:	837b      	strh	r3, [r7, #26]
 80048be:	8b7b      	ldrh	r3, [r7, #26]
 80048c0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80048c4:	837b      	strh	r3, [r7, #26]
 80048c6:	8b7b      	ldrh	r3, [r7, #26]
 80048c8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80048cc:	837b      	strh	r3, [r7, #26]
 80048ce:	687a      	ldr	r2, [r7, #4]
 80048d0:	683b      	ldr	r3, [r7, #0]
 80048d2:	781b      	ldrb	r3, [r3, #0]
 80048d4:	009b      	lsls	r3, r3, #2
 80048d6:	441a      	add	r2, r3
 80048d8:	8b7b      	ldrh	r3, [r7, #26]
 80048da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80048de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80048e2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80048e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	8013      	strh	r3, [r2, #0]
 80048ee:	e1a2      	b.n	8004c36 <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 80048f0:	687a      	ldr	r2, [r7, #4]
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	4413      	add	r3, r2
 80048fa:	881b      	ldrh	r3, [r3, #0]
 80048fc:	b29b      	uxth	r3, r3
 80048fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004902:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004906:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 800490a:	687a      	ldr	r2, [r7, #4]
 800490c:	683b      	ldr	r3, [r7, #0]
 800490e:	781b      	ldrb	r3, [r3, #0]
 8004910:	009b      	lsls	r3, r3, #2
 8004912:	441a      	add	r2, r3
 8004914:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8004918:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800491c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004920:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8004924:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004928:	b29b      	uxth	r3, r3
 800492a:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8004936:	b29b      	uxth	r3, r3
 8004938:	461a      	mov	r2, r3
 800493a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800493c:	4413      	add	r3, r2
 800493e:	65bb      	str	r3, [r7, #88]	; 0x58
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	781b      	ldrb	r3, [r3, #0]
 8004944:	011a      	lsls	r2, r3, #4
 8004946:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004948:	4413      	add	r3, r2
 800494a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800494e:	657b      	str	r3, [r7, #84]	; 0x54
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	891b      	ldrh	r3, [r3, #8]
 8004954:	085b      	lsrs	r3, r3, #1
 8004956:	b29b      	uxth	r3, r3
 8004958:	005b      	lsls	r3, r3, #1
 800495a:	b29a      	uxth	r2, r3
 800495c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800495e:	801a      	strh	r2, [r3, #0]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	653b      	str	r3, [r7, #80]	; 0x50
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800496a:	b29b      	uxth	r3, r3
 800496c:	461a      	mov	r2, r3
 800496e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004970:	4413      	add	r3, r2
 8004972:	653b      	str	r3, [r7, #80]	; 0x50
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	781b      	ldrb	r3, [r3, #0]
 8004978:	011a      	lsls	r2, r3, #4
 800497a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800497c:	4413      	add	r3, r2
 800497e:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8004982:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	895b      	ldrh	r3, [r3, #10]
 8004988:	085b      	lsrs	r3, r3, #1
 800498a:	b29b      	uxth	r3, r3
 800498c:	005b      	lsls	r3, r3, #1
 800498e:	b29a      	uxth	r2, r3
 8004990:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004992:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	785b      	ldrb	r3, [r3, #1]
 8004998:	2b00      	cmp	r3, #0
 800499a:	f040 8091 	bne.w	8004ac0 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	009b      	lsls	r3, r3, #2
 80049a6:	4413      	add	r3, r2
 80049a8:	881b      	ldrh	r3, [r3, #0]
 80049aa:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80049ac:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01b      	beq.n	80049ee <USB_ActivateEndpoint+0x47e>
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	009b      	lsls	r3, r3, #2
 80049be:	4413      	add	r3, r2
 80049c0:	881b      	ldrh	r3, [r3, #0]
 80049c2:	b29b      	uxth	r3, r3
 80049c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80049c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80049cc:	877b      	strh	r3, [r7, #58]	; 0x3a
 80049ce:	687a      	ldr	r2, [r7, #4]
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	781b      	ldrb	r3, [r3, #0]
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	441a      	add	r2, r3
 80049d8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80049da:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80049de:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80049e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80049e6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ea:	b29b      	uxth	r3, r3
 80049ec:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049ee:	687a      	ldr	r2, [r7, #4]
 80049f0:	683b      	ldr	r3, [r7, #0]
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	4413      	add	r3, r2
 80049f8:	881b      	ldrh	r3, [r3, #0]
 80049fa:	873b      	strh	r3, [r7, #56]	; 0x38
 80049fc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d01b      	beq.n	8004a3e <USB_ActivateEndpoint+0x4ce>
 8004a06:	687a      	ldr	r2, [r7, #4]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	781b      	ldrb	r3, [r3, #0]
 8004a0c:	009b      	lsls	r3, r3, #2
 8004a0e:	4413      	add	r3, r2
 8004a10:	881b      	ldrh	r3, [r3, #0]
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	009b      	lsls	r3, r3, #2
 8004a26:	441a      	add	r2, r3
 8004a28:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004a2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a36:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004a3a:	b29b      	uxth	r3, r3
 8004a3c:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004a3e:	687a      	ldr	r2, [r7, #4]
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	009b      	lsls	r3, r3, #2
 8004a46:	4413      	add	r3, r2
 8004a48:	881b      	ldrh	r3, [r3, #0]
 8004a4a:	b29b      	uxth	r3, r3
 8004a4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004a50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a54:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a56:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a58:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8004a5c:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a5e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a60:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8004a64:	86bb      	strh	r3, [r7, #52]	; 0x34
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	683b      	ldr	r3, [r7, #0]
 8004a6a:	781b      	ldrb	r3, [r3, #0]
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	441a      	add	r2, r3
 8004a70:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8004a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a7e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a82:	b29b      	uxth	r3, r3
 8004a84:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a86:	687a      	ldr	r2, [r7, #4]
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	781b      	ldrb	r3, [r3, #0]
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	881b      	ldrh	r3, [r3, #0]
 8004a92:	b29b      	uxth	r3, r3
 8004a94:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a98:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a9c:	867b      	strh	r3, [r7, #50]	; 0x32
 8004a9e:	687a      	ldr	r2, [r7, #4]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	009b      	lsls	r3, r3, #2
 8004aa6:	441a      	add	r2, r3
 8004aa8:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8004aaa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004aae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ab2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	8013      	strh	r3, [r2, #0]
 8004abe:	e0ba      	b.n	8004c36 <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	781b      	ldrb	r3, [r3, #0]
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	4413      	add	r3, r2
 8004aca:	881b      	ldrh	r3, [r3, #0]
 8004acc:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8004ad0:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8004ad4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d01d      	beq.n	8004b18 <USB_ActivateEndpoint+0x5a8>
 8004adc:	687a      	ldr	r2, [r7, #4]
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	781b      	ldrb	r3, [r3, #0]
 8004ae2:	009b      	lsls	r3, r3, #2
 8004ae4:	4413      	add	r3, r2
 8004ae6:	881b      	ldrh	r3, [r3, #0]
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004aee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004af2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	781b      	ldrb	r3, [r3, #0]
 8004afc:	009b      	lsls	r3, r3, #2
 8004afe:	441a      	add	r2, r3
 8004b00:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004b04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004b10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b14:	b29b      	uxth	r3, r3
 8004b16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b18:	687a      	ldr	r2, [r7, #4]
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	4413      	add	r3, r2
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8004b28:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d01d      	beq.n	8004b70 <USB_ActivateEndpoint+0x600>
 8004b34:	687a      	ldr	r2, [r7, #4]
 8004b36:	683b      	ldr	r3, [r7, #0]
 8004b38:	781b      	ldrb	r3, [r3, #0]
 8004b3a:	009b      	lsls	r3, r3, #2
 8004b3c:	4413      	add	r3, r2
 8004b3e:	881b      	ldrh	r3, [r3, #0]
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b46:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b4a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	009b      	lsls	r3, r3, #2
 8004b56:	441a      	add	r2, r3
 8004b58:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8004b5c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004b60:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004b64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004b68:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	78db      	ldrb	r3, [r3, #3]
 8004b74:	2b01      	cmp	r3, #1
 8004b76:	d024      	beq.n	8004bc2 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b78:	687a      	ldr	r2, [r7, #4]
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	781b      	ldrb	r3, [r3, #0]
 8004b7e:	009b      	lsls	r3, r3, #2
 8004b80:	4413      	add	r3, r2
 8004b82:	881b      	ldrh	r3, [r3, #0]
 8004b84:	b29b      	uxth	r3, r3
 8004b86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b8a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004b8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b92:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004b96:	f083 0320 	eor.w	r3, r3, #32
 8004b9a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8004b9e:	687a      	ldr	r2, [r7, #4]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	009b      	lsls	r3, r3, #2
 8004ba6:	441a      	add	r2, r3
 8004ba8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8004bac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bb0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bb4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bbc:	b29b      	uxth	r3, r3
 8004bbe:	8013      	strh	r3, [r2, #0]
 8004bc0:	e01d      	b.n	8004bfe <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	4413      	add	r3, r2
 8004bcc:	881b      	ldrh	r3, [r3, #0]
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bd4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004bd8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8004bdc:	687a      	ldr	r2, [r7, #4]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	781b      	ldrb	r3, [r3, #0]
 8004be2:	009b      	lsls	r3, r3, #2
 8004be4:	441a      	add	r2, r3
 8004be6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8004bea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004bee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004bf2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004bf6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	683b      	ldr	r3, [r7, #0]
 8004c02:	781b      	ldrb	r3, [r3, #0]
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	881b      	ldrh	r3, [r3, #0]
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c14:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8004c16:	687a      	ldr	r2, [r7, #4]
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	781b      	ldrb	r3, [r3, #0]
 8004c1c:	009b      	lsls	r3, r3, #2
 8004c1e:	441a      	add	r2, r3
 8004c20:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8004c22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004c26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004c32:	b29b      	uxth	r3, r3
 8004c34:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8004c36:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	376c      	adds	r7, #108	; 0x6c
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b08d      	sub	sp, #52	; 0x34
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8004c4e:	683b      	ldr	r3, [r7, #0]
 8004c50:	7b1b      	ldrb	r3, [r3, #12]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f040 808e 	bne.w	8004d74 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	785b      	ldrb	r3, [r3, #1]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d044      	beq.n	8004cea <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c60:	687a      	ldr	r2, [r7, #4]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	009b      	lsls	r3, r3, #2
 8004c68:	4413      	add	r3, r2
 8004c6a:	881b      	ldrh	r3, [r3, #0]
 8004c6c:	81bb      	strh	r3, [r7, #12]
 8004c6e:	89bb      	ldrh	r3, [r7, #12]
 8004c70:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01b      	beq.n	8004cb0 <USB_DeactivateEndpoint+0x6c>
 8004c78:	687a      	ldr	r2, [r7, #4]
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	009b      	lsls	r3, r3, #2
 8004c80:	4413      	add	r3, r2
 8004c82:	881b      	ldrh	r3, [r3, #0]
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c8e:	817b      	strh	r3, [r7, #10]
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	781b      	ldrb	r3, [r3, #0]
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	441a      	add	r2, r3
 8004c9a:	897b      	ldrh	r3, [r7, #10]
 8004c9c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004ca0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004ca4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004cac:	b29b      	uxth	r3, r3
 8004cae:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	009b      	lsls	r3, r3, #2
 8004cb8:	4413      	add	r3, r2
 8004cba:	881b      	ldrh	r3, [r3, #0]
 8004cbc:	b29b      	uxth	r3, r3
 8004cbe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004cc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004cc6:	813b      	strh	r3, [r7, #8]
 8004cc8:	687a      	ldr	r2, [r7, #4]
 8004cca:	683b      	ldr	r3, [r7, #0]
 8004ccc:	781b      	ldrb	r3, [r3, #0]
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	441a      	add	r2, r3
 8004cd2:	893b      	ldrh	r3, [r7, #8]
 8004cd4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004cd8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004cdc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ce0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	8013      	strh	r3, [r2, #0]
 8004ce8:	e192      	b.n	8005010 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004cea:	687a      	ldr	r2, [r7, #4]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	009b      	lsls	r3, r3, #2
 8004cf2:	4413      	add	r3, r2
 8004cf4:	881b      	ldrh	r3, [r3, #0]
 8004cf6:	827b      	strh	r3, [r7, #18]
 8004cf8:	8a7b      	ldrh	r3, [r7, #18]
 8004cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d01b      	beq.n	8004d3a <USB_DeactivateEndpoint+0xf6>
 8004d02:	687a      	ldr	r2, [r7, #4]
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	009b      	lsls	r3, r3, #2
 8004d0a:	4413      	add	r3, r2
 8004d0c:	881b      	ldrh	r3, [r3, #0]
 8004d0e:	b29b      	uxth	r3, r3
 8004d10:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d18:	823b      	strh	r3, [r7, #16]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	781b      	ldrb	r3, [r3, #0]
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	441a      	add	r2, r3
 8004d24:	8a3b      	ldrh	r3, [r7, #16]
 8004d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d2e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d36:	b29b      	uxth	r3, r3
 8004d38:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	683b      	ldr	r3, [r7, #0]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	009b      	lsls	r3, r3, #2
 8004d42:	4413      	add	r3, r2
 8004d44:	881b      	ldrh	r3, [r3, #0]
 8004d46:	b29b      	uxth	r3, r3
 8004d48:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d50:	81fb      	strh	r3, [r7, #14]
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	009b      	lsls	r3, r3, #2
 8004d5a:	441a      	add	r2, r3
 8004d5c:	89fb      	ldrh	r3, [r7, #14]
 8004d5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004d62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004d6e:	b29b      	uxth	r3, r3
 8004d70:	8013      	strh	r3, [r2, #0]
 8004d72:	e14d      	b.n	8005010 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	785b      	ldrb	r3, [r3, #1]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f040 80a5 	bne.w	8004ec8 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d7e:	687a      	ldr	r2, [r7, #4]
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	781b      	ldrb	r3, [r3, #0]
 8004d84:	009b      	lsls	r3, r3, #2
 8004d86:	4413      	add	r3, r2
 8004d88:	881b      	ldrh	r3, [r3, #0]
 8004d8a:	843b      	strh	r3, [r7, #32]
 8004d8c:	8c3b      	ldrh	r3, [r7, #32]
 8004d8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d01b      	beq.n	8004dce <USB_DeactivateEndpoint+0x18a>
 8004d96:	687a      	ldr	r2, [r7, #4]
 8004d98:	683b      	ldr	r3, [r7, #0]
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	881b      	ldrh	r3, [r3, #0]
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004da8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dac:	83fb      	strh	r3, [r7, #30]
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	441a      	add	r2, r3
 8004db8:	8bfb      	ldrh	r3, [r7, #30]
 8004dba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004dbe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004dc2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004dc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dca:	b29b      	uxth	r3, r3
 8004dcc:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dce:	687a      	ldr	r2, [r7, #4]
 8004dd0:	683b      	ldr	r3, [r7, #0]
 8004dd2:	781b      	ldrb	r3, [r3, #0]
 8004dd4:	009b      	lsls	r3, r3, #2
 8004dd6:	4413      	add	r3, r2
 8004dd8:	881b      	ldrh	r3, [r3, #0]
 8004dda:	83bb      	strh	r3, [r7, #28]
 8004ddc:	8bbb      	ldrh	r3, [r7, #28]
 8004dde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d01b      	beq.n	8004e1e <USB_DeactivateEndpoint+0x1da>
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	781b      	ldrb	r3, [r3, #0]
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	881b      	ldrh	r3, [r3, #0]
 8004df2:	b29b      	uxth	r3, r3
 8004df4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004df8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004dfc:	837b      	strh	r3, [r7, #26]
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	009b      	lsls	r3, r3, #2
 8004e06:	441a      	add	r2, r3
 8004e08:	8b7b      	ldrh	r3, [r7, #26]
 8004e0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e16:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e1a:	b29b      	uxth	r3, r3
 8004e1c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8004e1e:	687a      	ldr	r2, [r7, #4]
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	781b      	ldrb	r3, [r3, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	4413      	add	r3, r2
 8004e28:	881b      	ldrh	r3, [r3, #0]
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e34:	833b      	strh	r3, [r7, #24]
 8004e36:	687a      	ldr	r2, [r7, #4]
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	781b      	ldrb	r3, [r3, #0]
 8004e3c:	009b      	lsls	r3, r3, #2
 8004e3e:	441a      	add	r2, r3
 8004e40:	8b3b      	ldrh	r3, [r7, #24]
 8004e42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e46:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e4a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e4e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004e52:	b29b      	uxth	r3, r3
 8004e54:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	781b      	ldrb	r3, [r3, #0]
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	4413      	add	r3, r2
 8004e60:	881b      	ldrh	r3, [r3, #0]
 8004e62:	b29b      	uxth	r3, r3
 8004e64:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004e68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6c:	82fb      	strh	r3, [r7, #22]
 8004e6e:	687a      	ldr	r2, [r7, #4]
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	781b      	ldrb	r3, [r3, #0]
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	441a      	add	r2, r3
 8004e78:	8afb      	ldrh	r3, [r7, #22]
 8004e7a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004e7e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004e82:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004e86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004e8a:	b29b      	uxth	r3, r3
 8004e8c:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	683b      	ldr	r3, [r7, #0]
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	009b      	lsls	r3, r3, #2
 8004e96:	4413      	add	r3, r2
 8004e98:	881b      	ldrh	r3, [r3, #0]
 8004e9a:	b29b      	uxth	r3, r3
 8004e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ea4:	82bb      	strh	r3, [r7, #20]
 8004ea6:	687a      	ldr	r2, [r7, #4]
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	781b      	ldrb	r3, [r3, #0]
 8004eac:	009b      	lsls	r3, r3, #2
 8004eae:	441a      	add	r2, r3
 8004eb0:	8abb      	ldrh	r3, [r7, #20]
 8004eb2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004eb6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004eba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ebe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004ec2:	b29b      	uxth	r3, r3
 8004ec4:	8013      	strh	r3, [r2, #0]
 8004ec6:	e0a3      	b.n	8005010 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ec8:	687a      	ldr	r2, [r7, #4]
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	4413      	add	r3, r2
 8004ed2:	881b      	ldrh	r3, [r3, #0]
 8004ed4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004ed6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004ed8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d01b      	beq.n	8004f18 <USB_DeactivateEndpoint+0x2d4>
 8004ee0:	687a      	ldr	r2, [r7, #4]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	881b      	ldrh	r3, [r3, #0]
 8004eec:	b29b      	uxth	r3, r3
 8004eee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ef6:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004ef8:	687a      	ldr	r2, [r7, #4]
 8004efa:	683b      	ldr	r3, [r7, #0]
 8004efc:	781b      	ldrb	r3, [r3, #0]
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	441a      	add	r2, r3
 8004f02:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8004f04:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f08:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f0c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f14:	b29b      	uxth	r3, r3
 8004f16:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004f18:	687a      	ldr	r2, [r7, #4]
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	881b      	ldrh	r3, [r3, #0]
 8004f24:	857b      	strh	r3, [r7, #42]	; 0x2a
 8004f26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8004f28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01b      	beq.n	8004f68 <USB_DeactivateEndpoint+0x324>
 8004f30:	687a      	ldr	r2, [r7, #4]
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4413      	add	r3, r2
 8004f3a:	881b      	ldrh	r3, [r3, #0]
 8004f3c:	b29b      	uxth	r3, r3
 8004f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f46:	853b      	strh	r3, [r7, #40]	; 0x28
 8004f48:	687a      	ldr	r2, [r7, #4]
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	781b      	ldrb	r3, [r3, #0]
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	441a      	add	r2, r3
 8004f52:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004f54:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f58:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f5c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004f60:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8004f64:	b29b      	uxth	r3, r3
 8004f66:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	781b      	ldrb	r3, [r3, #0]
 8004f6e:	009b      	lsls	r3, r3, #2
 8004f70:	4413      	add	r3, r2
 8004f72:	881b      	ldrh	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f7e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004f80:	687a      	ldr	r2, [r7, #4]
 8004f82:	683b      	ldr	r3, [r7, #0]
 8004f84:	781b      	ldrb	r3, [r3, #0]
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	441a      	add	r2, r3
 8004f8a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004f8c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004f90:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004f94:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004f98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004f9c:	b29b      	uxth	r3, r3
 8004f9e:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004fa0:	687a      	ldr	r2, [r7, #4]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	881b      	ldrh	r3, [r3, #0]
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004fb2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fb6:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004fb8:	687a      	ldr	r2, [r7, #4]
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	009b      	lsls	r3, r3, #2
 8004fc0:	441a      	add	r2, r3
 8004fc2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004fc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8004fc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8004fcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	009b      	lsls	r3, r3, #2
 8004fe0:	4413      	add	r3, r2
 8004fe2:	881b      	ldrh	r3, [r3, #0]
 8004fe4:	b29b      	uxth	r3, r3
 8004fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004fea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004fee:	847b      	strh	r3, [r7, #34]	; 0x22
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	009b      	lsls	r3, r3, #2
 8004ff8:	441a      	add	r2, r3
 8004ffa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004ffc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005000:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005004:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005008:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800500c:	b29b      	uxth	r3, r3
 800500e:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3734      	adds	r7, #52	; 0x34
 8005016:	46bd      	mov	sp, r7
 8005018:	bc80      	pop	{r7}
 800501a:	4770      	bx	lr

0800501c <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b0cc      	sub	sp, #304	; 0x130
 8005020:	af00      	add	r7, sp, #0
 8005022:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005026:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800502a:	6018      	str	r0, [r3, #0]
 800502c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005030:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005034:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005036:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800503a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	785b      	ldrb	r3, [r3, #1]
 8005042:	2b01      	cmp	r3, #1
 8005044:	f041 817d 	bne.w	8006342 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8005048:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800504c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	699a      	ldr	r2, [r3, #24]
 8005054:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005058:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	691b      	ldr	r3, [r3, #16]
 8005060:	429a      	cmp	r2, r3
 8005062:	d908      	bls.n	8005076 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8005064:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005068:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	691b      	ldr	r3, [r3, #16]
 8005070:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8005074:	e007      	b.n	8005086 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8005076:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800507a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	699b      	ldr	r3, [r3, #24]
 8005082:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8005086:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800508a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	7b1b      	ldrb	r3, [r3, #12]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d152      	bne.n	800513c <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8005096:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800509a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	6959      	ldr	r1, [r3, #20]
 80050a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	88da      	ldrh	r2, [r3, #6]
 80050ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80050b2:	b29b      	uxth	r3, r3
 80050b4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80050b8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80050bc:	6800      	ldr	r0, [r0, #0]
 80050be:	f001 ff23 	bl	8006f08 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 80050c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050c6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050ce:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80050d2:	6812      	ldr	r2, [r2, #0]
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050da:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80050e4:	b29b      	uxth	r3, r3
 80050e6:	4619      	mov	r1, r3
 80050e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80050ec:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80050f0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80050f4:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 80050f8:	6812      	ldr	r2, [r2, #0]
 80050fa:	440a      	add	r2, r1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005102:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	011a      	lsls	r2, r3, #4
 800510c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005110:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	4413      	add	r3, r2
 8005118:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800511c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005120:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005124:	601a      	str	r2, [r3, #0]
 8005126:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800512a:	b29a      	uxth	r2, r3
 800512c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005130:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	801a      	strh	r2, [r3, #0]
 8005138:	f001 b8b5 	b.w	80062a6 <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800513c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005140:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	78db      	ldrb	r3, [r3, #3]
 8005148:	2b02      	cmp	r3, #2
 800514a:	f040 84c6 	bne.w	8005ada <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 800514e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005152:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	6a1a      	ldr	r2, [r3, #32]
 800515a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800515e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	691b      	ldr	r3, [r3, #16]
 8005166:	429a      	cmp	r2, r3
 8005168:	f240 8443 	bls.w	80059f2 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800516c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005170:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800517a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	881b      	ldrh	r3, [r3, #0]
 8005188:	b29b      	uxth	r3, r3
 800518a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800518e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005192:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8005196:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800519a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	781b      	ldrb	r3, [r3, #0]
 80051ac:	009b      	lsls	r3, r3, #2
 80051ae:	441a      	add	r2, r3
 80051b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80051b4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80051b8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80051bc:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80051c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80051c4:	b29b      	uxth	r3, r3
 80051c6:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80051c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051cc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	6a1a      	ldr	r2, [r3, #32]
 80051d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80051d8:	1ad2      	subs	r2, r2, r3
 80051da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80051e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80051f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	781b      	ldrb	r3, [r3, #0]
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4413      	add	r3, r2
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	b29b      	uxth	r3, r3
 8005204:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005208:	2b00      	cmp	r3, #0
 800520a:	f000 823e 	beq.w	800568a <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800520e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005212:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005216:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800521a:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800521e:	6812      	ldr	r2, [r2, #0]
 8005220:	601a      	str	r2, [r3, #0]
 8005222:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005226:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	785b      	ldrb	r3, [r3, #1]
 800522e:	2b00      	cmp	r3, #0
 8005230:	f040 809a 	bne.w	8005368 <USB_EPStartXfer+0x34c>
 8005234:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005238:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800523c:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005240:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8005244:	6812      	ldr	r2, [r2, #0]
 8005246:	601a      	str	r2, [r3, #0]
 8005248:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800524c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005256:	b29b      	uxth	r3, r3
 8005258:	4619      	mov	r1, r3
 800525a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800525e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005262:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005266:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800526a:	6812      	ldr	r2, [r2, #0]
 800526c:	440a      	add	r2, r1
 800526e:	601a      	str	r2, [r3, #0]
 8005270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005274:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	781b      	ldrb	r3, [r3, #0]
 800527c:	011a      	lsls	r2, r3, #4
 800527e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4413      	add	r3, r2
 800528a:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800528e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005292:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005296:	601a      	str	r2, [r3, #0]
 8005298:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800529c:	2b00      	cmp	r3, #0
 800529e:	d122      	bne.n	80052e6 <USB_EPStartXfer+0x2ca>
 80052a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052a4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	881b      	ldrh	r3, [r3, #0]
 80052ac:	b29b      	uxth	r3, r3
 80052ae:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052b8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	801a      	strh	r2, [r3, #0]
 80052c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052c4:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	881b      	ldrh	r3, [r3, #0]
 80052cc:	b29b      	uxth	r3, r3
 80052ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80052d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80052d6:	b29a      	uxth	r2, r3
 80052d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80052dc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	801a      	strh	r2, [r3, #0]
 80052e4:	e079      	b.n	80053da <USB_EPStartXfer+0x3be>
 80052e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052ea:	2b3e      	cmp	r3, #62	; 0x3e
 80052ec:	d81b      	bhi.n	8005326 <USB_EPStartXfer+0x30a>
 80052ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052f2:	085b      	lsrs	r3, r3, #1
 80052f4:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80052f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80052fc:	f003 0301 	and.w	r3, r3, #1
 8005300:	2b00      	cmp	r3, #0
 8005302:	d004      	beq.n	800530e <USB_EPStartXfer+0x2f2>
 8005304:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005308:	3301      	adds	r3, #1
 800530a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800530e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005312:	b29b      	uxth	r3, r3
 8005314:	029b      	lsls	r3, r3, #10
 8005316:	b29a      	uxth	r2, r3
 8005318:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800531c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	801a      	strh	r2, [r3, #0]
 8005324:	e059      	b.n	80053da <USB_EPStartXfer+0x3be>
 8005326:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800532a:	095b      	lsrs	r3, r3, #5
 800532c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005330:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005334:	f003 031f 	and.w	r3, r3, #31
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <USB_EPStartXfer+0x32a>
 800533c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005340:	3b01      	subs	r3, #1
 8005342:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8005346:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800534a:	b29b      	uxth	r3, r3
 800534c:	029b      	lsls	r3, r3, #10
 800534e:	b29b      	uxth	r3, r3
 8005350:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005354:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005358:	b29a      	uxth	r2, r3
 800535a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800535e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	801a      	strh	r2, [r3, #0]
 8005366:	e038      	b.n	80053da <USB_EPStartXfer+0x3be>
 8005368:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800536c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	785b      	ldrb	r3, [r3, #1]
 8005374:	2b01      	cmp	r3, #1
 8005376:	d130      	bne.n	80053da <USB_EPStartXfer+0x3be>
 8005378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800537c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005386:	b29b      	uxth	r3, r3
 8005388:	4619      	mov	r1, r3
 800538a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800538e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8005392:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8005396:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800539a:	6812      	ldr	r2, [r2, #0]
 800539c:	440a      	add	r2, r1
 800539e:	601a      	str	r2, [r3, #0]
 80053a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	011a      	lsls	r2, r3, #4
 80053ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053b2:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4413      	add	r3, r2
 80053ba:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 80053be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053c6:	601a      	str	r2, [r3, #0]
 80053c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053cc:	b29a      	uxth	r2, r3
 80053ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053d2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80053da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	895b      	ldrh	r3, [r3, #10]
 80053e6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80053ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80053ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	6959      	ldr	r1, [r3, #20]
 80053f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005400:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005404:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005408:	6800      	ldr	r0, [r0, #0]
 800540a:	f001 fd7d 	bl	8006f08 <USB_WritePMA>
            ep->xfer_buff += len;
 800540e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005412:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	695a      	ldr	r2, [r3, #20]
 800541a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800541e:	441a      	add	r2, r3
 8005420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005424:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800542c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005430:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	6a1a      	ldr	r2, [r3, #32]
 8005438:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800543c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
 8005444:	429a      	cmp	r2, r3
 8005446:	d90f      	bls.n	8005468 <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 8005448:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800544c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	6a1a      	ldr	r2, [r3, #32]
 8005454:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005458:	1ad2      	subs	r2, r2, r3
 800545a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800545e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	621a      	str	r2, [r3, #32]
 8005466:	e00e      	b.n	8005486 <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 8005468:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800546c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	6a1b      	ldr	r3, [r3, #32]
 8005474:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 8005478:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800547c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	2200      	movs	r2, #0
 8005484:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005486:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800548a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	785b      	ldrb	r3, [r3, #1]
 8005492:	2b00      	cmp	r3, #0
 8005494:	f040 809a 	bne.w	80055cc <USB_EPStartXfer+0x5b0>
 8005498:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800549c:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054a0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054a4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80054a8:	6812      	ldr	r2, [r2, #0]
 80054aa:	601a      	str	r2, [r3, #0]
 80054ac:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054b0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80054ba:	b29b      	uxth	r3, r3
 80054bc:	4619      	mov	r1, r3
 80054be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054c2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054c6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80054ca:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 80054ce:	6812      	ldr	r2, [r2, #0]
 80054d0:	440a      	add	r2, r1
 80054d2:	601a      	str	r2, [r3, #0]
 80054d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	781b      	ldrb	r3, [r3, #0]
 80054e0:	011a      	lsls	r2, r3, #4
 80054e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054e6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	4413      	add	r3, r2
 80054ee:	f203 4204 	addw	r2, r3, #1028	; 0x404
 80054f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80054f6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80054fa:	601a      	str	r2, [r3, #0]
 80054fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005500:	2b00      	cmp	r3, #0
 8005502:	d122      	bne.n	800554a <USB_EPStartXfer+0x52e>
 8005504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005508:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	881b      	ldrh	r3, [r3, #0]
 8005510:	b29b      	uxth	r3, r3
 8005512:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005516:	b29a      	uxth	r2, r3
 8005518:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800551c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	801a      	strh	r2, [r3, #0]
 8005524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005528:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	881b      	ldrh	r3, [r3, #0]
 8005530:	b29b      	uxth	r3, r3
 8005532:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005536:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800553a:	b29a      	uxth	r2, r3
 800553c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005540:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	801a      	strh	r2, [r3, #0]
 8005548:	e083      	b.n	8005652 <USB_EPStartXfer+0x636>
 800554a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800554e:	2b3e      	cmp	r3, #62	; 0x3e
 8005550:	d81b      	bhi.n	800558a <USB_EPStartXfer+0x56e>
 8005552:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005556:	085b      	lsrs	r3, r3, #1
 8005558:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800555c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005560:	f003 0301 	and.w	r3, r3, #1
 8005564:	2b00      	cmp	r3, #0
 8005566:	d004      	beq.n	8005572 <USB_EPStartXfer+0x556>
 8005568:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800556c:	3301      	adds	r3, #1
 800556e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005572:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8005576:	b29b      	uxth	r3, r3
 8005578:	029b      	lsls	r3, r3, #10
 800557a:	b29a      	uxth	r2, r3
 800557c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005580:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	801a      	strh	r2, [r3, #0]
 8005588:	e063      	b.n	8005652 <USB_EPStartXfer+0x636>
 800558a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800558e:	095b      	lsrs	r3, r3, #5
 8005590:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005594:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005598:	f003 031f 	and.w	r3, r3, #31
 800559c:	2b00      	cmp	r3, #0
 800559e:	d104      	bne.n	80055aa <USB_EPStartXfer+0x58e>
 80055a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055a4:	3b01      	subs	r3, #1
 80055a6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80055aa:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	029b      	lsls	r3, r3, #10
 80055b2:	b29b      	uxth	r3, r3
 80055b4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80055b8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80055bc:	b29a      	uxth	r2, r3
 80055be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055c2:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	801a      	strh	r2, [r3, #0]
 80055ca:	e042      	b.n	8005652 <USB_EPStartXfer+0x636>
 80055cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	785b      	ldrb	r3, [r3, #1]
 80055d8:	2b01      	cmp	r3, #1
 80055da:	d13a      	bne.n	8005652 <USB_EPStartXfer+0x636>
 80055dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80055e4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055e8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 80055ec:	6812      	ldr	r2, [r2, #0]
 80055ee:	601a      	str	r2, [r3, #0]
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80055fe:	b29b      	uxth	r3, r3
 8005600:	4619      	mov	r1, r3
 8005602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005606:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800560a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800560e:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8005612:	6812      	ldr	r2, [r2, #0]
 8005614:	440a      	add	r2, r1
 8005616:	601a      	str	r2, [r3, #0]
 8005618:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800561c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	781b      	ldrb	r3, [r3, #0]
 8005624:	011a      	lsls	r2, r3, #4
 8005626:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800562a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4413      	add	r3, r2
 8005632:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8005636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800563a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800563e:	601a      	str	r2, [r3, #0]
 8005640:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005644:	b29a      	uxth	r2, r3
 8005646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800564a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005652:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005656:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	891b      	ldrh	r3, [r3, #8]
 800565e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005662:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005666:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6959      	ldr	r1, [r3, #20]
 800566e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005672:	b29b      	uxth	r3, r3
 8005674:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005678:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800567c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005680:	6800      	ldr	r0, [r0, #0]
 8005682:	f001 fc41 	bl	8006f08 <USB_WritePMA>
 8005686:	f000 be0e 	b.w	80062a6 <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800568a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800568e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	785b      	ldrb	r3, [r3, #1]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d16d      	bne.n	8005776 <USB_EPStartXfer+0x75a>
 800569a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800569e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80056a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	461a      	mov	r2, r3
 80056b8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ba:	4413      	add	r3, r2
 80056bc:	64bb      	str	r3, [r7, #72]	; 0x48
 80056be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80056c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	781b      	ldrb	r3, [r3, #0]
 80056ca:	011a      	lsls	r2, r3, #4
 80056cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80056ce:	4413      	add	r3, r2
 80056d0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80056d4:	647b      	str	r3, [r7, #68]	; 0x44
 80056d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d112      	bne.n	8005704 <USB_EPStartXfer+0x6e8>
 80056de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056e0:	881b      	ldrh	r3, [r3, #0]
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056ec:	801a      	strh	r2, [r3, #0]
 80056ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80056f0:	881b      	ldrh	r3, [r3, #0]
 80056f2:	b29b      	uxth	r3, r3
 80056f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80056f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80056fc:	b29a      	uxth	r2, r3
 80056fe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005700:	801a      	strh	r2, [r3, #0]
 8005702:	e063      	b.n	80057cc <USB_EPStartXfer+0x7b0>
 8005704:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005708:	2b3e      	cmp	r3, #62	; 0x3e
 800570a:	d817      	bhi.n	800573c <USB_EPStartXfer+0x720>
 800570c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005710:	085b      	lsrs	r3, r3, #1
 8005712:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005716:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800571a:	f003 0301 	and.w	r3, r3, #1
 800571e:	2b00      	cmp	r3, #0
 8005720:	d004      	beq.n	800572c <USB_EPStartXfer+0x710>
 8005722:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005726:	3301      	adds	r3, #1
 8005728:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800572c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005730:	b29b      	uxth	r3, r3
 8005732:	029b      	lsls	r3, r3, #10
 8005734:	b29a      	uxth	r2, r3
 8005736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005738:	801a      	strh	r2, [r3, #0]
 800573a:	e047      	b.n	80057cc <USB_EPStartXfer+0x7b0>
 800573c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005740:	095b      	lsrs	r3, r3, #5
 8005742:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005746:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800574a:	f003 031f 	and.w	r3, r3, #31
 800574e:	2b00      	cmp	r3, #0
 8005750:	d104      	bne.n	800575c <USB_EPStartXfer+0x740>
 8005752:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005756:	3b01      	subs	r3, #1
 8005758:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800575c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005760:	b29b      	uxth	r3, r3
 8005762:	029b      	lsls	r3, r3, #10
 8005764:	b29b      	uxth	r3, r3
 8005766:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800576a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800576e:	b29a      	uxth	r2, r3
 8005770:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005772:	801a      	strh	r2, [r3, #0]
 8005774:	e02a      	b.n	80057cc <USB_EPStartXfer+0x7b0>
 8005776:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800577a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	785b      	ldrb	r3, [r3, #1]
 8005782:	2b01      	cmp	r3, #1
 8005784:	d122      	bne.n	80057cc <USB_EPStartXfer+0x7b0>
 8005786:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800578a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	653b      	str	r3, [r7, #80]	; 0x50
 8005792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80057a0:	b29b      	uxth	r3, r3
 80057a2:	461a      	mov	r2, r3
 80057a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057a6:	4413      	add	r3, r2
 80057a8:	653b      	str	r3, [r7, #80]	; 0x50
 80057aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	781b      	ldrb	r3, [r3, #0]
 80057b6:	011a      	lsls	r2, r3, #4
 80057b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80057ba:	4413      	add	r3, r2
 80057bc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80057c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80057c2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057c6:	b29a      	uxth	r2, r3
 80057c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057ca:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80057cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	891b      	ldrh	r3, [r3, #8]
 80057d8:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80057dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	6959      	ldr	r1, [r3, #20]
 80057e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80057ec:	b29b      	uxth	r3, r3
 80057ee:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80057f2:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80057f6:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80057fa:	6800      	ldr	r0, [r0, #0]
 80057fc:	f001 fb84 	bl	8006f08 <USB_WritePMA>
            ep->xfer_buff += len;
 8005800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005804:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	695a      	ldr	r2, [r3, #20]
 800580c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005810:	441a      	add	r2, r3
 8005812:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005816:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800581e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005822:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	6a1a      	ldr	r2, [r3, #32]
 800582a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800582e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	691b      	ldr	r3, [r3, #16]
 8005836:	429a      	cmp	r2, r3
 8005838:	d90f      	bls.n	800585a <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800583a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800583e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	6a1a      	ldr	r2, [r3, #32]
 8005846:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800584a:	1ad2      	subs	r2, r2, r3
 800584c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005850:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	621a      	str	r2, [r3, #32]
 8005858:	e00e      	b.n	8005878 <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800585a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800585e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6a1b      	ldr	r3, [r3, #32]
 8005866:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800586a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800586e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	2200      	movs	r2, #0
 8005876:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005878:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800587c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	643b      	str	r3, [r7, #64]	; 0x40
 8005884:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005888:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	785b      	ldrb	r3, [r3, #1]
 8005890:	2b00      	cmp	r3, #0
 8005892:	d16d      	bne.n	8005970 <USB_EPStartXfer+0x954>
 8005894:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005898:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	63bb      	str	r3, [r7, #56]	; 0x38
 80058a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058a4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80058ae:	b29b      	uxth	r3, r3
 80058b0:	461a      	mov	r2, r3
 80058b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b4:	4413      	add	r3, r2
 80058b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80058bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	011a      	lsls	r2, r3, #4
 80058c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c8:	4413      	add	r3, r2
 80058ca:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80058ce:	637b      	str	r3, [r7, #52]	; 0x34
 80058d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d112      	bne.n	80058fe <USB_EPStartXfer+0x8e2>
 80058d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058da:	881b      	ldrh	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80058e2:	b29a      	uxth	r2, r3
 80058e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058e6:	801a      	strh	r2, [r3, #0]
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	881b      	ldrh	r3, [r3, #0]
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80058f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80058f6:	b29a      	uxth	r2, r3
 80058f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058fa:	801a      	strh	r2, [r3, #0]
 80058fc:	e05d      	b.n	80059ba <USB_EPStartXfer+0x99e>
 80058fe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005902:	2b3e      	cmp	r3, #62	; 0x3e
 8005904:	d817      	bhi.n	8005936 <USB_EPStartXfer+0x91a>
 8005906:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800590a:	085b      	lsrs	r3, r3, #1
 800590c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005914:	f003 0301 	and.w	r3, r3, #1
 8005918:	2b00      	cmp	r3, #0
 800591a:	d004      	beq.n	8005926 <USB_EPStartXfer+0x90a>
 800591c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005920:	3301      	adds	r3, #1
 8005922:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800592a:	b29b      	uxth	r3, r3
 800592c:	029b      	lsls	r3, r3, #10
 800592e:	b29a      	uxth	r2, r3
 8005930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005932:	801a      	strh	r2, [r3, #0]
 8005934:	e041      	b.n	80059ba <USB_EPStartXfer+0x99e>
 8005936:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800593a:	095b      	lsrs	r3, r3, #5
 800593c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005940:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005944:	f003 031f 	and.w	r3, r3, #31
 8005948:	2b00      	cmp	r3, #0
 800594a:	d104      	bne.n	8005956 <USB_EPStartXfer+0x93a>
 800594c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005950:	3b01      	subs	r3, #1
 8005952:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800595a:	b29b      	uxth	r3, r3
 800595c:	029b      	lsls	r3, r3, #10
 800595e:	b29b      	uxth	r3, r3
 8005960:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005964:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005968:	b29a      	uxth	r2, r3
 800596a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800596c:	801a      	strh	r2, [r3, #0]
 800596e:	e024      	b.n	80059ba <USB_EPStartXfer+0x99e>
 8005970:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005974:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	785b      	ldrb	r3, [r3, #1]
 800597c:	2b01      	cmp	r3, #1
 800597e:	d11c      	bne.n	80059ba <USB_EPStartXfer+0x99e>
 8005980:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005984:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800598e:	b29b      	uxth	r3, r3
 8005990:	461a      	mov	r2, r3
 8005992:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005994:	4413      	add	r3, r2
 8005996:	643b      	str	r3, [r7, #64]	; 0x40
 8005998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800599c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	781b      	ldrb	r3, [r3, #0]
 80059a4:	011a      	lsls	r2, r3, #4
 80059a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80059a8:	4413      	add	r3, r2
 80059aa:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059b4:	b29a      	uxth	r2, r3
 80059b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059b8:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80059ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	895b      	ldrh	r3, [r3, #10]
 80059c6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80059ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6959      	ldr	r1, [r3, #20]
 80059d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 80059e0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80059e4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80059e8:	6800      	ldr	r0, [r0, #0]
 80059ea:	f001 fa8d 	bl	8006f08 <USB_WritePMA>
 80059ee:	f000 bc5a 	b.w	80062a6 <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80059f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80059f6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	6a1b      	ldr	r3, [r3, #32]
 80059fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 8005a02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a06:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a0a:	681a      	ldr	r2, [r3, #0]
 8005a0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	781b      	ldrb	r3, [r3, #0]
 8005a18:	009b      	lsls	r3, r3, #2
 8005a1a:	4413      	add	r3, r2
 8005a1c:	881b      	ldrh	r3, [r3, #0]
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005a24:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a28:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005a2c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a30:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a34:	681a      	ldr	r2, [r3, #0]
 8005a36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	009b      	lsls	r3, r3, #2
 8005a44:	441a      	add	r2, r3
 8005a46:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005a4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005a4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005a52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8005a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a6e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005a78:	b29b      	uxth	r3, r3
 8005a7a:	461a      	mov	r2, r3
 8005a7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a7e:	4413      	add	r3, r2
 8005a80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005a82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005a86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	781b      	ldrb	r3, [r3, #0]
 8005a8e:	011a      	lsls	r2, r3, #4
 8005a90:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a92:	4413      	add	r3, r2
 8005a94:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8005a9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005a9e:	b29a      	uxth	r2, r3
 8005aa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005aa2:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8005aa4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005aa8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	891b      	ldrh	r3, [r3, #8]
 8005ab0:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ab4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ab8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6959      	ldr	r1, [r3, #20]
 8005ac0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ac4:	b29b      	uxth	r3, r3
 8005ac6:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005aca:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ace:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005ad2:	6800      	ldr	r0, [r0, #0]
 8005ad4:	f001 fa18 	bl	8006f08 <USB_WritePMA>
 8005ad8:	e3e5      	b.n	80062a6 <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 8005ada:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ade:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ae8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	781b      	ldrb	r3, [r3, #0]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	4413      	add	r3, r2
 8005af4:	881b      	ldrh	r3, [r3, #0]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005afc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b00:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 8005b04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b0c:	681a      	ldr	r2, [r3, #0]
 8005b0e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b12:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	009b      	lsls	r3, r3, #2
 8005b1c:	441a      	add	r2, r3
 8005b1e:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 8005b22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005b26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005b2a:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005b2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8005b36:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b3a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	6a1a      	ldr	r2, [r3, #32]
 8005b42:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005b46:	1ad2      	subs	r2, r2, r3
 8005b48:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b4c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005b54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b5c:	681a      	ldr	r2, [r3, #0]
 8005b5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b62:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	781b      	ldrb	r3, [r3, #0]
 8005b6a:	009b      	lsls	r3, r3, #2
 8005b6c:	4413      	add	r3, r2
 8005b6e:	881b      	ldrh	r3, [r3, #0]
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b76:	2b00      	cmp	r3, #0
 8005b78:	f000 81bc 	beq.w	8005ef4 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005b7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	785b      	ldrb	r3, [r3, #1]
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d16d      	bne.n	8005c76 <USB_EPStartXfer+0xc5a>
 8005b9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005b9e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8005ba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005baa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005bb4:	b29b      	uxth	r3, r3
 8005bb6:	461a      	mov	r2, r3
 8005bb8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bba:	4413      	add	r3, r2
 8005bbc:	67bb      	str	r3, [r7, #120]	; 0x78
 8005bbe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005bc2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	781b      	ldrb	r3, [r3, #0]
 8005bca:	011a      	lsls	r2, r3, #4
 8005bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005bce:	4413      	add	r3, r2
 8005bd0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005bd4:	677b      	str	r3, [r7, #116]	; 0x74
 8005bd6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d112      	bne.n	8005c04 <USB_EPStartXfer+0xbe8>
 8005bde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005be0:	881b      	ldrh	r3, [r3, #0]
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005be8:	b29a      	uxth	r2, r3
 8005bea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bec:	801a      	strh	r2, [r3, #0]
 8005bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005bf0:	881b      	ldrh	r3, [r3, #0]
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005bf8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005bfc:	b29a      	uxth	r2, r3
 8005bfe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c00:	801a      	strh	r2, [r3, #0]
 8005c02:	e060      	b.n	8005cc6 <USB_EPStartXfer+0xcaa>
 8005c04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c08:	2b3e      	cmp	r3, #62	; 0x3e
 8005c0a:	d817      	bhi.n	8005c3c <USB_EPStartXfer+0xc20>
 8005c0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c10:	085b      	lsrs	r3, r3, #1
 8005c12:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c1a:	f003 0301 	and.w	r3, r3, #1
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d004      	beq.n	8005c2c <USB_EPStartXfer+0xc10>
 8005c22:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c26:	3301      	adds	r3, #1
 8005c28:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c2c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c30:	b29b      	uxth	r3, r3
 8005c32:	029b      	lsls	r3, r3, #10
 8005c34:	b29a      	uxth	r2, r3
 8005c36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c38:	801a      	strh	r2, [r3, #0]
 8005c3a:	e044      	b.n	8005cc6 <USB_EPStartXfer+0xcaa>
 8005c3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c40:	095b      	lsrs	r3, r3, #5
 8005c42:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005c4a:	f003 031f 	and.w	r3, r3, #31
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d104      	bne.n	8005c5c <USB_EPStartXfer+0xc40>
 8005c52:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c56:	3b01      	subs	r3, #1
 8005c58:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8005c5c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005c60:	b29b      	uxth	r3, r3
 8005c62:	029b      	lsls	r3, r3, #10
 8005c64:	b29b      	uxth	r3, r3
 8005c66:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005c6a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c72:	801a      	strh	r2, [r3, #0]
 8005c74:	e027      	b.n	8005cc6 <USB_EPStartXfer+0xcaa>
 8005c76:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c7a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	785b      	ldrb	r3, [r3, #1]
 8005c82:	2b01      	cmp	r3, #1
 8005c84:	d11f      	bne.n	8005cc6 <USB_EPStartXfer+0xcaa>
 8005c86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005c8a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c94:	b29b      	uxth	r3, r3
 8005c96:	461a      	mov	r2, r3
 8005c98:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005c9c:	4413      	add	r3, r2
 8005c9e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005ca2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ca6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	781b      	ldrb	r3, [r3, #0]
 8005cae:	011a      	lsls	r2, r3, #4
 8005cb0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005cb4:	4413      	add	r3, r2
 8005cb6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8005cba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005cbc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005cc4:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 8005cc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	895b      	ldrh	r3, [r3, #10]
 8005cd2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005cd6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cda:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	6959      	ldr	r1, [r3, #20]
 8005ce2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ce6:	b29b      	uxth	r3, r3
 8005ce8:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005cec:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005cf0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005cf4:	6800      	ldr	r0, [r0, #0]
 8005cf6:	f001 f907 	bl	8006f08 <USB_WritePMA>
          ep->xfer_buff += len;
 8005cfa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005cfe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	695a      	ldr	r2, [r3, #20]
 8005d06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d0a:	441a      	add	r2, r3
 8005d0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 8005d18:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d1c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6a1a      	ldr	r2, [r3, #32]
 8005d24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	429a      	cmp	r2, r3
 8005d32:	d90f      	bls.n	8005d54 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 8005d34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	6a1a      	ldr	r2, [r3, #32]
 8005d40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d44:	1ad2      	subs	r2, r2, r3
 8005d46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	621a      	str	r2, [r3, #32]
 8005d52:	e00e      	b.n	8005d72 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 8005d54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a1b      	ldr	r3, [r3, #32]
 8005d60:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 8005d64:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d68:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8005d72:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	f000 8295 	beq.w	80062a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005d7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	785b      	ldrb	r3, [r3, #1]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d16d      	bne.n	8005e68 <USB_EPStartXfer+0xe4c>
 8005d8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d90:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8005d98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005d9c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005da6:	b29b      	uxth	r3, r3
 8005da8:	461a      	mov	r2, r3
 8005daa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dac:	4413      	add	r3, r2
 8005dae:	66bb      	str	r3, [r7, #104]	; 0x68
 8005db0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005db4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	781b      	ldrb	r3, [r3, #0]
 8005dbc:	011a      	lsls	r2, r3, #4
 8005dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dc0:	4413      	add	r3, r2
 8005dc2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005dc6:	667b      	str	r3, [r7, #100]	; 0x64
 8005dc8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d112      	bne.n	8005df6 <USB_EPStartXfer+0xdda>
 8005dd0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dd2:	881b      	ldrh	r3, [r3, #0]
 8005dd4:	b29b      	uxth	r3, r3
 8005dd6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005dda:	b29a      	uxth	r2, r3
 8005ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005dde:	801a      	strh	r2, [r3, #0]
 8005de0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005de2:	881b      	ldrh	r3, [r3, #0]
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005dea:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dee:	b29a      	uxth	r2, r3
 8005df0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005df2:	801a      	strh	r2, [r3, #0]
 8005df4:	e063      	b.n	8005ebe <USB_EPStartXfer+0xea2>
 8005df6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005dfa:	2b3e      	cmp	r3, #62	; 0x3e
 8005dfc:	d817      	bhi.n	8005e2e <USB_EPStartXfer+0xe12>
 8005dfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e02:	085b      	lsrs	r3, r3, #1
 8005e04:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e0c:	f003 0301 	and.w	r3, r3, #1
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d004      	beq.n	8005e1e <USB_EPStartXfer+0xe02>
 8005e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e18:	3301      	adds	r3, #1
 8005e1a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e22:	b29b      	uxth	r3, r3
 8005e24:	029b      	lsls	r3, r3, #10
 8005e26:	b29a      	uxth	r2, r3
 8005e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e2a:	801a      	strh	r2, [r3, #0]
 8005e2c:	e047      	b.n	8005ebe <USB_EPStartXfer+0xea2>
 8005e2e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e32:	095b      	lsrs	r3, r3, #5
 8005e34:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e38:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005e3c:	f003 031f 	and.w	r3, r3, #31
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d104      	bne.n	8005e4e <USB_EPStartXfer+0xe32>
 8005e44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e48:	3b01      	subs	r3, #1
 8005e4a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8005e4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005e52:	b29b      	uxth	r3, r3
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	b29b      	uxth	r3, r3
 8005e58:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e5c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e60:	b29a      	uxth	r2, r3
 8005e62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005e64:	801a      	strh	r2, [r3, #0]
 8005e66:	e02a      	b.n	8005ebe <USB_EPStartXfer+0xea2>
 8005e68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	785b      	ldrb	r3, [r3, #1]
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d122      	bne.n	8005ebe <USB_EPStartXfer+0xea2>
 8005e78:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e7c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	673b      	str	r3, [r7, #112]	; 0x70
 8005e84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005e88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	461a      	mov	r2, r3
 8005e96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005e98:	4413      	add	r3, r2
 8005e9a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ea0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	011a      	lsls	r2, r3, #4
 8005eaa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005eac:	4413      	add	r3, r2
 8005eae:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005eb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005eb4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005eb8:	b29a      	uxth	r2, r3
 8005eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ebc:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8005ebe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ec2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	891b      	ldrh	r3, [r3, #8]
 8005eca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005ece:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ed2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	6959      	ldr	r1, [r3, #20]
 8005eda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8005ee4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8005ee8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8005eec:	6800      	ldr	r0, [r0, #0]
 8005eee:	f001 f80b 	bl	8006f08 <USB_WritePMA>
 8005ef2:	e1d8      	b.n	80062a6 <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005ef4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ef8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	785b      	ldrb	r3, [r3, #1]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d178      	bne.n	8005ff6 <USB_EPStartXfer+0xfda>
 8005f04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f08:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f16:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f28:	4413      	add	r3, r2
 8005f2a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005f2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005f32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	781b      	ldrb	r3, [r3, #0]
 8005f3a:	011a      	lsls	r2, r3, #4
 8005f3c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005f40:	4413      	add	r3, r2
 8005f42:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005f46:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005f4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d116      	bne.n	8005f80 <USB_EPStartXfer+0xf64>
 8005f52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f56:	881b      	ldrh	r3, [r3, #0]
 8005f58:	b29b      	uxth	r3, r3
 8005f5a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f64:	801a      	strh	r2, [r3, #0]
 8005f66:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f6a:	881b      	ldrh	r3, [r3, #0]
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005f72:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005f7c:	801a      	strh	r2, [r3, #0]
 8005f7e:	e06b      	b.n	8006058 <USB_EPStartXfer+0x103c>
 8005f80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f84:	2b3e      	cmp	r3, #62	; 0x3e
 8005f86:	d818      	bhi.n	8005fba <USB_EPStartXfer+0xf9e>
 8005f88:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f8c:	085b      	lsrs	r3, r3, #1
 8005f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005f92:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005f96:	f003 0301 	and.w	r3, r3, #1
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d004      	beq.n	8005fa8 <USB_EPStartXfer+0xf8c>
 8005f9e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fa8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fac:	b29b      	uxth	r3, r3
 8005fae:	029b      	lsls	r3, r3, #10
 8005fb0:	b29a      	uxth	r2, r3
 8005fb2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005fb6:	801a      	strh	r2, [r3, #0]
 8005fb8:	e04e      	b.n	8006058 <USB_EPStartXfer+0x103c>
 8005fba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005fc8:	f003 031f 	and.w	r3, r3, #31
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <USB_EPStartXfer+0xfbe>
 8005fd0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fd4:	3b01      	subs	r3, #1
 8005fd6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8005fda:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8005fde:	b29b      	uxth	r3, r3
 8005fe0:	029b      	lsls	r3, r3, #10
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005fe8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005fec:	b29a      	uxth	r2, r3
 8005fee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005ff2:	801a      	strh	r2, [r3, #0]
 8005ff4:	e030      	b.n	8006058 <USB_EPStartXfer+0x103c>
 8005ff6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005ffa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	785b      	ldrb	r3, [r3, #1]
 8006002:	2b01      	cmp	r3, #1
 8006004:	d128      	bne.n	8006058 <USB_EPStartXfer+0x103c>
 8006006:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800600a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006014:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006018:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006022:	b29b      	uxth	r3, r3
 8006024:	461a      	mov	r2, r3
 8006026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800602a:	4413      	add	r3, r2
 800602c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006030:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006034:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	011a      	lsls	r2, r3, #4
 800603e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006042:	4413      	add	r3, r2
 8006044:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006048:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800604c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006050:	b29a      	uxth	r2, r3
 8006052:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006056:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006058:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800605c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	891b      	ldrh	r3, [r3, #8]
 8006064:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006068:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800606c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	6959      	ldr	r1, [r3, #20]
 8006074:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006078:	b29b      	uxth	r3, r3
 800607a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800607e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8006082:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8006086:	6800      	ldr	r0, [r0, #0]
 8006088:	f000 ff3e 	bl	8006f08 <USB_WritePMA>
          ep->xfer_buff += len;
 800608c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006090:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	695a      	ldr	r2, [r3, #20]
 8006098:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800609c:	441a      	add	r2, r3
 800609e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060a2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 80060aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6a1a      	ldr	r2, [r3, #32]
 80060b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	429a      	cmp	r2, r3
 80060c4:	d90f      	bls.n	80060e6 <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 80060c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	6a1a      	ldr	r2, [r3, #32]
 80060d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80060d6:	1ad2      	subs	r2, r2, r3
 80060d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	621a      	str	r2, [r3, #32]
 80060e4:	e00e      	b.n	8006104 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 80060e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	6a1b      	ldr	r3, [r3, #32]
 80060f2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 80060f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80060fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	2200      	movs	r2, #0
 8006102:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 8006104:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006108:	2b00      	cmp	r3, #0
 800610a:	f000 80cc 	beq.w	80062a6 <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800610e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006112:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800611c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006120:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	785b      	ldrb	r3, [r3, #1]
 8006128:	2b00      	cmp	r3, #0
 800612a:	d178      	bne.n	800621e <USB_EPStartXfer+0x1202>
 800612c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006130:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800613a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800613e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006148:	b29b      	uxth	r3, r3
 800614a:	461a      	mov	r2, r3
 800614c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006150:	4413      	add	r3, r2
 8006152:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006156:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800615a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	781b      	ldrb	r3, [r3, #0]
 8006162:	011a      	lsls	r2, r3, #4
 8006164:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006168:	4413      	add	r3, r2
 800616a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800616e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006172:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006176:	2b00      	cmp	r3, #0
 8006178:	d116      	bne.n	80061a8 <USB_EPStartXfer+0x118c>
 800617a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800617e:	881b      	ldrh	r3, [r3, #0]
 8006180:	b29b      	uxth	r3, r3
 8006182:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006186:	b29a      	uxth	r2, r3
 8006188:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800618c:	801a      	strh	r2, [r3, #0]
 800618e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	b29b      	uxth	r3, r3
 8006196:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800619a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800619e:	b29a      	uxth	r2, r3
 80061a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061a4:	801a      	strh	r2, [r3, #0]
 80061a6:	e064      	b.n	8006272 <USB_EPStartXfer+0x1256>
 80061a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061ac:	2b3e      	cmp	r3, #62	; 0x3e
 80061ae:	d818      	bhi.n	80061e2 <USB_EPStartXfer+0x11c6>
 80061b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061b4:	085b      	lsrs	r3, r3, #1
 80061b6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061be:	f003 0301 	and.w	r3, r3, #1
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d004      	beq.n	80061d0 <USB_EPStartXfer+0x11b4>
 80061c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061ca:	3301      	adds	r3, #1
 80061cc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061d4:	b29b      	uxth	r3, r3
 80061d6:	029b      	lsls	r3, r3, #10
 80061d8:	b29a      	uxth	r2, r3
 80061da:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061de:	801a      	strh	r2, [r3, #0]
 80061e0:	e047      	b.n	8006272 <USB_EPStartXfer+0x1256>
 80061e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80061ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80061f0:	f003 031f 	and.w	r3, r3, #31
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d104      	bne.n	8006202 <USB_EPStartXfer+0x11e6>
 80061f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80061fc:	3b01      	subs	r3, #1
 80061fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8006202:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8006206:	b29b      	uxth	r3, r3
 8006208:	029b      	lsls	r3, r3, #10
 800620a:	b29b      	uxth	r3, r3
 800620c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006210:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006214:	b29a      	uxth	r2, r3
 8006216:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800621a:	801a      	strh	r2, [r3, #0]
 800621c:	e029      	b.n	8006272 <USB_EPStartXfer+0x1256>
 800621e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006222:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	785b      	ldrb	r3, [r3, #1]
 800622a:	2b01      	cmp	r3, #1
 800622c:	d121      	bne.n	8006272 <USB_EPStartXfer+0x1256>
 800622e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006232:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800623c:	b29b      	uxth	r3, r3
 800623e:	461a      	mov	r2, r3
 8006240:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006244:	4413      	add	r3, r2
 8006246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800624a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800624e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	781b      	ldrb	r3, [r3, #0]
 8006256:	011a      	lsls	r2, r3, #4
 8006258:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800625c:	4413      	add	r3, r2
 800625e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006262:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006266:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800626a:	b29a      	uxth	r2, r3
 800626c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006270:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006276:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	895b      	ldrh	r3, [r3, #10]
 800627e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006282:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006286:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6959      	ldr	r1, [r3, #20]
 800628e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006292:	b29b      	uxth	r3, r3
 8006294:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 8006298:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800629c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 80062a0:	6800      	ldr	r0, [r0, #0]
 80062a2:	f000 fe31 	bl	8006f08 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 80062a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4413      	add	r3, r2
 80062c0:	881b      	ldrh	r3, [r3, #0]
 80062c2:	b29b      	uxth	r3, r3
 80062c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062c8:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062cc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062d0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80062d4:	8013      	strh	r3, [r2, #0]
 80062d6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062da:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062de:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062e2:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062e6:	8812      	ldrh	r2, [r2, #0]
 80062e8:	f082 0210 	eor.w	r2, r2, #16
 80062ec:	801a      	strh	r2, [r3, #0]
 80062ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80062f2:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 80062f6:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80062fa:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 80062fe:	8812      	ldrh	r2, [r2, #0]
 8006300:	f082 0220 	eor.w	r2, r2, #32
 8006304:	801a      	strh	r2, [r3, #0]
 8006306:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800630a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800630e:	681a      	ldr	r2, [r3, #0]
 8006310:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006314:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	781b      	ldrb	r3, [r3, #0]
 800631c:	009b      	lsls	r3, r3, #2
 800631e:	441a      	add	r2, r3
 8006320:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006324:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 8006328:	881b      	ldrh	r3, [r3, #0]
 800632a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800632e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006332:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006336:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800633a:	b29b      	uxth	r3, r3
 800633c:	8013      	strh	r3, [r2, #0]
 800633e:	f000 bc9f 	b.w	8006c80 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8006342:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006346:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	7b1b      	ldrb	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	f040 80ae 	bne.w	80064b0 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8006354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	699a      	ldr	r2, [r3, #24]
 8006360:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006364:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	691b      	ldr	r3, [r3, #16]
 800636c:	429a      	cmp	r2, r3
 800636e:	d917      	bls.n	80063a0 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 8006370:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006374:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 8006380:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006384:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	699a      	ldr	r2, [r3, #24]
 800638c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006390:	1ad2      	subs	r2, r2, r3
 8006392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006396:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	619a      	str	r2, [r3, #24]
 800639e:	e00e      	b.n	80063be <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 80063a0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063a4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	699b      	ldr	r3, [r3, #24]
 80063ac:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 80063b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	2200      	movs	r2, #0
 80063bc:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80063be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063c2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063d0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80063da:	b29b      	uxth	r3, r3
 80063dc:	461a      	mov	r2, r3
 80063de:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063e2:	4413      	add	r3, r2
 80063e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80063e8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80063ec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	011a      	lsls	r2, r3, #4
 80063f6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80063fa:	4413      	add	r3, r2
 80063fc:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006400:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006404:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006408:	2b00      	cmp	r3, #0
 800640a:	d116      	bne.n	800643a <USB_EPStartXfer+0x141e>
 800640c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006410:	881b      	ldrh	r3, [r3, #0]
 8006412:	b29b      	uxth	r3, r3
 8006414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006418:	b29a      	uxth	r2, r3
 800641a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800641e:	801a      	strh	r2, [r3, #0]
 8006420:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006424:	881b      	ldrh	r3, [r3, #0]
 8006426:	b29b      	uxth	r3, r3
 8006428:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800642c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006430:	b29a      	uxth	r2, r3
 8006432:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006436:	801a      	strh	r2, [r3, #0]
 8006438:	e3e8      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
 800643a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800643e:	2b3e      	cmp	r3, #62	; 0x3e
 8006440:	d818      	bhi.n	8006474 <USB_EPStartXfer+0x1458>
 8006442:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006446:	085b      	lsrs	r3, r3, #1
 8006448:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800644c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d004      	beq.n	8006462 <USB_EPStartXfer+0x1446>
 8006458:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800645c:	3301      	adds	r3, #1
 800645e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006462:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006466:	b29b      	uxth	r3, r3
 8006468:	029b      	lsls	r3, r3, #10
 800646a:	b29a      	uxth	r2, r3
 800646c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006470:	801a      	strh	r2, [r3, #0]
 8006472:	e3cb      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
 8006474:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006478:	095b      	lsrs	r3, r3, #5
 800647a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800647e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2b00      	cmp	r3, #0
 8006488:	d104      	bne.n	8006494 <USB_EPStartXfer+0x1478>
 800648a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800648e:	3b01      	subs	r3, #1
 8006490:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8006494:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8006498:	b29b      	uxth	r3, r3
 800649a:	029b      	lsls	r3, r3, #10
 800649c:	b29b      	uxth	r3, r3
 800649e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80064a2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80064a6:	b29a      	uxth	r2, r3
 80064a8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80064ac:	801a      	strh	r2, [r3, #0]
 80064ae:	e3ad      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80064b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	78db      	ldrb	r3, [r3, #3]
 80064bc:	2b02      	cmp	r3, #2
 80064be:	f040 8200 	bne.w	80068c2 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80064c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	785b      	ldrb	r3, [r3, #1]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f040 8091 	bne.w	80065f6 <USB_EPStartXfer+0x15da>
 80064d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064d8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80064e6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80064f0:	b29b      	uxth	r3, r3
 80064f2:	461a      	mov	r2, r3
 80064f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80064f8:	4413      	add	r3, r2
 80064fa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80064fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006502:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	781b      	ldrb	r3, [r3, #0]
 800650a:	011a      	lsls	r2, r3, #4
 800650c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8006510:	4413      	add	r3, r2
 8006512:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006516:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800651a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800651e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d116      	bne.n	8006558 <USB_EPStartXfer+0x153c>
 800652a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800652e:	881b      	ldrh	r3, [r3, #0]
 8006530:	b29b      	uxth	r3, r3
 8006532:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006536:	b29a      	uxth	r2, r3
 8006538:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800653c:	801a      	strh	r2, [r3, #0]
 800653e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	b29b      	uxth	r3, r3
 8006546:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800654a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800654e:	b29a      	uxth	r2, r3
 8006550:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006554:	801a      	strh	r2, [r3, #0]
 8006556:	e083      	b.n	8006660 <USB_EPStartXfer+0x1644>
 8006558:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800655c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	691b      	ldr	r3, [r3, #16]
 8006564:	2b3e      	cmp	r3, #62	; 0x3e
 8006566:	d820      	bhi.n	80065aa <USB_EPStartXfer+0x158e>
 8006568:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800656c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	691b      	ldr	r3, [r3, #16]
 8006574:	085b      	lsrs	r3, r3, #1
 8006576:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800657a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800657e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f003 0301 	and.w	r3, r3, #1
 800658a:	2b00      	cmp	r3, #0
 800658c:	d004      	beq.n	8006598 <USB_EPStartXfer+0x157c>
 800658e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006592:	3301      	adds	r3, #1
 8006594:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8006598:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800659c:	b29b      	uxth	r3, r3
 800659e:	029b      	lsls	r3, r3, #10
 80065a0:	b29a      	uxth	r2, r3
 80065a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065a6:	801a      	strh	r2, [r3, #0]
 80065a8:	e05a      	b.n	8006660 <USB_EPStartXfer+0x1644>
 80065aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	691b      	ldr	r3, [r3, #16]
 80065b6:	095b      	lsrs	r3, r3, #5
 80065b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	691b      	ldr	r3, [r3, #16]
 80065c8:	f003 031f 	and.w	r3, r3, #31
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d104      	bne.n	80065da <USB_EPStartXfer+0x15be>
 80065d0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065d4:	3b01      	subs	r3, #1
 80065d6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80065da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80065de:	b29b      	uxth	r3, r3
 80065e0:	029b      	lsls	r3, r3, #10
 80065e2:	b29b      	uxth	r3, r3
 80065e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80065e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80065ec:	b29a      	uxth	r2, r3
 80065ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80065f2:	801a      	strh	r2, [r3, #0]
 80065f4:	e034      	b.n	8006660 <USB_EPStartXfer+0x1644>
 80065f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80065fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	785b      	ldrb	r3, [r3, #1]
 8006602:	2b01      	cmp	r3, #1
 8006604:	d12c      	bne.n	8006660 <USB_EPStartXfer+0x1644>
 8006606:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800660a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006614:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006618:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006622:	b29b      	uxth	r3, r3
 8006624:	461a      	mov	r2, r3
 8006626:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800662a:	4413      	add	r3, r2
 800662c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006630:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006634:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	011a      	lsls	r2, r3, #4
 800663e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006642:	4413      	add	r3, r2
 8006644:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006648:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800664c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006650:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	691b      	ldr	r3, [r3, #16]
 8006658:	b29a      	uxth	r2, r3
 800665a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800665e:	801a      	strh	r2, [r3, #0]
 8006660:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006664:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800666e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006672:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	785b      	ldrb	r3, [r3, #1]
 800667a:	2b00      	cmp	r3, #0
 800667c:	f040 8091 	bne.w	80067a2 <USB_EPStartXfer+0x1786>
 8006680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006684:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800668e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006692:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800669c:	b29b      	uxth	r3, r3
 800669e:	461a      	mov	r2, r3
 80066a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066a4:	4413      	add	r3, r2
 80066a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80066aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ae:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	781b      	ldrb	r3, [r3, #0]
 80066b6:	011a      	lsls	r2, r3, #4
 80066b8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80066bc:	4413      	add	r3, r2
 80066be:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80066c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80066c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80066ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d116      	bne.n	8006704 <USB_EPStartXfer+0x16e8>
 80066d6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066da:	881b      	ldrh	r3, [r3, #0]
 80066dc:	b29b      	uxth	r3, r3
 80066de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066e8:	801a      	strh	r2, [r3, #0]
 80066ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80066ee:	881b      	ldrh	r3, [r3, #0]
 80066f0:	b29b      	uxth	r3, r3
 80066f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066fa:	b29a      	uxth	r2, r3
 80066fc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006700:	801a      	strh	r2, [r3, #0]
 8006702:	e07c      	b.n	80067fe <USB_EPStartXfer+0x17e2>
 8006704:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006708:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	691b      	ldr	r3, [r3, #16]
 8006710:	2b3e      	cmp	r3, #62	; 0x3e
 8006712:	d820      	bhi.n	8006756 <USB_EPStartXfer+0x173a>
 8006714:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006718:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	691b      	ldr	r3, [r3, #16]
 8006720:	085b      	lsrs	r3, r3, #1
 8006722:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006726:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800672a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	691b      	ldr	r3, [r3, #16]
 8006732:	f003 0301 	and.w	r3, r3, #1
 8006736:	2b00      	cmp	r3, #0
 8006738:	d004      	beq.n	8006744 <USB_EPStartXfer+0x1728>
 800673a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800673e:	3301      	adds	r3, #1
 8006740:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006744:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006748:	b29b      	uxth	r3, r3
 800674a:	029b      	lsls	r3, r3, #10
 800674c:	b29a      	uxth	r2, r3
 800674e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006752:	801a      	strh	r2, [r3, #0]
 8006754:	e053      	b.n	80067fe <USB_EPStartXfer+0x17e2>
 8006756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800675a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	095b      	lsrs	r3, r3, #5
 8006764:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006768:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800676c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691b      	ldr	r3, [r3, #16]
 8006774:	f003 031f 	and.w	r3, r3, #31
 8006778:	2b00      	cmp	r3, #0
 800677a:	d104      	bne.n	8006786 <USB_EPStartXfer+0x176a>
 800677c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006780:	3b01      	subs	r3, #1
 8006782:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006786:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800678a:	b29b      	uxth	r3, r3
 800678c:	029b      	lsls	r3, r3, #10
 800678e:	b29b      	uxth	r3, r3
 8006790:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006794:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006798:	b29a      	uxth	r2, r3
 800679a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800679e:	801a      	strh	r2, [r3, #0]
 80067a0:	e02d      	b.n	80067fe <USB_EPStartXfer+0x17e2>
 80067a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	785b      	ldrb	r3, [r3, #1]
 80067ae:	2b01      	cmp	r3, #1
 80067b0:	d125      	bne.n	80067fe <USB_EPStartXfer+0x17e2>
 80067b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067b6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	461a      	mov	r2, r3
 80067c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067c8:	4413      	add	r3, r2
 80067ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80067ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	781b      	ldrb	r3, [r3, #0]
 80067da:	011a      	lsls	r2, r3, #4
 80067dc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80067e0:	4413      	add	r3, r2
 80067e2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80067e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80067ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80067ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	691b      	ldr	r3, [r3, #16]
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80067fc:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 80067fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006802:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	69db      	ldr	r3, [r3, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	f000 81fe 	beq.w	8006c0c <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8006810:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006814:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006818:	681a      	ldr	r2, [r3, #0]
 800681a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800681e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	781b      	ldrb	r3, [r3, #0]
 8006826:	009b      	lsls	r3, r3, #2
 8006828:	4413      	add	r3, r2
 800682a:	881b      	ldrh	r3, [r3, #0]
 800682c:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006830:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006834:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006838:	2b00      	cmp	r3, #0
 800683a:	d005      	beq.n	8006848 <USB_EPStartXfer+0x182c>
 800683c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 8006840:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006844:	2b00      	cmp	r3, #0
 8006846:	d10d      	bne.n	8006864 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006848:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800684c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8006850:	2b00      	cmp	r3, #0
 8006852:	f040 81db 	bne.w	8006c0c <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8006856:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800685a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	f040 81d4 	bne.w	8006c0c <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 8006864:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006868:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	009b      	lsls	r3, r3, #2
 800687c:	4413      	add	r3, r2
 800687e:	881b      	ldrh	r3, [r3, #0]
 8006880:	b29b      	uxth	r3, r3
 8006882:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800688a:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800688e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006892:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800689c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	009b      	lsls	r3, r3, #2
 80068a6:	441a      	add	r2, r3
 80068a8:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 80068ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80068b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80068b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80068b8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80068bc:	b29b      	uxth	r3, r3
 80068be:	8013      	strh	r3, [r2, #0]
 80068c0:	e1a4      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 80068c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	78db      	ldrb	r3, [r3, #3]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	f040 819a 	bne.w	8006c08 <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 80068d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	699a      	ldr	r2, [r3, #24]
 80068e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d917      	bls.n	8006920 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 80068f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80068f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	691b      	ldr	r3, [r3, #16]
 80068fc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 8006900:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006904:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	699a      	ldr	r2, [r3, #24]
 800690c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006910:	1ad2      	subs	r2, r2, r3
 8006912:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006916:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	619a      	str	r2, [r3, #24]
 800691e:	e00e      	b.n	800693e <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 8006920:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006924:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	699b      	ldr	r3, [r3, #24]
 800692c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 8006930:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006934:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	2200      	movs	r2, #0
 800693c:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800693e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	785b      	ldrb	r3, [r3, #1]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d178      	bne.n	8006a40 <USB_EPStartXfer+0x1a24>
 800694e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006952:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800695c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006960:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800696a:	b29b      	uxth	r3, r3
 800696c:	461a      	mov	r2, r3
 800696e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8006972:	4413      	add	r3, r2
 8006974:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8006978:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800697c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	781b      	ldrb	r3, [r3, #0]
 8006984:	011a      	lsls	r2, r3, #4
 8006986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800698a:	4413      	add	r3, r2
 800698c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006990:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8006994:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006998:	2b00      	cmp	r3, #0
 800699a:	d116      	bne.n	80069ca <USB_EPStartXfer+0x19ae>
 800699c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	b29b      	uxth	r3, r3
 80069a4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80069a8:	b29a      	uxth	r2, r3
 80069aa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069ae:	801a      	strh	r2, [r3, #0]
 80069b0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069b4:	881b      	ldrh	r3, [r3, #0]
 80069b6:	b29b      	uxth	r3, r3
 80069b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80069bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80069c0:	b29a      	uxth	r2, r3
 80069c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	e06b      	b.n	8006aa2 <USB_EPStartXfer+0x1a86>
 80069ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069ce:	2b3e      	cmp	r3, #62	; 0x3e
 80069d0:	d818      	bhi.n	8006a04 <USB_EPStartXfer+0x19e8>
 80069d2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069d6:	085b      	lsrs	r3, r3, #1
 80069d8:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069dc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80069e0:	f003 0301 	and.w	r3, r3, #1
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d004      	beq.n	80069f2 <USB_EPStartXfer+0x19d6>
 80069e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069ec:	3301      	adds	r3, #1
 80069ee:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80069f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	029b      	lsls	r3, r3, #10
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a00:	801a      	strh	r2, [r3, #0]
 8006a02:	e04e      	b.n	8006aa2 <USB_EPStartXfer+0x1a86>
 8006a04:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a08:	095b      	lsrs	r3, r3, #5
 8006a0a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a0e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a12:	f003 031f 	and.w	r3, r3, #31
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d104      	bne.n	8006a24 <USB_EPStartXfer+0x1a08>
 8006a1a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	029b      	lsls	r3, r3, #10
 8006a2c:	b29b      	uxth	r3, r3
 8006a2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a36:	b29a      	uxth	r2, r3
 8006a38:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a3c:	801a      	strh	r2, [r3, #0]
 8006a3e:	e030      	b.n	8006aa2 <USB_EPStartXfer+0x1a86>
 8006a40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	785b      	ldrb	r3, [r3, #1]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d128      	bne.n	8006aa2 <USB_EPStartXfer+0x1a86>
 8006a50:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a54:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a5e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a62:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	461a      	mov	r2, r3
 8006a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a74:	4413      	add	r3, r2
 8006a76:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006a7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006a7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	781b      	ldrb	r3, [r3, #0]
 8006a86:	011a      	lsls	r2, r3, #4
 8006a88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a8c:	4413      	add	r3, r2
 8006a8e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006a92:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8006a96:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006a9a:	b29a      	uxth	r2, r3
 8006a9c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8006aa0:	801a      	strh	r2, [r3, #0]
 8006aa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aa6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006ab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ab4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	785b      	ldrb	r3, [r3, #1]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d178      	bne.n	8006bb2 <USB_EPStartXfer+0x1b96>
 8006ac0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ac4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006ace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006ad2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	461a      	mov	r2, r3
 8006ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae4:	4413      	add	r3, r2
 8006ae6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006aea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006aee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	011a      	lsls	r2, r3, #4
 8006af8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006afc:	4413      	add	r3, r2
 8006afe:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006b02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006b06:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d116      	bne.n	8006b3c <USB_EPStartXfer+0x1b20>
 8006b0e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b12:	881b      	ldrh	r3, [r3, #0]
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006b1a:	b29a      	uxth	r2, r3
 8006b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b20:	801a      	strh	r2, [r3, #0]
 8006b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006b2e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006b32:	b29a      	uxth	r2, r3
 8006b34:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b38:	801a      	strh	r2, [r3, #0]
 8006b3a:	e067      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
 8006b3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b40:	2b3e      	cmp	r3, #62	; 0x3e
 8006b42:	d818      	bhi.n	8006b76 <USB_EPStartXfer+0x1b5a>
 8006b44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b48:	085b      	lsrs	r3, r3, #1
 8006b4a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b4e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <USB_EPStartXfer+0x1b48>
 8006b5a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b5e:	3301      	adds	r3, #1
 8006b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b64:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b68:	b29b      	uxth	r3, r3
 8006b6a:	029b      	lsls	r3, r3, #10
 8006b6c:	b29a      	uxth	r2, r3
 8006b6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006b72:	801a      	strh	r2, [r3, #0]
 8006b74:	e04a      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
 8006b76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b7a:	095b      	lsrs	r3, r3, #5
 8006b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b80:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006b84:	f003 031f 	and.w	r3, r3, #31
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d104      	bne.n	8006b96 <USB_EPStartXfer+0x1b7a>
 8006b8c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b90:	3b01      	subs	r3, #1
 8006b92:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006b9a:	b29b      	uxth	r3, r3
 8006b9c:	029b      	lsls	r3, r3, #10
 8006b9e:	b29b      	uxth	r3, r3
 8006ba0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ba4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ba8:	b29a      	uxth	r2, r3
 8006baa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006bae:	801a      	strh	r2, [r3, #0]
 8006bb0:	e02c      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
 8006bb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bb6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	785b      	ldrb	r3, [r3, #1]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d124      	bne.n	8006c0c <USB_EPStartXfer+0x1bf0>
 8006bc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006bc6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	461a      	mov	r2, r3
 8006bd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd8:	4413      	add	r3, r2
 8006bda:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8006bde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006be2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	781b      	ldrb	r3, [r3, #0]
 8006bea:	011a      	lsls	r2, r3, #4
 8006bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bf0:	4413      	add	r3, r2
 8006bf2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006bf6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006bfa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8006bfe:	b29a      	uxth	r2, r3
 8006c00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c04:	801a      	strh	r2, [r3, #0]
 8006c06:	e001      	b.n	8006c0c <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	e03a      	b.n	8006c82 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006c0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c10:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c14:	681a      	ldr	r2, [r3, #0]
 8006c16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	881b      	ldrh	r3, [r3, #0]
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c32:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c36:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c3a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006c3e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c42:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c46:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006c4a:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 8006c4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c52:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8006c56:	681a      	ldr	r2, [r3, #0]
 8006c58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8006c5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	781b      	ldrb	r3, [r3, #0]
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	441a      	add	r2, r3
 8006c68:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8006c6c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c70:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c74:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006c7c:	b29b      	uxth	r3, r3
 8006c7e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006c80:	2300      	movs	r3, #0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	f507 7798 	add.w	r7, r7, #304	; 0x130
 8006c88:	46bd      	mov	sp, r7
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006c8c:	b480      	push	{r7}
 8006c8e:	b085      	sub	sp, #20
 8006c90:	af00      	add	r7, sp, #0
 8006c92:	6078      	str	r0, [r7, #4]
 8006c94:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8006c96:	683b      	ldr	r3, [r7, #0]
 8006c98:	785b      	ldrb	r3, [r3, #1]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d020      	beq.n	8006ce0 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	781b      	ldrb	r3, [r3, #0]
 8006ca4:	009b      	lsls	r3, r3, #2
 8006ca6:	4413      	add	r3, r2
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	b29b      	uxth	r3, r3
 8006cac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006cb4:	81bb      	strh	r3, [r7, #12]
 8006cb6:	89bb      	ldrh	r3, [r7, #12]
 8006cb8:	f083 0310 	eor.w	r3, r3, #16
 8006cbc:	81bb      	strh	r3, [r7, #12]
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	009b      	lsls	r3, r3, #2
 8006cc6:	441a      	add	r2, r3
 8006cc8:	89bb      	ldrh	r3, [r7, #12]
 8006cca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006cce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	8013      	strh	r3, [r2, #0]
 8006cde:	e01f      	b.n	8006d20 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	781b      	ldrb	r3, [r3, #0]
 8006ce6:	009b      	lsls	r3, r3, #2
 8006ce8:	4413      	add	r3, r2
 8006cea:	881b      	ldrh	r3, [r3, #0]
 8006cec:	b29b      	uxth	r3, r3
 8006cee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cf6:	81fb      	strh	r3, [r7, #14]
 8006cf8:	89fb      	ldrh	r3, [r7, #14]
 8006cfa:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006cfe:	81fb      	strh	r3, [r7, #14]
 8006d00:	687a      	ldr	r2, [r7, #4]
 8006d02:	683b      	ldr	r3, [r7, #0]
 8006d04:	781b      	ldrb	r3, [r3, #0]
 8006d06:	009b      	lsls	r3, r3, #2
 8006d08:	441a      	add	r2, r3
 8006d0a:	89fb      	ldrh	r3, [r7, #14]
 8006d0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d1c:	b29b      	uxth	r3, r3
 8006d1e:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3714      	adds	r7, #20
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bc80      	pop	{r7}
 8006d2a:	4770      	bx	lr

08006d2c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006d2c:	b480      	push	{r7}
 8006d2e:	b087      	sub	sp, #28
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	6078      	str	r0, [r7, #4]
 8006d34:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	7b1b      	ldrb	r3, [r3, #12]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f040 809d 	bne.w	8006e7a <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	785b      	ldrb	r3, [r3, #1]
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d04c      	beq.n	8006de2 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006d48:	687a      	ldr	r2, [r7, #4]
 8006d4a:	683b      	ldr	r3, [r7, #0]
 8006d4c:	781b      	ldrb	r3, [r3, #0]
 8006d4e:	009b      	lsls	r3, r3, #2
 8006d50:	4413      	add	r3, r2
 8006d52:	881b      	ldrh	r3, [r3, #0]
 8006d54:	823b      	strh	r3, [r7, #16]
 8006d56:	8a3b      	ldrh	r3, [r7, #16]
 8006d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d01b      	beq.n	8006d98 <USB_EPClearStall+0x6c>
 8006d60:	687a      	ldr	r2, [r7, #4]
 8006d62:	683b      	ldr	r3, [r7, #0]
 8006d64:	781b      	ldrb	r3, [r3, #0]
 8006d66:	009b      	lsls	r3, r3, #2
 8006d68:	4413      	add	r3, r2
 8006d6a:	881b      	ldrh	r3, [r3, #0]
 8006d6c:	b29b      	uxth	r3, r3
 8006d6e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d72:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d76:	81fb      	strh	r3, [r7, #14]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	683b      	ldr	r3, [r7, #0]
 8006d7c:	781b      	ldrb	r3, [r3, #0]
 8006d7e:	009b      	lsls	r3, r3, #2
 8006d80:	441a      	add	r2, r3
 8006d82:	89fb      	ldrh	r3, [r7, #14]
 8006d84:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d88:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d8c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d90:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d94:	b29b      	uxth	r3, r3
 8006d96:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	78db      	ldrb	r3, [r3, #3]
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d06c      	beq.n	8006e7a <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8006da0:	687a      	ldr	r2, [r7, #4]
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	781b      	ldrb	r3, [r3, #0]
 8006da6:	009b      	lsls	r3, r3, #2
 8006da8:	4413      	add	r3, r2
 8006daa:	881b      	ldrh	r3, [r3, #0]
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006db2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006db6:	81bb      	strh	r3, [r7, #12]
 8006db8:	89bb      	ldrh	r3, [r7, #12]
 8006dba:	f083 0320 	eor.w	r3, r3, #32
 8006dbe:	81bb      	strh	r3, [r7, #12]
 8006dc0:	687a      	ldr	r2, [r7, #4]
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	009b      	lsls	r3, r3, #2
 8006dc8:	441a      	add	r2, r3
 8006dca:	89bb      	ldrh	r3, [r7, #12]
 8006dcc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006dd0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006dd4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006dd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ddc:	b29b      	uxth	r3, r3
 8006dde:	8013      	strh	r3, [r2, #0]
 8006de0:	e04b      	b.n	8006e7a <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	683b      	ldr	r3, [r7, #0]
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	4413      	add	r3, r2
 8006dec:	881b      	ldrh	r3, [r3, #0]
 8006dee:	82fb      	strh	r3, [r7, #22]
 8006df0:	8afb      	ldrh	r3, [r7, #22]
 8006df2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d01b      	beq.n	8006e32 <USB_EPClearStall+0x106>
 8006dfa:	687a      	ldr	r2, [r7, #4]
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	781b      	ldrb	r3, [r3, #0]
 8006e00:	009b      	lsls	r3, r3, #2
 8006e02:	4413      	add	r3, r2
 8006e04:	881b      	ldrh	r3, [r3, #0]
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e10:	82bb      	strh	r3, [r7, #20]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	441a      	add	r2, r3
 8006e1c:	8abb      	ldrh	r3, [r7, #20]
 8006e1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e2e:	b29b      	uxth	r3, r3
 8006e30:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006e32:	687a      	ldr	r2, [r7, #4]
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	009b      	lsls	r3, r3, #2
 8006e3a:	4413      	add	r3, r2
 8006e3c:	881b      	ldrh	r3, [r3, #0]
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e44:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e48:	827b      	strh	r3, [r7, #18]
 8006e4a:	8a7b      	ldrh	r3, [r7, #18]
 8006e4c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006e50:	827b      	strh	r3, [r7, #18]
 8006e52:	8a7b      	ldrh	r3, [r7, #18]
 8006e54:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e58:	827b      	strh	r3, [r7, #18]
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	781b      	ldrb	r3, [r3, #0]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	441a      	add	r2, r3
 8006e64:	8a7b      	ldrh	r3, [r7, #18]
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8006e7a:	2300      	movs	r3, #0
}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	371c      	adds	r7, #28
 8006e80:	46bd      	mov	sp, r7
 8006e82:	bc80      	pop	{r7}
 8006e84:	4770      	bx	lr

08006e86 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8006e86:	b480      	push	{r7}
 8006e88:	b083      	sub	sp, #12
 8006e8a:	af00      	add	r7, sp, #0
 8006e8c:	6078      	str	r0, [r7, #4]
 8006e8e:	460b      	mov	r3, r1
 8006e90:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8006e92:	78fb      	ldrb	r3, [r7, #3]
 8006e94:	2b00      	cmp	r3, #0
 8006e96:	d103      	bne.n	8006ea0 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2280      	movs	r2, #128	; 0x80
 8006e9c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8006ea0:	2300      	movs	r3, #0
}
 8006ea2:	4618      	mov	r0, r3
 8006ea4:	370c      	adds	r7, #12
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	bc80      	pop	{r7}
 8006eaa:	4770      	bx	lr

08006eac <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b083      	sub	sp, #12
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	370c      	adds	r7, #12
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	bc80      	pop	{r7}
 8006ebe:	4770      	bx	lr

08006ec0 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_TypeDef *USBx)
{
 8006ec0:	b480      	push	{r7}
 8006ec2:	b083      	sub	sp, #12
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 8006ec8:	2300      	movs	r3, #0
}
 8006eca:	4618      	mov	r0, r3
 8006ecc:	370c      	adds	r7, #12
 8006ece:	46bd      	mov	sp, r7
 8006ed0:	bc80      	pop	{r7}
 8006ed2:	4770      	bx	lr

08006ed4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006ee2:	b29b      	uxth	r3, r3
 8006ee4:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bc80      	pop	{r7}
 8006ef0:	4770      	bx	lr

08006ef2 <USB_EP0_OutStart>:
  * @param  USBx Selected device
  * @param  psetup pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_TypeDef *USBx, uint8_t *psetup)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b083      	sub	sp, #12
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	6078      	str	r0, [r7, #4]
 8006efa:	6039      	str	r1, [r7, #0]
  UNUSED(psetup);
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */
  return HAL_OK;
 8006efc:	2300      	movs	r3, #0
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	370c      	adds	r7, #12
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr

08006f08 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f08:	b480      	push	{r7}
 8006f0a:	b08d      	sub	sp, #52	; 0x34
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	60f8      	str	r0, [r7, #12]
 8006f10:	60b9      	str	r1, [r7, #8]
 8006f12:	4611      	mov	r1, r2
 8006f14:	461a      	mov	r2, r3
 8006f16:	460b      	mov	r3, r1
 8006f18:	80fb      	strh	r3, [r7, #6]
 8006f1a:	4613      	mov	r3, r2
 8006f1c:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8006f1e:	88bb      	ldrh	r3, [r7, #4]
 8006f20:	3301      	adds	r3, #1
 8006f22:	085b      	lsrs	r3, r3, #1
 8006f24:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006f2a:	68bb      	ldr	r3, [r7, #8]
 8006f2c:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006f2e:	88fb      	ldrh	r3, [r7, #6]
 8006f30:	005a      	lsls	r2, r3, #1
 8006f32:	69fb      	ldr	r3, [r7, #28]
 8006f34:	4413      	add	r3, r2
 8006f36:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006f3a:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8006f3c:	6a3b      	ldr	r3, [r7, #32]
 8006f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f40:	e01e      	b.n	8006f80 <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 8006f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f44:	781b      	ldrb	r3, [r3, #0]
 8006f46:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	3301      	adds	r3, #1
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	021b      	lsls	r3, r3, #8
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	461a      	mov	r2, r3
 8006f5a:	69bb      	ldr	r3, [r7, #24]
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8006f60:	697b      	ldr	r3, [r7, #20]
 8006f62:	b29a      	uxth	r2, r3
 8006f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f66:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8006f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f6a:	3302      	adds	r3, #2
 8006f6c:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	3302      	adds	r3, #2
 8006f72:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 8006f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f76:	3301      	adds	r3, #1
 8006f78:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8006f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f7c:	3b01      	subs	r3, #1
 8006f7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d1dd      	bne.n	8006f42 <USB_WritePMA+0x3a>
  }
}
 8006f86:	bf00      	nop
 8006f88:	bf00      	nop
 8006f8a:	3734      	adds	r7, #52	; 0x34
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bc80      	pop	{r7}
 8006f90:	4770      	bx	lr

08006f92 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8006f92:	b480      	push	{r7}
 8006f94:	b08b      	sub	sp, #44	; 0x2c
 8006f96:	af00      	add	r7, sp, #0
 8006f98:	60f8      	str	r0, [r7, #12]
 8006f9a:	60b9      	str	r1, [r7, #8]
 8006f9c:	4611      	mov	r1, r2
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	460b      	mov	r3, r1
 8006fa2:	80fb      	strh	r3, [r7, #6]
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8006fa8:	88bb      	ldrh	r3, [r7, #4]
 8006faa:	085b      	lsrs	r3, r3, #1
 8006fac:	b29b      	uxth	r3, r3
 8006fae:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8006fb4:	68bb      	ldr	r3, [r7, #8]
 8006fb6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8006fb8:	88fb      	ldrh	r3, [r7, #6]
 8006fba:	005a      	lsls	r2, r3, #1
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	4413      	add	r3, r2
 8006fc0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006fc4:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	627b      	str	r3, [r7, #36]	; 0x24
 8006fca:	e01b      	b.n	8007004 <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8006fcc:	6a3b      	ldr	r3, [r7, #32]
 8006fce:	881b      	ldrh	r3, [r3, #0]
 8006fd0:	b29b      	uxth	r3, r3
 8006fd2:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8006fd4:	6a3b      	ldr	r3, [r7, #32]
 8006fd6:	3302      	adds	r3, #2
 8006fd8:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	b2da      	uxtb	r2, r3
 8006fde:	69fb      	ldr	r3, [r7, #28]
 8006fe0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006fe2:	69fb      	ldr	r3, [r7, #28]
 8006fe4:	3301      	adds	r3, #1
 8006fe6:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	0a1b      	lsrs	r3, r3, #8
 8006fec:	b2da      	uxtb	r2, r3
 8006fee:	69fb      	ldr	r3, [r7, #28]
 8006ff0:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
 8006ff4:	3301      	adds	r3, #1
 8006ff6:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 8006ff8:	6a3b      	ldr	r3, [r7, #32]
 8006ffa:	3302      	adds	r3, #2
 8006ffc:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 8006ffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007000:	3b01      	subs	r3, #1
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
 8007004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007006:	2b00      	cmp	r3, #0
 8007008:	d1e0      	bne.n	8006fcc <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800700a:	88bb      	ldrh	r3, [r7, #4]
 800700c:	f003 0301 	and.w	r3, r3, #1
 8007010:	b29b      	uxth	r3, r3
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	881b      	ldrh	r3, [r3, #0]
 800701a:	b29b      	uxth	r3, r3
 800701c:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800701e:	693b      	ldr	r3, [r7, #16]
 8007020:	b2da      	uxtb	r2, r3
 8007022:	69fb      	ldr	r3, [r7, #28]
 8007024:	701a      	strb	r2, [r3, #0]
  }
}
 8007026:	bf00      	nop
 8007028:	372c      	adds	r7, #44	; 0x2c
 800702a:	46bd      	mov	sp, r7
 800702c:	bc80      	pop	{r7}
 800702e:	4770      	bx	lr

08007030 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b084      	sub	sp, #16
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	460b      	mov	r3, r1
 800703a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800703c:	2300      	movs	r3, #0
 800703e:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	7c1b      	ldrb	r3, [r3, #16]
 8007044:	2b00      	cmp	r3, #0
 8007046:	d115      	bne.n	8007074 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007048:	f44f 7300 	mov.w	r3, #512	; 0x200
 800704c:	2202      	movs	r2, #2
 800704e:	2181      	movs	r1, #129	; 0x81
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f001 fe90 	bl	8008d76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2201      	movs	r2, #1
 800705a:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800705c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007060:	2202      	movs	r2, #2
 8007062:	2101      	movs	r1, #1
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	f001 fe86 	bl	8008d76 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	2201      	movs	r2, #1
 800706e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
 8007072:	e012      	b.n	800709a <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8007074:	2340      	movs	r3, #64	; 0x40
 8007076:	2202      	movs	r2, #2
 8007078:	2181      	movs	r1, #129	; 0x81
 800707a:	6878      	ldr	r0, [r7, #4]
 800707c:	f001 fe7b 	bl	8008d76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8007086:	2340      	movs	r3, #64	; 0x40
 8007088:	2202      	movs	r2, #2
 800708a:	2101      	movs	r1, #1
 800708c:	6878      	ldr	r0, [r7, #4]
 800708e:	f001 fe72 	bl	8008d76 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2201      	movs	r2, #1
 8007096:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800709a:	2308      	movs	r3, #8
 800709c:	2203      	movs	r2, #3
 800709e:	2182      	movs	r1, #130	; 0x82
 80070a0:	6878      	ldr	r0, [r7, #4]
 80070a2:	f001 fe68 	bl	8008d76 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2201      	movs	r2, #1
 80070aa:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80070ac:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80070b0:	f001 ff88 	bl	8008fc4 <USBD_static_malloc>
 80070b4:	4602      	mov	r2, r0
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8

  if (pdev->pClassData == NULL)
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d102      	bne.n	80070cc <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 80070c6:	2301      	movs	r3, #1
 80070c8:	73fb      	strb	r3, [r7, #15]
 80070ca:	e026      	b.n	800711a <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070d2:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 80070de:	68bb      	ldr	r3, [r7, #8]
 80070e0:	2200      	movs	r2, #0
 80070e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	2200      	movs	r2, #0
 80070ea:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	7c1b      	ldrb	r3, [r3, #16]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d109      	bne.n	800710a <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80070fc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007100:	2101      	movs	r1, #1
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f001 ff28 	bl	8008f58 <USBD_LL_PrepareReceive>
 8007108:	e007      	b.n	800711a <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007110:	2340      	movs	r3, #64	; 0x40
 8007112:	2101      	movs	r1, #1
 8007114:	6878      	ldr	r0, [r7, #4]
 8007116:	f001 ff1f 	bl	8008f58 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800711a:	7bfb      	ldrb	r3, [r7, #15]
}
 800711c:	4618      	mov	r0, r3
 800711e:	3710      	adds	r7, #16
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b084      	sub	sp, #16
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
 800712c:	460b      	mov	r3, r1
 800712e:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 8007130:	2300      	movs	r3, #0
 8007132:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8007134:	2181      	movs	r1, #129	; 0x81
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f001 fe43 	bl	8008dc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2200      	movs	r2, #0
 8007140:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8007142:	2101      	movs	r1, #1
 8007144:	6878      	ldr	r0, [r7, #4]
 8007146:	f001 fe3c 	bl	8008dc2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2200      	movs	r2, #0
 800714e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8007152:	2182      	movs	r1, #130	; 0x82
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f001 fe34 	bl	8008dc2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	2200      	movs	r2, #0
 800715e:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00e      	beq.n	8007188 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800717a:	4618      	mov	r0, r3
 800717c:	f001 ff2e 	bl	8008fdc <USBD_static_free>
    pdev->pClassData = NULL;
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2200      	movs	r2, #0
 8007184:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  }

  return ret;
 8007188:	7bfb      	ldrb	r3, [r7, #15]
}
 800718a:	4618      	mov	r0, r3
 800718c:	3710      	adds	r7, #16
 800718e:	46bd      	mov	sp, r7
 8007190:	bd80      	pop	{r7, pc}

08007192 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007192:	b580      	push	{r7, lr}
 8007194:	b086      	sub	sp, #24
 8007196:	af00      	add	r7, sp, #0
 8007198:	6078      	str	r0, [r7, #4]
 800719a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80071a2:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 80071a8:	2300      	movs	r3, #0
 80071aa:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 80071ac:	2300      	movs	r3, #0
 80071ae:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	781b      	ldrb	r3, [r3, #0]
 80071b4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d039      	beq.n	8007230 <USBD_CDC_Setup+0x9e>
 80071bc:	2b20      	cmp	r3, #32
 80071be:	d17f      	bne.n	80072c0 <USBD_CDC_Setup+0x12e>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	88db      	ldrh	r3, [r3, #6]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d029      	beq.n	800721c <USBD_CDC_Setup+0x8a>
      {
        if (req->bmRequest & 0x80U)
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	781b      	ldrb	r3, [r3, #0]
 80071cc:	b25b      	sxtb	r3, r3
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	da11      	bge.n	80071f6 <USBD_CDC_Setup+0x64>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	683a      	ldr	r2, [r7, #0]
 80071dc:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 80071de:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80071e0:	683a      	ldr	r2, [r7, #0]
 80071e2:	88d2      	ldrh	r2, [r2, #6]
 80071e4:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80071e6:	6939      	ldr	r1, [r7, #16]
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	88db      	ldrh	r3, [r3, #6]
 80071ec:	461a      	mov	r2, r3
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f001 fa09 	bl	8008606 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 80071f4:	e06b      	b.n	80072ce <USBD_CDC_Setup+0x13c>
          hcdc->CmdOpCode = req->bRequest;
 80071f6:	683b      	ldr	r3, [r7, #0]
 80071f8:	785a      	ldrb	r2, [r3, #1]
 80071fa:	693b      	ldr	r3, [r7, #16]
 80071fc:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	88db      	ldrh	r3, [r3, #6]
 8007204:	b2da      	uxtb	r2, r3
 8007206:	693b      	ldr	r3, [r7, #16]
 8007208:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800720c:	6939      	ldr	r1, [r7, #16]
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	88db      	ldrh	r3, [r3, #6]
 8007212:	461a      	mov	r2, r3
 8007214:	6878      	ldr	r0, [r7, #4]
 8007216:	f001 fa24 	bl	8008662 <USBD_CtlPrepareRx>
      break;
 800721a:	e058      	b.n	80072ce <USBD_CDC_Setup+0x13c>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8007222:	689b      	ldr	r3, [r3, #8]
 8007224:	683a      	ldr	r2, [r7, #0]
 8007226:	7850      	ldrb	r0, [r2, #1]
 8007228:	2200      	movs	r2, #0
 800722a:	6839      	ldr	r1, [r7, #0]
 800722c:	4798      	blx	r3
      break;
 800722e:	e04e      	b.n	80072ce <USBD_CDC_Setup+0x13c>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	785b      	ldrb	r3, [r3, #1]
 8007234:	2b0b      	cmp	r3, #11
 8007236:	d02e      	beq.n	8007296 <USBD_CDC_Setup+0x104>
 8007238:	2b0b      	cmp	r3, #11
 800723a:	dc38      	bgt.n	80072ae <USBD_CDC_Setup+0x11c>
 800723c:	2b00      	cmp	r3, #0
 800723e:	d002      	beq.n	8007246 <USBD_CDC_Setup+0xb4>
 8007240:	2b0a      	cmp	r3, #10
 8007242:	d014      	beq.n	800726e <USBD_CDC_Setup+0xdc>
 8007244:	e033      	b.n	80072ae <USBD_CDC_Setup+0x11c>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800724c:	2b03      	cmp	r3, #3
 800724e:	d107      	bne.n	8007260 <USBD_CDC_Setup+0xce>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8007250:	f107 030c 	add.w	r3, r7, #12
 8007254:	2202      	movs	r2, #2
 8007256:	4619      	mov	r1, r3
 8007258:	6878      	ldr	r0, [r7, #4]
 800725a:	f001 f9d4 	bl	8008606 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800725e:	e02e      	b.n	80072be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007260:	6839      	ldr	r1, [r7, #0]
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f001 f965 	bl	8008532 <USBD_CtlError>
            ret = USBD_FAIL;
 8007268:	2302      	movs	r3, #2
 800726a:	75fb      	strb	r3, [r7, #23]
          break;
 800726c:	e027      	b.n	80072be <USBD_CDC_Setup+0x12c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007274:	2b03      	cmp	r3, #3
 8007276:	d107      	bne.n	8007288 <USBD_CDC_Setup+0xf6>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8007278:	f107 030f 	add.w	r3, r7, #15
 800727c:	2201      	movs	r2, #1
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f001 f9c0 	bl	8008606 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007286:	e01a      	b.n	80072be <USBD_CDC_Setup+0x12c>
            USBD_CtlError(pdev, req);
 8007288:	6839      	ldr	r1, [r7, #0]
 800728a:	6878      	ldr	r0, [r7, #4]
 800728c:	f001 f951 	bl	8008532 <USBD_CtlError>
            ret = USBD_FAIL;
 8007290:	2302      	movs	r3, #2
 8007292:	75fb      	strb	r3, [r7, #23]
          break;
 8007294:	e013      	b.n	80072be <USBD_CDC_Setup+0x12c>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800729c:	2b03      	cmp	r3, #3
 800729e:	d00d      	beq.n	80072bc <USBD_CDC_Setup+0x12a>
          {
            USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f001 f945 	bl	8008532 <USBD_CtlError>
            ret = USBD_FAIL;
 80072a8:	2302      	movs	r3, #2
 80072aa:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80072ac:	e006      	b.n	80072bc <USBD_CDC_Setup+0x12a>

        default:
          USBD_CtlError(pdev, req);
 80072ae:	6839      	ldr	r1, [r7, #0]
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f001 f93e 	bl	8008532 <USBD_CtlError>
          ret = USBD_FAIL;
 80072b6:	2302      	movs	r3, #2
 80072b8:	75fb      	strb	r3, [r7, #23]
          break;
 80072ba:	e000      	b.n	80072be <USBD_CDC_Setup+0x12c>
          break;
 80072bc:	bf00      	nop
      }
      break;
 80072be:	e006      	b.n	80072ce <USBD_CDC_Setup+0x13c>

    default:
      USBD_CtlError(pdev, req);
 80072c0:	6839      	ldr	r1, [r7, #0]
 80072c2:	6878      	ldr	r0, [r7, #4]
 80072c4:	f001 f935 	bl	8008532 <USBD_CtlError>
      ret = USBD_FAIL;
 80072c8:	2302      	movs	r3, #2
 80072ca:	75fb      	strb	r3, [r7, #23]
      break;
 80072cc:	bf00      	nop
  }

  return ret;
 80072ce:	7dfb      	ldrb	r3, [r7, #23]
}
 80072d0:	4618      	mov	r0, r3
 80072d2:	3718      	adds	r7, #24
 80072d4:	46bd      	mov	sp, r7
 80072d6:	bd80      	pop	{r7, pc}

080072d8 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	460b      	mov	r3, r1
 80072e2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072ea:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80072f2:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d03a      	beq.n	8007374 <USBD_CDC_DataIn+0x9c>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 80072fe:	78fa      	ldrb	r2, [r7, #3]
 8007300:	6879      	ldr	r1, [r7, #4]
 8007302:	4613      	mov	r3, r2
 8007304:	009b      	lsls	r3, r3, #2
 8007306:	4413      	add	r3, r2
 8007308:	009b      	lsls	r3, r3, #2
 800730a:	440b      	add	r3, r1
 800730c:	331c      	adds	r3, #28
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d029      	beq.n	8007368 <USBD_CDC_DataIn+0x90>
 8007314:	78fa      	ldrb	r2, [r7, #3]
 8007316:	6879      	ldr	r1, [r7, #4]
 8007318:	4613      	mov	r3, r2
 800731a:	009b      	lsls	r3, r3, #2
 800731c:	4413      	add	r3, r2
 800731e:	009b      	lsls	r3, r3, #2
 8007320:	440b      	add	r3, r1
 8007322:	331c      	adds	r3, #28
 8007324:	681a      	ldr	r2, [r3, #0]
 8007326:	78f9      	ldrb	r1, [r7, #3]
 8007328:	68b8      	ldr	r0, [r7, #8]
 800732a:	460b      	mov	r3, r1
 800732c:	009b      	lsls	r3, r3, #2
 800732e:	440b      	add	r3, r1
 8007330:	00db      	lsls	r3, r3, #3
 8007332:	4403      	add	r3, r0
 8007334:	3338      	adds	r3, #56	; 0x38
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	fbb2 f1f3 	udiv	r1, r2, r3
 800733c:	fb01 f303 	mul.w	r3, r1, r3
 8007340:	1ad3      	subs	r3, r2, r3
 8007342:	2b00      	cmp	r3, #0
 8007344:	d110      	bne.n	8007368 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	6879      	ldr	r1, [r7, #4]
 800734a:	4613      	mov	r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	4413      	add	r3, r2
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	440b      	add	r3, r1
 8007354:	331c      	adds	r3, #28
 8007356:	2200      	movs	r2, #0
 8007358:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800735a:	78f9      	ldrb	r1, [r7, #3]
 800735c:	2300      	movs	r3, #0
 800735e:	2200      	movs	r2, #0
 8007360:	6878      	ldr	r0, [r7, #4]
 8007362:	f001 fdd6 	bl	8008f12 <USBD_LL_Transmit>
 8007366:	e003      	b.n	8007370 <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2200      	movs	r2, #0
 800736c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 8007370:	2300      	movs	r3, #0
 8007372:	e000      	b.n	8007376 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 8007374:	2302      	movs	r3, #2
  }
}
 8007376:	4618      	mov	r0, r3
 8007378:	3710      	adds	r7, #16
 800737a:	46bd      	mov	sp, r7
 800737c:	bd80      	pop	{r7, pc}

0800737e <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b084      	sub	sp, #16
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	460b      	mov	r3, r1
 8007388:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007390:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007392:	78fb      	ldrb	r3, [r7, #3]
 8007394:	4619      	mov	r1, r3
 8007396:	6878      	ldr	r0, [r7, #4]
 8007398:	f001 fe01 	bl	8008f9e <USBD_LL_GetRxDataSize>
 800739c:	4602      	mov	r2, r0
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00d      	beq.n	80073ca <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073b4:	68db      	ldr	r3, [r3, #12]
 80073b6:	68fa      	ldr	r2, [r7, #12]
 80073b8:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80073c2:	4611      	mov	r1, r2
 80073c4:	4798      	blx	r3

    return USBD_OK;
 80073c6:	2300      	movs	r3, #0
 80073c8:	e000      	b.n	80073cc <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 80073ca:	2302      	movs	r3, #2
  }
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b084      	sub	sp, #16
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80073e2:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d015      	beq.n	800741a <USBD_CDC_EP0_RxReady+0x46>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80073f4:	2bff      	cmp	r3, #255	; 0xff
 80073f6:	d010      	beq.n	800741a <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 8007406:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8007408:	68fa      	ldr	r2, [r7, #12]
 800740a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800740e:	b292      	uxth	r2, r2
 8007410:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	22ff      	movs	r2, #255	; 0xff
 8007416:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800741a:	2300      	movs	r3, #0
}
 800741c:	4618      	mov	r0, r3
 800741e:	3710      	adds	r7, #16
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}

08007424 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8007424:	b480      	push	{r7}
 8007426:	b083      	sub	sp, #12
 8007428:	af00      	add	r7, sp, #0
 800742a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2243      	movs	r2, #67	; 0x43
 8007430:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8007432:	4b03      	ldr	r3, [pc, #12]	; (8007440 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 8007434:	4618      	mov	r0, r3
 8007436:	370c      	adds	r7, #12
 8007438:	46bd      	mov	sp, r7
 800743a:	bc80      	pop	{r7}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop
 8007440:	2000009c 	.word	0x2000009c

08007444 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007444:	b480      	push	{r7}
 8007446:	b083      	sub	sp, #12
 8007448:	af00      	add	r7, sp, #0
 800744a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2243      	movs	r2, #67	; 0x43
 8007450:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8007452:	4b03      	ldr	r3, [pc, #12]	; (8007460 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8007454:	4618      	mov	r0, r3
 8007456:	370c      	adds	r7, #12
 8007458:	46bd      	mov	sp, r7
 800745a:	bc80      	pop	{r7}
 800745c:	4770      	bx	lr
 800745e:	bf00      	nop
 8007460:	20000058 	.word	0x20000058

08007464 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8007464:	b480      	push	{r7}
 8007466:	b083      	sub	sp, #12
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	2243      	movs	r2, #67	; 0x43
 8007470:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8007472:	4b03      	ldr	r3, [pc, #12]	; (8007480 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8007474:	4618      	mov	r0, r3
 8007476:	370c      	adds	r7, #12
 8007478:	46bd      	mov	sp, r7
 800747a:	bc80      	pop	{r7}
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	200000e0 	.word	0x200000e0

08007484 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007484:	b480      	push	{r7}
 8007486:	b083      	sub	sp, #12
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	220a      	movs	r2, #10
 8007490:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8007492:	4b03      	ldr	r3, [pc, #12]	; (80074a0 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007494:	4618      	mov	r0, r3
 8007496:	370c      	adds	r7, #12
 8007498:	46bd      	mov	sp, r7
 800749a:	bc80      	pop	{r7}
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000014 	.word	0x20000014

080074a4 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
 80074aa:	6078      	str	r0, [r7, #4]
 80074ac:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 80074ae:	2302      	movs	r3, #2
 80074b0:	73fb      	strb	r3, [r7, #15]

  if (fops != NULL)
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d005      	beq.n	80074c4 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData = fops;
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	683a      	ldr	r2, [r7, #0]
 80074bc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    ret = USBD_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80074c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3714      	adds	r7, #20
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bc80      	pop	{r7}
 80074ce:	4770      	bx	lr

080074d0 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 80074d0:	b480      	push	{r7}
 80074d2:	b087      	sub	sp, #28
 80074d4:	af00      	add	r7, sp, #0
 80074d6:	60f8      	str	r0, [r7, #12]
 80074d8:	60b9      	str	r1, [r7, #8]
 80074da:	4613      	mov	r3, r2
 80074dc:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80074e4:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 80074e6:	697b      	ldr	r3, [r7, #20]
 80074e8:	68ba      	ldr	r2, [r7, #8]
 80074ea:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80074ee:	88fa      	ldrh	r2, [r7, #6]
 80074f0:	697b      	ldr	r3, [r7, #20]
 80074f2:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bc80      	pop	{r7}
 8007500:	4770      	bx	lr

08007502 <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8007502:	b480      	push	{r7}
 8007504:	b085      	sub	sp, #20
 8007506:	af00      	add	r7, sp, #0
 8007508:	6078      	str	r0, [r7, #4]
 800750a:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007512:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	683a      	ldr	r2, [r7, #0]
 8007518:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800751c:	2300      	movs	r3, #0
}
 800751e:	4618      	mov	r0, r3
 8007520:	3714      	adds	r7, #20
 8007522:	46bd      	mov	sp, r7
 8007524:	bc80      	pop	{r7}
 8007526:	4770      	bx	lr

08007528 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8007528:	b580      	push	{r7, lr}
 800752a:	b084      	sub	sp, #16
 800752c:	af00      	add	r7, sp, #0
 800752e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007536:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800753e:	2b00      	cmp	r3, #0
 8007540:	d01c      	beq.n	800757c <USBD_CDC_TransmitPacket+0x54>
  {
    if (hcdc->TxState == 0U)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007548:	2b00      	cmp	r3, #0
 800754a:	d115      	bne.n	8007578 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2201      	movs	r2, #1
 8007550:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8007554:	68fb      	ldr	r3, [r7, #12]
 8007556:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800756a:	b29b      	uxth	r3, r3
 800756c:	2181      	movs	r1, #129	; 0x81
 800756e:	6878      	ldr	r0, [r7, #4]
 8007570:	f001 fccf 	bl	8008f12 <USBD_LL_Transmit>

      return USBD_OK;
 8007574:	2300      	movs	r3, #0
 8007576:	e002      	b.n	800757e <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 8007578:	2301      	movs	r3, #1
 800757a:	e000      	b.n	800757e <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800757c:	2302      	movs	r3, #2
  }
}
 800757e:	4618      	mov	r0, r3
 8007580:	3710      	adds	r7, #16
 8007582:	46bd      	mov	sp, r7
 8007584:	bd80      	pop	{r7, pc}

08007586 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007586:	b580      	push	{r7, lr}
 8007588:	b084      	sub	sp, #16
 800758a:	af00      	add	r7, sp, #0
 800758c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007594:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800759c:	2b00      	cmp	r3, #0
 800759e:	d017      	beq.n	80075d0 <USBD_CDC_ReceivePacket+0x4a>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	7c1b      	ldrb	r3, [r3, #16]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d109      	bne.n	80075bc <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075ae:	f44f 7300 	mov.w	r3, #512	; 0x200
 80075b2:	2101      	movs	r1, #1
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f001 fccf 	bl	8008f58 <USBD_LL_PrepareReceive>
 80075ba:	e007      	b.n	80075cc <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80075c2:	2340      	movs	r3, #64	; 0x40
 80075c4:	2101      	movs	r1, #1
 80075c6:	6878      	ldr	r0, [r7, #4]
 80075c8:	f001 fcc6 	bl	8008f58 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80075cc:	2300      	movs	r3, #0
 80075ce:	e000      	b.n	80075d2 <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 80075d0:	2302      	movs	r3, #2
  }
}
 80075d2:	4618      	mov	r0, r3
 80075d4:	3710      	adds	r7, #16
 80075d6:	46bd      	mov	sp, r7
 80075d8:	bd80      	pop	{r7, pc}

080075da <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80075da:	b580      	push	{r7, lr}
 80075dc:	b084      	sub	sp, #16
 80075de:	af00      	add	r7, sp, #0
 80075e0:	60f8      	str	r0, [r7, #12]
 80075e2:	60b9      	str	r1, [r7, #8]
 80075e4:	4613      	mov	r3, r2
 80075e6:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d101      	bne.n	80075f2 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80075ee:	2302      	movs	r3, #2
 80075f0:	e01a      	b.n	8007628 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d003      	beq.n	8007604 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	2200      	movs	r2, #0
 8007600:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d003      	beq.n	8007612 <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	68ba      	ldr	r2, [r7, #8]
 800760e:	f8c3 22b0 	str.w	r2, [r3, #688]	; 0x2b0
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	2201      	movs	r2, #1
 8007616:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	79fa      	ldrb	r2, [r7, #7]
 800761e:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f001 fb33 	bl	8008c8c <USBD_LL_Init>

  return USBD_OK;
 8007626:	2300      	movs	r3, #0
}
 8007628:	4618      	mov	r0, r3
 800762a:	3710      	adds	r7, #16
 800762c:	46bd      	mov	sp, r7
 800762e:	bd80      	pop	{r7, pc}

08007630 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007630:	b480      	push	{r7}
 8007632:	b085      	sub	sp, #20
 8007634:	af00      	add	r7, sp, #0
 8007636:	6078      	str	r0, [r7, #4]
 8007638:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 800763a:	2300      	movs	r3, #0
 800763c:	73fb      	strb	r3, [r7, #15]
  if (pclass != NULL)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b00      	cmp	r3, #0
 8007642:	d006      	beq.n	8007652 <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
    status = USBD_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	73fb      	strb	r3, [r7, #15]
 8007650:	e001      	b.n	8007656 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8007652:	2302      	movs	r3, #2
 8007654:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007656:	7bfb      	ldrb	r3, [r7, #15]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3714      	adds	r7, #20
 800765c:	46bd      	mov	sp, r7
 800765e:	bc80      	pop	{r7}
 8007660:	4770      	bx	lr

08007662 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007662:	b580      	push	{r7, lr}
 8007664:	b082      	sub	sp, #8
 8007666:	af00      	add	r7, sp, #0
 8007668:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800766a:	6878      	ldr	r0, [r7, #4]
 800766c:	f001 fb68 	bl	8008d40 <USBD_LL_Start>

  return USBD_OK;
 8007670:	2300      	movs	r3, #0
}
 8007672:	4618      	mov	r0, r3
 8007674:	3708      	adds	r7, #8
 8007676:	46bd      	mov	sp, r7
 8007678:	bd80      	pop	{r7, pc}

0800767a <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800767a:	b480      	push	{r7}
 800767c:	b083      	sub	sp, #12
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007682:	2300      	movs	r3, #0
}
 8007684:	4618      	mov	r0, r3
 8007686:	370c      	adds	r7, #12
 8007688:	46bd      	mov	sp, r7
 800768a:	bc80      	pop	{r7}
 800768c:	4770      	bx	lr

0800768e <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800768e:	b580      	push	{r7, lr}
 8007690:	b084      	sub	sp, #16
 8007692:	af00      	add	r7, sp, #0
 8007694:	6078      	str	r0, [r7, #4]
 8007696:	460b      	mov	r3, r1
 8007698:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800769a:	2302      	movs	r3, #2
 800769c:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d00c      	beq.n	80076c2 <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	78fa      	ldrb	r2, [r7, #3]
 80076b2:	4611      	mov	r1, r2
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	4798      	blx	r3
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d101      	bne.n	80076c2 <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 80076be:	2300      	movs	r3, #0
 80076c0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 80076c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076c4:	4618      	mov	r0, r3
 80076c6:	3710      	adds	r7, #16
 80076c8:	46bd      	mov	sp, r7
 80076ca:	bd80      	pop	{r7, pc}

080076cc <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 80076cc:	b580      	push	{r7, lr}
 80076ce:	b082      	sub	sp, #8
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	6078      	str	r0, [r7, #4]
 80076d4:	460b      	mov	r3, r1
 80076d6:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	4798      	blx	r3

  return USBD_OK;
 80076e8:	2300      	movs	r3, #0
}
 80076ea:	4618      	mov	r0, r3
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}

080076f2 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80076f2:	b580      	push	{r7, lr}
 80076f4:	b082      	sub	sp, #8
 80076f6:	af00      	add	r7, sp, #0
 80076f8:	6078      	str	r0, [r7, #4]
 80076fa:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	4618      	mov	r0, r3
 8007706:	f000 fed8 	bl	80084ba <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	2201      	movs	r2, #1
 800770e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007718:	461a      	mov	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	2b02      	cmp	r3, #2
 800772c:	d016      	beq.n	800775c <USBD_LL_SetupStage+0x6a>
 800772e:	2b02      	cmp	r3, #2
 8007730:	d81c      	bhi.n	800776c <USBD_LL_SetupStage+0x7a>
 8007732:	2b00      	cmp	r3, #0
 8007734:	d002      	beq.n	800773c <USBD_LL_SetupStage+0x4a>
 8007736:	2b01      	cmp	r3, #1
 8007738:	d008      	beq.n	800774c <USBD_LL_SetupStage+0x5a>
 800773a:	e017      	b.n	800776c <USBD_LL_SetupStage+0x7a>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007742:	4619      	mov	r1, r3
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 f9cb 	bl	8007ae0 <USBD_StdDevReq>
      break;
 800774a:	e01a      	b.n	8007782 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007752:	4619      	mov	r1, r3
 8007754:	6878      	ldr	r0, [r7, #4]
 8007756:	f000 fa2d 	bl	8007bb4 <USBD_StdItfReq>
      break;
 800775a:	e012      	b.n	8007782 <USBD_LL_SetupStage+0x90>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	f503 732a 	add.w	r3, r3, #680	; 0x2a8
 8007762:	4619      	mov	r1, r3
 8007764:	6878      	ldr	r0, [r7, #4]
 8007766:	f000 fa6d 	bl	8007c44 <USBD_StdEPReq>
      break;
 800776a:	e00a      	b.n	8007782 <USBD_LL_SetupStage+0x90>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8007772:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007776:	b2db      	uxtb	r3, r3
 8007778:	4619      	mov	r1, r3
 800777a:	6878      	ldr	r0, [r7, #4]
 800777c:	f001 fb40 	bl	8008e00 <USBD_LL_StallEP>
      break;
 8007780:	bf00      	nop
  }

  return USBD_OK;
 8007782:	2300      	movs	r3, #0
}
 8007784:	4618      	mov	r0, r3
 8007786:	3708      	adds	r7, #8
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800778c:	b580      	push	{r7, lr}
 800778e:	b086      	sub	sp, #24
 8007790:	af00      	add	r7, sp, #0
 8007792:	60f8      	str	r0, [r7, #12]
 8007794:	460b      	mov	r3, r1
 8007796:	607a      	str	r2, [r7, #4]
 8007798:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800779a:	7afb      	ldrb	r3, [r7, #11]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d14b      	bne.n	8007838 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 80077a0:	68fb      	ldr	r3, [r7, #12]
 80077a2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80077a6:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80077ae:	2b03      	cmp	r3, #3
 80077b0:	d134      	bne.n	800781c <USBD_LL_DataOutStage+0x90>
    {
      if (pep->rem_length > pep->maxpacket)
 80077b2:	697b      	ldr	r3, [r7, #20]
 80077b4:	68da      	ldr	r2, [r3, #12]
 80077b6:	697b      	ldr	r3, [r7, #20]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d919      	bls.n	80077f2 <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 80077be:	697b      	ldr	r3, [r7, #20]
 80077c0:	68da      	ldr	r2, [r3, #12]
 80077c2:	697b      	ldr	r3, [r7, #20]
 80077c4:	691b      	ldr	r3, [r3, #16]
 80077c6:	1ad2      	subs	r2, r2, r3
 80077c8:	697b      	ldr	r3, [r7, #20]
 80077ca:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077cc:	697b      	ldr	r3, [r7, #20]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	697b      	ldr	r3, [r7, #20]
 80077d2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d203      	bcs.n	80077e0 <USBD_LL_DataOutStage+0x54>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 80077dc:	b29b      	uxth	r3, r3
 80077de:	e002      	b.n	80077e6 <USBD_LL_DataOutStage+0x5a>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 80077e0:	697b      	ldr	r3, [r7, #20]
 80077e2:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 80077e4:	b29b      	uxth	r3, r3
 80077e6:	461a      	mov	r2, r3
 80077e8:	6879      	ldr	r1, [r7, #4]
 80077ea:	68f8      	ldr	r0, [r7, #12]
 80077ec:	f000 ff57 	bl	800869e <USBD_CtlContinueRx>
 80077f0:	e038      	b.n	8007864 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80077f8:	691b      	ldr	r3, [r3, #16]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00a      	beq.n	8007814 <USBD_LL_DataOutStage+0x88>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8007804:	2b03      	cmp	r3, #3
 8007806:	d105      	bne.n	8007814 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800780e:	691b      	ldr	r3, [r3, #16]
 8007810:	68f8      	ldr	r0, [r7, #12]
 8007812:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8007814:	68f8      	ldr	r0, [r7, #12]
 8007816:	f000 ff54 	bl	80086c2 <USBD_CtlSendStatus>
 800781a:	e023      	b.n	8007864 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007822:	2b05      	cmp	r3, #5
 8007824:	d11e      	bne.n	8007864 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	2200      	movs	r2, #0
 800782a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
        USBD_LL_StallEP(pdev, 0U);
 800782e:	2100      	movs	r1, #0
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f001 fae5 	bl	8008e00 <USBD_LL_StallEP>
 8007836:	e015      	b.n	8007864 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800783e:	699b      	ldr	r3, [r3, #24]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d00d      	beq.n	8007860 <USBD_LL_DataOutStage+0xd4>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataOut != NULL) &&
 800784a:	2b03      	cmp	r3, #3
 800784c:	d108      	bne.n	8007860 <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007854:	699b      	ldr	r3, [r3, #24]
 8007856:	7afa      	ldrb	r2, [r7, #11]
 8007858:	4611      	mov	r1, r2
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	4798      	blx	r3
 800785e:	e001      	b.n	8007864 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8007860:	2302      	movs	r3, #2
 8007862:	e000      	b.n	8007866 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 8007864:	2300      	movs	r3, #0
}
 8007866:	4618      	mov	r0, r3
 8007868:	3718      	adds	r7, #24
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b086      	sub	sp, #24
 8007872:	af00      	add	r7, sp, #0
 8007874:	60f8      	str	r0, [r7, #12]
 8007876:	460b      	mov	r3, r1
 8007878:	607a      	str	r2, [r7, #4]
 800787a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 800787c:	7afb      	ldrb	r3, [r7, #11]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d17f      	bne.n	8007982 <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	3314      	adds	r3, #20
 8007886:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800788e:	2b02      	cmp	r3, #2
 8007890:	d15c      	bne.n	800794c <USBD_LL_DataInStage+0xde>
    {
      if (pep->rem_length > pep->maxpacket)
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	68da      	ldr	r2, [r3, #12]
 8007896:	697b      	ldr	r3, [r7, #20]
 8007898:	691b      	ldr	r3, [r3, #16]
 800789a:	429a      	cmp	r2, r3
 800789c:	d915      	bls.n	80078ca <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800789e:	697b      	ldr	r3, [r7, #20]
 80078a0:	68da      	ldr	r2, [r3, #12]
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	1ad2      	subs	r2, r2, r3
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80078ac:	697b      	ldr	r3, [r7, #20]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	b29b      	uxth	r3, r3
 80078b2:	461a      	mov	r2, r3
 80078b4:	6879      	ldr	r1, [r7, #4]
 80078b6:	68f8      	ldr	r0, [r7, #12]
 80078b8:	f000 fec1 	bl	800863e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80078bc:	2300      	movs	r3, #0
 80078be:	2200      	movs	r2, #0
 80078c0:	2100      	movs	r1, #0
 80078c2:	68f8      	ldr	r0, [r7, #12]
 80078c4:	f001 fb48 	bl	8008f58 <USBD_LL_PrepareReceive>
 80078c8:	e04e      	b.n	8007968 <USBD_LL_DataInStage+0xfa>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078ca:	697b      	ldr	r3, [r7, #20]
 80078cc:	689b      	ldr	r3, [r3, #8]
 80078ce:	697a      	ldr	r2, [r7, #20]
 80078d0:	6912      	ldr	r2, [r2, #16]
 80078d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80078d6:	fb01 f202 	mul.w	r2, r1, r2
 80078da:	1a9b      	subs	r3, r3, r2
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d11c      	bne.n	800791a <USBD_LL_DataInStage+0xac>
            (pep->total_length >= pep->maxpacket) &&
 80078e0:	697b      	ldr	r3, [r7, #20]
 80078e2:	689a      	ldr	r2, [r3, #8]
 80078e4:	697b      	ldr	r3, [r7, #20]
 80078e6:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d316      	bcc.n	800791a <USBD_LL_DataInStage+0xac>
            (pep->total_length < pdev->ep0_data_len))
 80078ec:	697b      	ldr	r3, [r7, #20]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80078f6:	429a      	cmp	r2, r3
 80078f8:	d20f      	bcs.n	800791a <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80078fa:	2200      	movs	r2, #0
 80078fc:	2100      	movs	r1, #0
 80078fe:	68f8      	ldr	r0, [r7, #12]
 8007900:	f000 fe9d 	bl	800863e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	2200      	movs	r2, #0
 8007908:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800790c:	2300      	movs	r3, #0
 800790e:	2200      	movs	r2, #0
 8007910:	2100      	movs	r1, #0
 8007912:	68f8      	ldr	r0, [r7, #12]
 8007914:	f001 fb20 	bl	8008f58 <USBD_LL_PrepareReceive>
 8007918:	e026      	b.n	8007968 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007920:	68db      	ldr	r3, [r3, #12]
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <USBD_LL_DataInStage+0xce>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 800792c:	2b03      	cmp	r3, #3
 800792e:	d105      	bne.n	800793c <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007936:	68db      	ldr	r3, [r3, #12]
 8007938:	68f8      	ldr	r0, [r7, #12]
 800793a:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800793c:	2180      	movs	r1, #128	; 0x80
 800793e:	68f8      	ldr	r0, [r7, #12]
 8007940:	f001 fa5e 	bl	8008e00 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8007944:	68f8      	ldr	r0, [r7, #12]
 8007946:	f000 fecf 	bl	80086e8 <USBD_CtlReceiveStatus>
 800794a:	e00d      	b.n	8007968 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007952:	2b04      	cmp	r3, #4
 8007954:	d004      	beq.n	8007960 <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800795c:	2b00      	cmp	r3, #0
 800795e:	d103      	bne.n	8007968 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 8007960:	2180      	movs	r1, #128	; 0x80
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f001 fa4c 	bl	8008e00 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800796e:	2b01      	cmp	r3, #1
 8007970:	d11d      	bne.n	80079ae <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 8007972:	68f8      	ldr	r0, [r7, #12]
 8007974:	f7ff fe81 	bl	800767a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	2200      	movs	r2, #0
 800797c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007980:	e015      	b.n	80079ae <USBD_LL_DataInStage+0x140>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007988:	695b      	ldr	r3, [r3, #20]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d00d      	beq.n	80079aa <USBD_LL_DataInStage+0x13c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
  else if ((pdev->pClass->DataIn != NULL) &&
 8007994:	2b03      	cmp	r3, #3
 8007996:	d108      	bne.n	80079aa <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800799e:	695b      	ldr	r3, [r3, #20]
 80079a0:	7afa      	ldrb	r2, [r7, #11]
 80079a2:	4611      	mov	r1, r2
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	4798      	blx	r3
 80079a8:	e001      	b.n	80079ae <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 80079aa:	2302      	movs	r3, #2
 80079ac:	e000      	b.n	80079b0 <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 80079ae:	2300      	movs	r3, #0
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3718      	adds	r7, #24
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}

080079b8 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80079b8:	b580      	push	{r7, lr}
 80079ba:	b082      	sub	sp, #8
 80079bc:	af00      	add	r7, sp, #0
 80079be:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079c0:	2340      	movs	r3, #64	; 0x40
 80079c2:	2200      	movs	r2, #0
 80079c4:	2100      	movs	r1, #0
 80079c6:	6878      	ldr	r0, [r7, #4]
 80079c8:	f001 f9d5 	bl	8008d76 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2240      	movs	r2, #64	; 0x40
 80079d8:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80079dc:	2340      	movs	r3, #64	; 0x40
 80079de:	2200      	movs	r2, #0
 80079e0:	2180      	movs	r1, #128	; 0x80
 80079e2:	6878      	ldr	r0, [r7, #4]
 80079e4:	f001 f9c7 	bl	8008d76 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2201      	movs	r2, #1
 80079ec:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2240      	movs	r2, #64	; 0x40
 80079f2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2200      	movs	r2, #0
 8007a00:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClassData)
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007a22:	685b      	ldr	r3, [r3, #4]
 8007a24:	687a      	ldr	r2, [r7, #4]
 8007a26:	6852      	ldr	r2, [r2, #4]
 8007a28:	b2d2      	uxtb	r2, r2
 8007a2a:	4611      	mov	r1, r2
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	4798      	blx	r3
  }

  return USBD_OK;
 8007a30:	2300      	movs	r3, #0
}
 8007a32:	4618      	mov	r0, r3
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007a3a:	b480      	push	{r7}
 8007a3c:	b083      	sub	sp, #12
 8007a3e:	af00      	add	r7, sp, #0
 8007a40:	6078      	str	r0, [r7, #4]
 8007a42:	460b      	mov	r3, r1
 8007a44:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	78fa      	ldrb	r2, [r7, #3]
 8007a4a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007a4c:	2300      	movs	r3, #0
}
 8007a4e:	4618      	mov	r0, r3
 8007a50:	370c      	adds	r7, #12
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bc80      	pop	{r7}
 8007a56:	4770      	bx	lr

08007a58 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b083      	sub	sp, #12
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f893 229c 	ldrb.w	r2, [r3, #668]	; 0x29c
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	2204      	movs	r2, #4
 8007a70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007a74:	2300      	movs	r3, #0
}
 8007a76:	4618      	mov	r0, r3
 8007a78:	370c      	adds	r7, #12
 8007a7a:	46bd      	mov	sp, r7
 8007a7c:	bc80      	pop	{r7}
 8007a7e:	4770      	bx	lr

08007a80 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007a80:	b480      	push	{r7}
 8007a82:	b083      	sub	sp, #12
 8007a84:	af00      	add	r7, sp, #0
 8007a86:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007a8e:	2b04      	cmp	r3, #4
 8007a90:	d105      	bne.n	8007a9e <USBD_LL_Resume+0x1e>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	f893 229d 	ldrb.w	r2, [r3, #669]	; 0x29d
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007a9e:	2300      	movs	r3, #0
}
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bc80      	pop	{r7}
 8007aa8:	4770      	bx	lr

08007aaa <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007aaa:	b580      	push	{r7, lr}
 8007aac:	b082      	sub	sp, #8
 8007aae:	af00      	add	r7, sp, #0
 8007ab0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007ab8:	2b03      	cmp	r3, #3
 8007aba:	d10b      	bne.n	8007ad4 <USBD_LL_SOF+0x2a>
  {
    if (pdev->pClass->SOF != NULL)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ac2:	69db      	ldr	r3, [r3, #28]
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d005      	beq.n	8007ad4 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007ace:	69db      	ldr	r3, [r3, #28]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007ad4:	2300      	movs	r3, #0
}
 8007ad6:	4618      	mov	r0, r3
 8007ad8:	3708      	adds	r7, #8
 8007ada:	46bd      	mov	sp, r7
 8007adc:	bd80      	pop	{r7, pc}
	...

08007ae0 <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 8007ae0:	b580      	push	{r7, lr}
 8007ae2:	b084      	sub	sp, #16
 8007ae4:	af00      	add	r7, sp, #0
 8007ae6:	6078      	str	r0, [r7, #4]
 8007ae8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	781b      	ldrb	r3, [r3, #0]
 8007af2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007af6:	2b40      	cmp	r3, #64	; 0x40
 8007af8:	d005      	beq.n	8007b06 <USBD_StdDevReq+0x26>
 8007afa:	2b40      	cmp	r3, #64	; 0x40
 8007afc:	d84f      	bhi.n	8007b9e <USBD_StdDevReq+0xbe>
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d009      	beq.n	8007b16 <USBD_StdDevReq+0x36>
 8007b02:	2b20      	cmp	r3, #32
 8007b04:	d14b      	bne.n	8007b9e <USBD_StdDevReq+0xbe>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007b0c:	689b      	ldr	r3, [r3, #8]
 8007b0e:	6839      	ldr	r1, [r7, #0]
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	4798      	blx	r3
      break;
 8007b14:	e048      	b.n	8007ba8 <USBD_StdDevReq+0xc8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007b16:	683b      	ldr	r3, [r7, #0]
 8007b18:	785b      	ldrb	r3, [r3, #1]
 8007b1a:	2b09      	cmp	r3, #9
 8007b1c:	d839      	bhi.n	8007b92 <USBD_StdDevReq+0xb2>
 8007b1e:	a201      	add	r2, pc, #4	; (adr r2, 8007b24 <USBD_StdDevReq+0x44>)
 8007b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b24:	08007b75 	.word	0x08007b75
 8007b28:	08007b89 	.word	0x08007b89
 8007b2c:	08007b93 	.word	0x08007b93
 8007b30:	08007b7f 	.word	0x08007b7f
 8007b34:	08007b93 	.word	0x08007b93
 8007b38:	08007b57 	.word	0x08007b57
 8007b3c:	08007b4d 	.word	0x08007b4d
 8007b40:	08007b93 	.word	0x08007b93
 8007b44:	08007b6b 	.word	0x08007b6b
 8007b48:	08007b61 	.word	0x08007b61
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 f9dc 	bl	8007f0c <USBD_GetDescriptor>
          break;
 8007b54:	e022      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8007b56:	6839      	ldr	r1, [r7, #0]
 8007b58:	6878      	ldr	r0, [r7, #4]
 8007b5a:	f000 fb3f 	bl	80081dc <USBD_SetAddress>
          break;
 8007b5e:	e01d      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 8007b60:	6839      	ldr	r1, [r7, #0]
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 fb7e 	bl	8008264 <USBD_SetConfig>
          break;
 8007b68:	e018      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8007b6a:	6839      	ldr	r1, [r7, #0]
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 fc07 	bl	8008380 <USBD_GetConfig>
          break;
 8007b72:	e013      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8007b74:	6839      	ldr	r1, [r7, #0]
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 fc37 	bl	80083ea <USBD_GetStatus>
          break;
 8007b7c:	e00e      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8007b7e:	6839      	ldr	r1, [r7, #0]
 8007b80:	6878      	ldr	r0, [r7, #4]
 8007b82:	f000 fc65 	bl	8008450 <USBD_SetFeature>
          break;
 8007b86:	e009      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8007b88:	6839      	ldr	r1, [r7, #0]
 8007b8a:	6878      	ldr	r0, [r7, #4]
 8007b8c:	f000 fc74 	bl	8008478 <USBD_ClrFeature>
          break;
 8007b90:	e004      	b.n	8007b9c <USBD_StdDevReq+0xbc>

        default:
          USBD_CtlError(pdev, req);
 8007b92:	6839      	ldr	r1, [r7, #0]
 8007b94:	6878      	ldr	r0, [r7, #4]
 8007b96:	f000 fccc 	bl	8008532 <USBD_CtlError>
          break;
 8007b9a:	bf00      	nop
      }
      break;
 8007b9c:	e004      	b.n	8007ba8 <USBD_StdDevReq+0xc8>

    default:
      USBD_CtlError(pdev, req);
 8007b9e:	6839      	ldr	r1, [r7, #0]
 8007ba0:	6878      	ldr	r0, [r7, #4]
 8007ba2:	f000 fcc6 	bl	8008532 <USBD_CtlError>
      break;
 8007ba6:	bf00      	nop
  }

  return ret;
 8007ba8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3710      	adds	r7, #16
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}
 8007bb2:	bf00      	nop

08007bb4 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8007bb4:	b580      	push	{r7, lr}
 8007bb6:	b084      	sub	sp, #16
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
 8007bbc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007bbe:	2300      	movs	r3, #0
 8007bc0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007bc2:	683b      	ldr	r3, [r7, #0]
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007bca:	2b40      	cmp	r3, #64	; 0x40
 8007bcc:	d005      	beq.n	8007bda <USBD_StdItfReq+0x26>
 8007bce:	2b40      	cmp	r3, #64	; 0x40
 8007bd0:	d82e      	bhi.n	8007c30 <USBD_StdItfReq+0x7c>
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d001      	beq.n	8007bda <USBD_StdItfReq+0x26>
 8007bd6:	2b20      	cmp	r3, #32
 8007bd8:	d12a      	bne.n	8007c30 <USBD_StdItfReq+0x7c>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007be0:	3b01      	subs	r3, #1
 8007be2:	2b02      	cmp	r3, #2
 8007be4:	d81d      	bhi.n	8007c22 <USBD_StdItfReq+0x6e>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007be6:	683b      	ldr	r3, [r7, #0]
 8007be8:	889b      	ldrh	r3, [r3, #4]
 8007bea:	b2db      	uxtb	r3, r3
 8007bec:	2b01      	cmp	r3, #1
 8007bee:	d813      	bhi.n	8007c18 <USBD_StdItfReq+0x64>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	6839      	ldr	r1, [r7, #0]
 8007bfa:	6878      	ldr	r0, [r7, #4]
 8007bfc:	4798      	blx	r3
 8007bfe:	4603      	mov	r3, r0
 8007c00:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	88db      	ldrh	r3, [r3, #6]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d110      	bne.n	8007c2c <USBD_StdItfReq+0x78>
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
 8007c0c:	2b00      	cmp	r3, #0
 8007c0e:	d10d      	bne.n	8007c2c <USBD_StdItfReq+0x78>
            {
              USBD_CtlSendStatus(pdev);
 8007c10:	6878      	ldr	r0, [r7, #4]
 8007c12:	f000 fd56 	bl	80086c2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007c16:	e009      	b.n	8007c2c <USBD_StdItfReq+0x78>
            USBD_CtlError(pdev, req);
 8007c18:	6839      	ldr	r1, [r7, #0]
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fc89 	bl	8008532 <USBD_CtlError>
          break;
 8007c20:	e004      	b.n	8007c2c <USBD_StdItfReq+0x78>

        default:
          USBD_CtlError(pdev, req);
 8007c22:	6839      	ldr	r1, [r7, #0]
 8007c24:	6878      	ldr	r0, [r7, #4]
 8007c26:	f000 fc84 	bl	8008532 <USBD_CtlError>
          break;
 8007c2a:	e000      	b.n	8007c2e <USBD_StdItfReq+0x7a>
          break;
 8007c2c:	bf00      	nop
      }
      break;
 8007c2e:	e004      	b.n	8007c3a <USBD_StdItfReq+0x86>

    default:
      USBD_CtlError(pdev, req);
 8007c30:	6839      	ldr	r1, [r7, #0]
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fc7d 	bl	8008532 <USBD_CtlError>
      break;
 8007c38:	bf00      	nop
  }

  return USBD_OK;
 8007c3a:	2300      	movs	r3, #0
}
 8007c3c:	4618      	mov	r0, r3
 8007c3e:	3710      	adds	r7, #16
 8007c40:	46bd      	mov	sp, r7
 8007c42:	bd80      	pop	{r7, pc}

08007c44 <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 8007c44:	b580      	push	{r7, lr}
 8007c46:	b084      	sub	sp, #16
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
 8007c4c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	73fb      	strb	r3, [r7, #15]
  ep_addr  = LOBYTE(req->wIndex);
 8007c52:	683b      	ldr	r3, [r7, #0]
 8007c54:	889b      	ldrh	r3, [r3, #4]
 8007c56:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007c58:	683b      	ldr	r3, [r7, #0]
 8007c5a:	781b      	ldrb	r3, [r3, #0]
 8007c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c60:	2b40      	cmp	r3, #64	; 0x40
 8007c62:	d007      	beq.n	8007c74 <USBD_StdEPReq+0x30>
 8007c64:	2b40      	cmp	r3, #64	; 0x40
 8007c66:	f200 8146 	bhi.w	8007ef6 <USBD_StdEPReq+0x2b2>
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d00a      	beq.n	8007c84 <USBD_StdEPReq+0x40>
 8007c6e:	2b20      	cmp	r3, #32
 8007c70:	f040 8141 	bne.w	8007ef6 <USBD_StdEPReq+0x2b2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c7a:	689b      	ldr	r3, [r3, #8]
 8007c7c:	6839      	ldr	r1, [r7, #0]
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	4798      	blx	r3
      break;
 8007c82:	e13d      	b.n	8007f00 <USBD_StdEPReq+0x2bc>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	781b      	ldrb	r3, [r3, #0]
 8007c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007c8c:	2b20      	cmp	r3, #32
 8007c8e:	d10a      	bne.n	8007ca6 <USBD_StdEPReq+0x62>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	6839      	ldr	r1, [r7, #0]
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	4798      	blx	r3
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	73fb      	strb	r3, [r7, #15]

        return ret;
 8007ca2:	7bfb      	ldrb	r3, [r7, #15]
 8007ca4:	e12d      	b.n	8007f02 <USBD_StdEPReq+0x2be>
      }

      switch (req->bRequest)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	785b      	ldrb	r3, [r3, #1]
 8007caa:	2b03      	cmp	r3, #3
 8007cac:	d007      	beq.n	8007cbe <USBD_StdEPReq+0x7a>
 8007cae:	2b03      	cmp	r3, #3
 8007cb0:	f300 811b 	bgt.w	8007eea <USBD_StdEPReq+0x2a6>
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d072      	beq.n	8007d9e <USBD_StdEPReq+0x15a>
 8007cb8:	2b01      	cmp	r3, #1
 8007cba:	d03a      	beq.n	8007d32 <USBD_StdEPReq+0xee>
 8007cbc:	e115      	b.n	8007eea <USBD_StdEPReq+0x2a6>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cc4:	2b02      	cmp	r3, #2
 8007cc6:	d002      	beq.n	8007cce <USBD_StdEPReq+0x8a>
 8007cc8:	2b03      	cmp	r3, #3
 8007cca:	d015      	beq.n	8007cf8 <USBD_StdEPReq+0xb4>
 8007ccc:	e02b      	b.n	8007d26 <USBD_StdEPReq+0xe2>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007cce:	7bbb      	ldrb	r3, [r7, #14]
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d00c      	beq.n	8007cee <USBD_StdEPReq+0xaa>
 8007cd4:	7bbb      	ldrb	r3, [r7, #14]
 8007cd6:	2b80      	cmp	r3, #128	; 0x80
 8007cd8:	d009      	beq.n	8007cee <USBD_StdEPReq+0xaa>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007cda:	7bbb      	ldrb	r3, [r7, #14]
 8007cdc:	4619      	mov	r1, r3
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f001 f88e 	bl	8008e00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007ce4:	2180      	movs	r1, #128	; 0x80
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f001 f88a 	bl	8008e00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007cec:	e020      	b.n	8007d30 <USBD_StdEPReq+0xec>
                USBD_CtlError(pdev, req);
 8007cee:	6839      	ldr	r1, [r7, #0]
 8007cf0:	6878      	ldr	r0, [r7, #4]
 8007cf2:	f000 fc1e 	bl	8008532 <USBD_CtlError>
              break;
 8007cf6:	e01b      	b.n	8007d30 <USBD_StdEPReq+0xec>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007cf8:	683b      	ldr	r3, [r7, #0]
 8007cfa:	885b      	ldrh	r3, [r3, #2]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d10e      	bne.n	8007d1e <USBD_StdEPReq+0xda>
              {
                if ((ep_addr != 0x00U) &&
 8007d00:	7bbb      	ldrb	r3, [r7, #14]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d00b      	beq.n	8007d1e <USBD_StdEPReq+0xda>
 8007d06:	7bbb      	ldrb	r3, [r7, #14]
 8007d08:	2b80      	cmp	r3, #128	; 0x80
 8007d0a:	d008      	beq.n	8007d1e <USBD_StdEPReq+0xda>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8007d0c:	683b      	ldr	r3, [r7, #0]
 8007d0e:	88db      	ldrh	r3, [r3, #6]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d104      	bne.n	8007d1e <USBD_StdEPReq+0xda>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	4619      	mov	r1, r3
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f001 f871 	bl	8008e00 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 fccf 	bl	80086c2 <USBD_CtlSendStatus>

              break;
 8007d24:	e004      	b.n	8007d30 <USBD_StdEPReq+0xec>

            default:
              USBD_CtlError(pdev, req);
 8007d26:	6839      	ldr	r1, [r7, #0]
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f000 fc02 	bl	8008532 <USBD_CtlError>
              break;
 8007d2e:	bf00      	nop
          }
          break;
 8007d30:	e0e0      	b.n	8007ef4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d38:	2b02      	cmp	r3, #2
 8007d3a:	d002      	beq.n	8007d42 <USBD_StdEPReq+0xfe>
 8007d3c:	2b03      	cmp	r3, #3
 8007d3e:	d015      	beq.n	8007d6c <USBD_StdEPReq+0x128>
 8007d40:	e026      	b.n	8007d90 <USBD_StdEPReq+0x14c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007d42:	7bbb      	ldrb	r3, [r7, #14]
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d00c      	beq.n	8007d62 <USBD_StdEPReq+0x11e>
 8007d48:	7bbb      	ldrb	r3, [r7, #14]
 8007d4a:	2b80      	cmp	r3, #128	; 0x80
 8007d4c:	d009      	beq.n	8007d62 <USBD_StdEPReq+0x11e>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 8007d4e:	7bbb      	ldrb	r3, [r7, #14]
 8007d50:	4619      	mov	r1, r3
 8007d52:	6878      	ldr	r0, [r7, #4]
 8007d54:	f001 f854 	bl	8008e00 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8007d58:	2180      	movs	r1, #128	; 0x80
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f001 f850 	bl	8008e00 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007d60:	e01c      	b.n	8007d9c <USBD_StdEPReq+0x158>
                USBD_CtlError(pdev, req);
 8007d62:	6839      	ldr	r1, [r7, #0]
 8007d64:	6878      	ldr	r0, [r7, #4]
 8007d66:	f000 fbe4 	bl	8008532 <USBD_CtlError>
              break;
 8007d6a:	e017      	b.n	8007d9c <USBD_StdEPReq+0x158>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007d6c:	683b      	ldr	r3, [r7, #0]
 8007d6e:	885b      	ldrh	r3, [r3, #2]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d112      	bne.n	8007d9a <USBD_StdEPReq+0x156>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007d74:	7bbb      	ldrb	r3, [r7, #14]
 8007d76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d004      	beq.n	8007d88 <USBD_StdEPReq+0x144>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8007d7e:	7bbb      	ldrb	r3, [r7, #14]
 8007d80:	4619      	mov	r1, r3
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f001 f85b 	bl	8008e3e <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 8007d88:	6878      	ldr	r0, [r7, #4]
 8007d8a:	f000 fc9a 	bl	80086c2 <USBD_CtlSendStatus>
              }
              break;
 8007d8e:	e004      	b.n	8007d9a <USBD_StdEPReq+0x156>

            default:
              USBD_CtlError(pdev, req);
 8007d90:	6839      	ldr	r1, [r7, #0]
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fbcd 	bl	8008532 <USBD_CtlError>
              break;
 8007d98:	e000      	b.n	8007d9c <USBD_StdEPReq+0x158>
              break;
 8007d9a:	bf00      	nop
          }
          break;
 8007d9c:	e0aa      	b.n	8007ef4 <USBD_StdEPReq+0x2b0>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007da4:	2b02      	cmp	r3, #2
 8007da6:	d002      	beq.n	8007dae <USBD_StdEPReq+0x16a>
 8007da8:	2b03      	cmp	r3, #3
 8007daa:	d032      	beq.n	8007e12 <USBD_StdEPReq+0x1ce>
 8007dac:	e097      	b.n	8007ede <USBD_StdEPReq+0x29a>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007dae:	7bbb      	ldrb	r3, [r7, #14]
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d007      	beq.n	8007dc4 <USBD_StdEPReq+0x180>
 8007db4:	7bbb      	ldrb	r3, [r7, #14]
 8007db6:	2b80      	cmp	r3, #128	; 0x80
 8007db8:	d004      	beq.n	8007dc4 <USBD_StdEPReq+0x180>
              {
                USBD_CtlError(pdev, req);
 8007dba:	6839      	ldr	r1, [r7, #0]
 8007dbc:	6878      	ldr	r0, [r7, #4]
 8007dbe:	f000 fbb8 	bl	8008532 <USBD_CtlError>
                break;
 8007dc2:	e091      	b.n	8007ee8 <USBD_StdEPReq+0x2a4>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dc4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	da0b      	bge.n	8007de4 <USBD_StdEPReq+0x1a0>
 8007dcc:	7bbb      	ldrb	r3, [r7, #14]
 8007dce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	009b      	lsls	r3, r3, #2
 8007dd6:	4413      	add	r3, r2
 8007dd8:	009b      	lsls	r3, r3, #2
 8007dda:	3310      	adds	r3, #16
 8007ddc:	687a      	ldr	r2, [r7, #4]
 8007dde:	4413      	add	r3, r2
 8007de0:	3304      	adds	r3, #4
 8007de2:	e00b      	b.n	8007dfc <USBD_StdEPReq+0x1b8>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007de4:	7bbb      	ldrb	r3, [r7, #14]
 8007de6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007dea:	4613      	mov	r3, r2
 8007dec:	009b      	lsls	r3, r3, #2
 8007dee:	4413      	add	r3, r2
 8007df0:	009b      	lsls	r3, r3, #2
 8007df2:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007df6:	687a      	ldr	r2, [r7, #4]
 8007df8:	4413      	add	r3, r2
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007dfe:	68bb      	ldr	r3, [r7, #8]
 8007e00:	2200      	movs	r2, #0
 8007e02:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	2202      	movs	r2, #2
 8007e08:	4619      	mov	r1, r3
 8007e0a:	6878      	ldr	r0, [r7, #4]
 8007e0c:	f000 fbfb 	bl	8008606 <USBD_CtlSendData>
              break;
 8007e10:	e06a      	b.n	8007ee8 <USBD_StdEPReq+0x2a4>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007e12:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	da11      	bge.n	8007e3e <USBD_StdEPReq+0x1fa>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007e1a:	7bbb      	ldrb	r3, [r7, #14]
 8007e1c:	f003 020f 	and.w	r2, r3, #15
 8007e20:	6879      	ldr	r1, [r7, #4]
 8007e22:	4613      	mov	r3, r2
 8007e24:	009b      	lsls	r3, r3, #2
 8007e26:	4413      	add	r3, r2
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	440b      	add	r3, r1
 8007e2c:	3318      	adds	r3, #24
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d117      	bne.n	8007e64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e34:	6839      	ldr	r1, [r7, #0]
 8007e36:	6878      	ldr	r0, [r7, #4]
 8007e38:	f000 fb7b 	bl	8008532 <USBD_CtlError>
                  break;
 8007e3c:	e054      	b.n	8007ee8 <USBD_StdEPReq+0x2a4>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007e3e:	7bbb      	ldrb	r3, [r7, #14]
 8007e40:	f003 020f 	and.w	r2, r3, #15
 8007e44:	6879      	ldr	r1, [r7, #4]
 8007e46:	4613      	mov	r3, r2
 8007e48:	009b      	lsls	r3, r3, #2
 8007e4a:	4413      	add	r3, r2
 8007e4c:	009b      	lsls	r3, r3, #2
 8007e4e:	440b      	add	r3, r1
 8007e50:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d104      	bne.n	8007e64 <USBD_StdEPReq+0x220>
                {
                  USBD_CtlError(pdev, req);
 8007e5a:	6839      	ldr	r1, [r7, #0]
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fb68 	bl	8008532 <USBD_CtlError>
                  break;
 8007e62:	e041      	b.n	8007ee8 <USBD_StdEPReq+0x2a4>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e64:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	da0b      	bge.n	8007e84 <USBD_StdEPReq+0x240>
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
 8007e6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007e72:	4613      	mov	r3, r2
 8007e74:	009b      	lsls	r3, r3, #2
 8007e76:	4413      	add	r3, r2
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	3310      	adds	r3, #16
 8007e7c:	687a      	ldr	r2, [r7, #4]
 8007e7e:	4413      	add	r3, r2
 8007e80:	3304      	adds	r3, #4
 8007e82:	e00b      	b.n	8007e9c <USBD_StdEPReq+0x258>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007e84:	7bbb      	ldrb	r3, [r7, #14]
 8007e86:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007e8a:	4613      	mov	r3, r2
 8007e8c:	009b      	lsls	r3, r3, #2
 8007e8e:	4413      	add	r3, r2
 8007e90:	009b      	lsls	r3, r3, #2
 8007e92:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8007e96:	687a      	ldr	r2, [r7, #4]
 8007e98:	4413      	add	r3, r2
 8007e9a:	3304      	adds	r3, #4
 8007e9c:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007e9e:	7bbb      	ldrb	r3, [r7, #14]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d002      	beq.n	8007eaa <USBD_StdEPReq+0x266>
 8007ea4:	7bbb      	ldrb	r3, [r7, #14]
 8007ea6:	2b80      	cmp	r3, #128	; 0x80
 8007ea8:	d103      	bne.n	8007eb2 <USBD_StdEPReq+0x26e>
              {
                pep->status = 0x0000U;
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	2200      	movs	r2, #0
 8007eae:	601a      	str	r2, [r3, #0]
 8007eb0:	e00e      	b.n	8007ed0 <USBD_StdEPReq+0x28c>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8007eb2:	7bbb      	ldrb	r3, [r7, #14]
 8007eb4:	4619      	mov	r1, r3
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	f000 ffe0 	bl	8008e7c <USBD_LL_IsStallEP>
 8007ebc:	4603      	mov	r3, r0
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d003      	beq.n	8007eca <USBD_StdEPReq+0x286>
              {
                pep->status = 0x0001U;
 8007ec2:	68bb      	ldr	r3, [r7, #8]
 8007ec4:	2201      	movs	r2, #1
 8007ec6:	601a      	str	r2, [r3, #0]
 8007ec8:	e002      	b.n	8007ed0 <USBD_StdEPReq+0x28c>
              }
              else
              {
                pep->status = 0x0000U;
 8007eca:	68bb      	ldr	r3, [r7, #8]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8007ed0:	68bb      	ldr	r3, [r7, #8]
 8007ed2:	2202      	movs	r2, #2
 8007ed4:	4619      	mov	r1, r3
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f000 fb95 	bl	8008606 <USBD_CtlSendData>
              break;
 8007edc:	e004      	b.n	8007ee8 <USBD_StdEPReq+0x2a4>

            default:
              USBD_CtlError(pdev, req);
 8007ede:	6839      	ldr	r1, [r7, #0]
 8007ee0:	6878      	ldr	r0, [r7, #4]
 8007ee2:	f000 fb26 	bl	8008532 <USBD_CtlError>
              break;
 8007ee6:	bf00      	nop
          }
          break;
 8007ee8:	e004      	b.n	8007ef4 <USBD_StdEPReq+0x2b0>

        default:
          USBD_CtlError(pdev, req);
 8007eea:	6839      	ldr	r1, [r7, #0]
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f000 fb20 	bl	8008532 <USBD_CtlError>
          break;
 8007ef2:	bf00      	nop
      }
      break;
 8007ef4:	e004      	b.n	8007f00 <USBD_StdEPReq+0x2bc>

    default:
      USBD_CtlError(pdev, req);
 8007ef6:	6839      	ldr	r1, [r7, #0]
 8007ef8:	6878      	ldr	r0, [r7, #4]
 8007efa:	f000 fb1a 	bl	8008532 <USBD_CtlError>
      break;
 8007efe:	bf00      	nop
  }

  return ret;
 8007f00:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f02:	4618      	mov	r0, r3
 8007f04:	3710      	adds	r7, #16
 8007f06:	46bd      	mov	sp, r7
 8007f08:	bd80      	pop	{r7, pc}
	...

08007f0c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b084      	sub	sp, #16
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
 8007f14:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007f1a:	2300      	movs	r3, #0
 8007f1c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007f1e:	2300      	movs	r3, #0
 8007f20:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	885b      	ldrh	r3, [r3, #2]
 8007f26:	0a1b      	lsrs	r3, r3, #8
 8007f28:	b29b      	uxth	r3, r3
 8007f2a:	3b01      	subs	r3, #1
 8007f2c:	2b06      	cmp	r3, #6
 8007f2e:	f200 8128 	bhi.w	8008182 <USBD_GetDescriptor+0x276>
 8007f32:	a201      	add	r2, pc, #4	; (adr r2, 8007f38 <USBD_GetDescriptor+0x2c>)
 8007f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f6d 	.word	0x08007f6d
 8007f40:	08007fad 	.word	0x08007fad
 8007f44:	08008183 	.word	0x08008183
 8007f48:	08008183 	.word	0x08008183
 8007f4c:	08008123 	.word	0x08008123
 8007f50:	0800814f 	.word	0x0800814f
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	687a      	ldr	r2, [r7, #4]
 8007f5e:	7c12      	ldrb	r2, [r2, #16]
 8007f60:	f107 0108 	add.w	r1, r7, #8
 8007f64:	4610      	mov	r0, r2
 8007f66:	4798      	blx	r3
 8007f68:	60f8      	str	r0, [r7, #12]
      break;
 8007f6a:	e112      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	7c1b      	ldrb	r3, [r3, #16]
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d10d      	bne.n	8007f90 <USBD_GetDescriptor+0x84>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f7c:	f107 0208 	add.w	r2, r7, #8
 8007f80:	4610      	mov	r0, r2
 8007f82:	4798      	blx	r3
 8007f84:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	3301      	adds	r3, #1
 8007f8a:	2202      	movs	r2, #2
 8007f8c:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007f8e:	e100      	b.n	8008192 <USBD_GetDescriptor+0x286>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f98:	f107 0208 	add.w	r2, r7, #8
 8007f9c:	4610      	mov	r0, r2
 8007f9e:	4798      	blx	r3
 8007fa0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	2202      	movs	r2, #2
 8007fa8:	701a      	strb	r2, [r3, #0]
      break;
 8007faa:	e0f2      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007fac:	683b      	ldr	r3, [r7, #0]
 8007fae:	885b      	ldrh	r3, [r3, #2]
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b05      	cmp	r3, #5
 8007fb4:	f200 80ac 	bhi.w	8008110 <USBD_GetDescriptor+0x204>
 8007fb8:	a201      	add	r2, pc, #4	; (adr r2, 8007fc0 <USBD_GetDescriptor+0xb4>)
 8007fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fbe:	bf00      	nop
 8007fc0:	08007fd9 	.word	0x08007fd9
 8007fc4:	0800800d 	.word	0x0800800d
 8007fc8:	08008041 	.word	0x08008041
 8007fcc:	08008075 	.word	0x08008075
 8007fd0:	080080a9 	.word	0x080080a9
 8007fd4:	080080dd 	.word	0x080080dd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d00b      	beq.n	8007ffc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8007fea:	685b      	ldr	r3, [r3, #4]
 8007fec:	687a      	ldr	r2, [r7, #4]
 8007fee:	7c12      	ldrb	r2, [r2, #16]
 8007ff0:	f107 0108 	add.w	r1, r7, #8
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	4798      	blx	r3
 8007ff8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007ffa:	e091      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007ffc:	6839      	ldr	r1, [r7, #0]
 8007ffe:	6878      	ldr	r0, [r7, #4]
 8008000:	f000 fa97 	bl	8008532 <USBD_CtlError>
            err++;
 8008004:	7afb      	ldrb	r3, [r7, #11]
 8008006:	3301      	adds	r3, #1
 8008008:	72fb      	strb	r3, [r7, #11]
          break;
 800800a:	e089      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	2b00      	cmp	r3, #0
 8008016:	d00b      	beq.n	8008030 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800801e:	689b      	ldr	r3, [r3, #8]
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	7c12      	ldrb	r2, [r2, #16]
 8008024:	f107 0108 	add.w	r1, r7, #8
 8008028:	4610      	mov	r0, r2
 800802a:	4798      	blx	r3
 800802c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800802e:	e077      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008030:	6839      	ldr	r1, [r7, #0]
 8008032:	6878      	ldr	r0, [r7, #4]
 8008034:	f000 fa7d 	bl	8008532 <USBD_CtlError>
            err++;
 8008038:	7afb      	ldrb	r3, [r7, #11]
 800803a:	3301      	adds	r3, #1
 800803c:	72fb      	strb	r3, [r7, #11]
          break;
 800803e:	e06f      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	2b00      	cmp	r3, #0
 800804a:	d00b      	beq.n	8008064 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008052:	68db      	ldr	r3, [r3, #12]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	7c12      	ldrb	r2, [r2, #16]
 8008058:	f107 0108 	add.w	r1, r7, #8
 800805c:	4610      	mov	r0, r2
 800805e:	4798      	blx	r3
 8008060:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008062:	e05d      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008064:	6839      	ldr	r1, [r7, #0]
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f000 fa63 	bl	8008532 <USBD_CtlError>
            err++;
 800806c:	7afb      	ldrb	r3, [r7, #11]
 800806e:	3301      	adds	r3, #1
 8008070:	72fb      	strb	r3, [r7, #11]
          break;
 8008072:	e055      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 800807a:	691b      	ldr	r3, [r3, #16]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 8008086:	691b      	ldr	r3, [r3, #16]
 8008088:	687a      	ldr	r2, [r7, #4]
 800808a:	7c12      	ldrb	r2, [r2, #16]
 800808c:	f107 0108 	add.w	r1, r7, #8
 8008090:	4610      	mov	r0, r2
 8008092:	4798      	blx	r3
 8008094:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008096:	e043      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008098:	6839      	ldr	r1, [r7, #0]
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f000 fa49 	bl	8008532 <USBD_CtlError>
            err++;
 80080a0:	7afb      	ldrb	r3, [r7, #11]
 80080a2:	3301      	adds	r3, #1
 80080a4:	72fb      	strb	r3, [r7, #11]
          break;
 80080a6:	e03b      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ae:	695b      	ldr	r3, [r3, #20]
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d00b      	beq.n	80080cc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ba:	695b      	ldr	r3, [r3, #20]
 80080bc:	687a      	ldr	r2, [r7, #4]
 80080be:	7c12      	ldrb	r2, [r2, #16]
 80080c0:	f107 0108 	add.w	r1, r7, #8
 80080c4:	4610      	mov	r0, r2
 80080c6:	4798      	blx	r3
 80080c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080ca:	e029      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80080cc:	6839      	ldr	r1, [r7, #0]
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 fa2f 	bl	8008532 <USBD_CtlError>
            err++;
 80080d4:	7afb      	ldrb	r3, [r7, #11]
 80080d6:	3301      	adds	r3, #1
 80080d8:	72fb      	strb	r3, [r7, #11]
          break;
 80080da:	e021      	b.n	8008120 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080e2:	699b      	ldr	r3, [r3, #24]
 80080e4:	2b00      	cmp	r3, #0
 80080e6:	d00b      	beq.n	8008100 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	f8d3 32b0 	ldr.w	r3, [r3, #688]	; 0x2b0
 80080ee:	699b      	ldr	r3, [r3, #24]
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	7c12      	ldrb	r2, [r2, #16]
 80080f4:	f107 0108 	add.w	r1, r7, #8
 80080f8:	4610      	mov	r0, r2
 80080fa:	4798      	blx	r3
 80080fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80080fe:	e00f      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008100:	6839      	ldr	r1, [r7, #0]
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 fa15 	bl	8008532 <USBD_CtlError>
            err++;
 8008108:	7afb      	ldrb	r3, [r7, #11]
 800810a:	3301      	adds	r3, #1
 800810c:	72fb      	strb	r3, [r7, #11]
          break;
 800810e:	e007      	b.n	8008120 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 8008110:	6839      	ldr	r1, [r7, #0]
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f000 fa0d 	bl	8008532 <USBD_CtlError>
          err++;
 8008118:	7afb      	ldrb	r3, [r7, #11]
 800811a:	3301      	adds	r3, #1
 800811c:	72fb      	strb	r3, [r7, #11]
#endif
      }
      break;
 800811e:	e038      	b.n	8008192 <USBD_GetDescriptor+0x286>
 8008120:	e037      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_GetDescriptor+0x232>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008132:	f107 0208 	add.w	r2, r7, #8
 8008136:	4610      	mov	r0, r2
 8008138:	4798      	blx	r3
 800813a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800813c:	e029      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800813e:	6839      	ldr	r1, [r7, #0]
 8008140:	6878      	ldr	r0, [r7, #4]
 8008142:	f000 f9f6 	bl	8008532 <USBD_CtlError>
        err++;
 8008146:	7afb      	ldrb	r3, [r7, #11]
 8008148:	3301      	adds	r3, #1
 800814a:	72fb      	strb	r3, [r7, #11]
      break;
 800814c:	e021      	b.n	8008192 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	7c1b      	ldrb	r3, [r3, #16]
 8008152:	2b00      	cmp	r3, #0
 8008154:	d10d      	bne.n	8008172 <USBD_GetDescriptor+0x266>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800815c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800815e:	f107 0208 	add.w	r2, r7, #8
 8008162:	4610      	mov	r0, r2
 8008164:	4798      	blx	r3
 8008166:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	3301      	adds	r3, #1
 800816c:	2207      	movs	r2, #7
 800816e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8008170:	e00f      	b.n	8008192 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f9dc 	bl	8008532 <USBD_CtlError>
        err++;
 800817a:	7afb      	ldrb	r3, [r7, #11]
 800817c:	3301      	adds	r3, #1
 800817e:	72fb      	strb	r3, [r7, #11]
      break;
 8008180:	e007      	b.n	8008192 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8008182:	6839      	ldr	r1, [r7, #0]
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f000 f9d4 	bl	8008532 <USBD_CtlError>
      err++;
 800818a:	7afb      	ldrb	r3, [r7, #11]
 800818c:	3301      	adds	r3, #1
 800818e:	72fb      	strb	r3, [r7, #11]
      break;
 8008190:	bf00      	nop
  }

  if (err != 0U)
 8008192:	7afb      	ldrb	r3, [r7, #11]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d11c      	bne.n	80081d2 <USBD_GetDescriptor+0x2c6>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8008198:	893b      	ldrh	r3, [r7, #8]
 800819a:	2b00      	cmp	r3, #0
 800819c:	d011      	beq.n	80081c2 <USBD_GetDescriptor+0x2b6>
 800819e:	683b      	ldr	r3, [r7, #0]
 80081a0:	88db      	ldrh	r3, [r3, #6]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d00d      	beq.n	80081c2 <USBD_GetDescriptor+0x2b6>
    {
      len = MIN(len, req->wLength);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	88da      	ldrh	r2, [r3, #6]
 80081aa:	893b      	ldrh	r3, [r7, #8]
 80081ac:	4293      	cmp	r3, r2
 80081ae:	bf28      	it	cs
 80081b0:	4613      	movcs	r3, r2
 80081b2:	b29b      	uxth	r3, r3
 80081b4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80081b6:	893b      	ldrh	r3, [r7, #8]
 80081b8:	461a      	mov	r2, r3
 80081ba:	68f9      	ldr	r1, [r7, #12]
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 fa22 	bl	8008606 <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 80081c2:	683b      	ldr	r3, [r7, #0]
 80081c4:	88db      	ldrh	r3, [r3, #6]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d104      	bne.n	80081d4 <USBD_GetDescriptor+0x2c8>
    {
      (void)USBD_CtlSendStatus(pdev);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 fa79 	bl	80086c2 <USBD_CtlSendStatus>
 80081d0:	e000      	b.n	80081d4 <USBD_GetDescriptor+0x2c8>
    return;
 80081d2:	bf00      	nop
    }
  }
}
 80081d4:	3710      	adds	r7, #16
 80081d6:	46bd      	mov	sp, r7
 80081d8:	bd80      	pop	{r7, pc}
 80081da:	bf00      	nop

080081dc <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b084      	sub	sp, #16
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80081e6:	683b      	ldr	r3, [r7, #0]
 80081e8:	889b      	ldrh	r3, [r3, #4]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d130      	bne.n	8008250 <USBD_SetAddress+0x74>
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	88db      	ldrh	r3, [r3, #6]
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d12c      	bne.n	8008250 <USBD_SetAddress+0x74>
 80081f6:	683b      	ldr	r3, [r7, #0]
 80081f8:	885b      	ldrh	r3, [r3, #2]
 80081fa:	2b7f      	cmp	r3, #127	; 0x7f
 80081fc:	d828      	bhi.n	8008250 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	885b      	ldrh	r3, [r3, #2]
 8008202:	b2db      	uxtb	r3, r3
 8008204:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008208:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008210:	2b03      	cmp	r3, #3
 8008212:	d104      	bne.n	800821e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev, req);
 8008214:	6839      	ldr	r1, [r7, #0]
 8008216:	6878      	ldr	r0, [r7, #4]
 8008218:	f000 f98b 	bl	8008532 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800821c:	e01d      	b.n	800825a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	7bfa      	ldrb	r2, [r7, #15]
 8008222:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008226:	7bfb      	ldrb	r3, [r7, #15]
 8008228:	4619      	mov	r1, r3
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 fe52 	bl	8008ed4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8008230:	6878      	ldr	r0, [r7, #4]
 8008232:	f000 fa46 	bl	80086c2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008236:	7bfb      	ldrb	r3, [r7, #15]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d004      	beq.n	8008246 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2202      	movs	r2, #2
 8008240:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008244:	e009      	b.n	800825a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800824e:	e004      	b.n	800825a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008250:	6839      	ldr	r1, [r7, #0]
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f96d 	bl	8008532 <USBD_CtlError>
  }
}
 8008258:	bf00      	nop
 800825a:	bf00      	nop
 800825c:	3710      	adds	r7, #16
 800825e:	46bd      	mov	sp, r7
 8008260:	bd80      	pop	{r7, pc}
	...

08008264 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008264:	b580      	push	{r7, lr}
 8008266:	b082      	sub	sp, #8
 8008268:	af00      	add	r7, sp, #0
 800826a:	6078      	str	r0, [r7, #4]
 800826c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	885b      	ldrh	r3, [r3, #2]
 8008272:	b2da      	uxtb	r2, r3
 8008274:	4b41      	ldr	r3, [pc, #260]	; (800837c <USBD_SetConfig+0x118>)
 8008276:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008278:	4b40      	ldr	r3, [pc, #256]	; (800837c <USBD_SetConfig+0x118>)
 800827a:	781b      	ldrb	r3, [r3, #0]
 800827c:	2b01      	cmp	r3, #1
 800827e:	d904      	bls.n	800828a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 8008280:	6839      	ldr	r1, [r7, #0]
 8008282:	6878      	ldr	r0, [r7, #4]
 8008284:	f000 f955 	bl	8008532 <USBD_CtlError>
 8008288:	e075      	b.n	8008376 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008290:	2b02      	cmp	r3, #2
 8008292:	d002      	beq.n	800829a <USBD_SetConfig+0x36>
 8008294:	2b03      	cmp	r3, #3
 8008296:	d023      	beq.n	80082e0 <USBD_SetConfig+0x7c>
 8008298:	e062      	b.n	8008360 <USBD_SetConfig+0xfc>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 800829a:	4b38      	ldr	r3, [pc, #224]	; (800837c <USBD_SetConfig+0x118>)
 800829c:	781b      	ldrb	r3, [r3, #0]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d01a      	beq.n	80082d8 <USBD_SetConfig+0x74>
        {
          pdev->dev_config = cfgidx;
 80082a2:	4b36      	ldr	r3, [pc, #216]	; (800837c <USBD_SetConfig+0x118>)
 80082a4:	781b      	ldrb	r3, [r3, #0]
 80082a6:	461a      	mov	r2, r3
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2203      	movs	r2, #3
 80082b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 80082b4:	4b31      	ldr	r3, [pc, #196]	; (800837c <USBD_SetConfig+0x118>)
 80082b6:	781b      	ldrb	r3, [r3, #0]
 80082b8:	4619      	mov	r1, r3
 80082ba:	6878      	ldr	r0, [r7, #4]
 80082bc:	f7ff f9e7 	bl	800768e <USBD_SetClassConfig>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b02      	cmp	r3, #2
 80082c4:	d104      	bne.n	80082d0 <USBD_SetConfig+0x6c>
          {
            USBD_CtlError(pdev, req);
 80082c6:	6839      	ldr	r1, [r7, #0]
 80082c8:	6878      	ldr	r0, [r7, #4]
 80082ca:	f000 f932 	bl	8008532 <USBD_CtlError>
            return;
 80082ce:	e052      	b.n	8008376 <USBD_SetConfig+0x112>
          }
          USBD_CtlSendStatus(pdev);
 80082d0:	6878      	ldr	r0, [r7, #4]
 80082d2:	f000 f9f6 	bl	80086c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 80082d6:	e04e      	b.n	8008376 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 f9f2 	bl	80086c2 <USBD_CtlSendStatus>
        break;
 80082de:	e04a      	b.n	8008376 <USBD_SetConfig+0x112>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 80082e0:	4b26      	ldr	r3, [pc, #152]	; (800837c <USBD_SetConfig+0x118>)
 80082e2:	781b      	ldrb	r3, [r3, #0]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d112      	bne.n	800830e <USBD_SetConfig+0xaa>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	2202      	movs	r2, #2
 80082ec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
          pdev->dev_config = cfgidx;
 80082f0:	4b22      	ldr	r3, [pc, #136]	; (800837c <USBD_SetConfig+0x118>)
 80082f2:	781b      	ldrb	r3, [r3, #0]
 80082f4:	461a      	mov	r2, r3
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 80082fa:	4b20      	ldr	r3, [pc, #128]	; (800837c <USBD_SetConfig+0x118>)
 80082fc:	781b      	ldrb	r3, [r3, #0]
 80082fe:	4619      	mov	r1, r3
 8008300:	6878      	ldr	r0, [r7, #4]
 8008302:	f7ff f9e3 	bl	80076cc <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8008306:	6878      	ldr	r0, [r7, #4]
 8008308:	f000 f9db 	bl	80086c2 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 800830c:	e033      	b.n	8008376 <USBD_SetConfig+0x112>
        else if (cfgidx != pdev->dev_config)
 800830e:	4b1b      	ldr	r3, [pc, #108]	; (800837c <USBD_SetConfig+0x118>)
 8008310:	781b      	ldrb	r3, [r3, #0]
 8008312:	461a      	mov	r2, r3
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	429a      	cmp	r2, r3
 800831a:	d01d      	beq.n	8008358 <USBD_SetConfig+0xf4>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	685b      	ldr	r3, [r3, #4]
 8008320:	b2db      	uxtb	r3, r3
 8008322:	4619      	mov	r1, r3
 8008324:	6878      	ldr	r0, [r7, #4]
 8008326:	f7ff f9d1 	bl	80076cc <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800832a:	4b14      	ldr	r3, [pc, #80]	; (800837c <USBD_SetConfig+0x118>)
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	461a      	mov	r2, r3
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8008334:	4b11      	ldr	r3, [pc, #68]	; (800837c <USBD_SetConfig+0x118>)
 8008336:	781b      	ldrb	r3, [r3, #0]
 8008338:	4619      	mov	r1, r3
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f7ff f9a7 	bl	800768e <USBD_SetClassConfig>
 8008340:	4603      	mov	r3, r0
 8008342:	2b02      	cmp	r3, #2
 8008344:	d104      	bne.n	8008350 <USBD_SetConfig+0xec>
            USBD_CtlError(pdev, req);
 8008346:	6839      	ldr	r1, [r7, #0]
 8008348:	6878      	ldr	r0, [r7, #4]
 800834a:	f000 f8f2 	bl	8008532 <USBD_CtlError>
            return;
 800834e:	e012      	b.n	8008376 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 f9b6 	bl	80086c2 <USBD_CtlSendStatus>
        break;
 8008356:	e00e      	b.n	8008376 <USBD_SetConfig+0x112>
          USBD_CtlSendStatus(pdev);
 8008358:	6878      	ldr	r0, [r7, #4]
 800835a:	f000 f9b2 	bl	80086c2 <USBD_CtlSendStatus>
        break;
 800835e:	e00a      	b.n	8008376 <USBD_SetConfig+0x112>

      default:
        USBD_CtlError(pdev, req);
 8008360:	6839      	ldr	r1, [r7, #0]
 8008362:	6878      	ldr	r0, [r7, #4]
 8008364:	f000 f8e5 	bl	8008532 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8008368:	4b04      	ldr	r3, [pc, #16]	; (800837c <USBD_SetConfig+0x118>)
 800836a:	781b      	ldrb	r3, [r3, #0]
 800836c:	4619      	mov	r1, r3
 800836e:	6878      	ldr	r0, [r7, #4]
 8008370:	f7ff f9ac 	bl	80076cc <USBD_ClrClassConfig>
        break;
 8008374:	bf00      	nop
    }
  }
}
 8008376:	3708      	adds	r7, #8
 8008378:	46bd      	mov	sp, r7
 800837a:	bd80      	pop	{r7, pc}
 800837c:	20000368 	.word	0x20000368

08008380 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b082      	sub	sp, #8
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	88db      	ldrh	r3, [r3, #6]
 800838e:	2b01      	cmp	r3, #1
 8008390:	d004      	beq.n	800839c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008392:	6839      	ldr	r1, [r7, #0]
 8008394:	6878      	ldr	r0, [r7, #4]
 8008396:	f000 f8cc 	bl	8008532 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800839a:	e022      	b.n	80083e2 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083a2:	2b02      	cmp	r3, #2
 80083a4:	dc02      	bgt.n	80083ac <USBD_GetConfig+0x2c>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	dc03      	bgt.n	80083b2 <USBD_GetConfig+0x32>
 80083aa:	e015      	b.n	80083d8 <USBD_GetConfig+0x58>
 80083ac:	2b03      	cmp	r3, #3
 80083ae:	d00b      	beq.n	80083c8 <USBD_GetConfig+0x48>
 80083b0:	e012      	b.n	80083d8 <USBD_GetConfig+0x58>
        pdev->dev_default_config = 0U;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2200      	movs	r2, #0
 80083b6:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	3308      	adds	r3, #8
 80083bc:	2201      	movs	r2, #1
 80083be:	4619      	mov	r1, r3
 80083c0:	6878      	ldr	r0, [r7, #4]
 80083c2:	f000 f920 	bl	8008606 <USBD_CtlSendData>
        break;
 80083c6:	e00c      	b.n	80083e2 <USBD_GetConfig+0x62>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3304      	adds	r3, #4
 80083cc:	2201      	movs	r2, #1
 80083ce:	4619      	mov	r1, r3
 80083d0:	6878      	ldr	r0, [r7, #4]
 80083d2:	f000 f918 	bl	8008606 <USBD_CtlSendData>
        break;
 80083d6:	e004      	b.n	80083e2 <USBD_GetConfig+0x62>
        USBD_CtlError(pdev, req);
 80083d8:	6839      	ldr	r1, [r7, #0]
 80083da:	6878      	ldr	r0, [r7, #4]
 80083dc:	f000 f8a9 	bl	8008532 <USBD_CtlError>
        break;
 80083e0:	bf00      	nop
}
 80083e2:	bf00      	nop
 80083e4:	3708      	adds	r7, #8
 80083e6:	46bd      	mov	sp, r7
 80083e8:	bd80      	pop	{r7, pc}

080083ea <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80083ea:	b580      	push	{r7, lr}
 80083ec:	b082      	sub	sp, #8
 80083ee:	af00      	add	r7, sp, #0
 80083f0:	6078      	str	r0, [r7, #4]
 80083f2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80083fa:	3b01      	subs	r3, #1
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d81e      	bhi.n	800843e <USBD_GetStatus+0x54>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	88db      	ldrh	r3, [r3, #6]
 8008404:	2b02      	cmp	r3, #2
 8008406:	d004      	beq.n	8008412 <USBD_GetStatus+0x28>
      {
        USBD_CtlError(pdev, req);
 8008408:	6839      	ldr	r1, [r7, #0]
 800840a:	6878      	ldr	r0, [r7, #4]
 800840c:	f000 f891 	bl	8008532 <USBD_CtlError>
        break;
 8008410:	e01a      	b.n	8008448 <USBD_GetStatus+0x5e>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008412:	687b      	ldr	r3, [r7, #4]
 8008414:	2201      	movs	r2, #1
 8008416:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800841e:	2b00      	cmp	r3, #0
 8008420:	d005      	beq.n	800842e <USBD_GetStatus+0x44>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	68db      	ldr	r3, [r3, #12]
 8008426:	f043 0202 	orr.w	r2, r3, #2
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	330c      	adds	r3, #12
 8008432:	2202      	movs	r2, #2
 8008434:	4619      	mov	r1, r3
 8008436:	6878      	ldr	r0, [r7, #4]
 8008438:	f000 f8e5 	bl	8008606 <USBD_CtlSendData>
      break;
 800843c:	e004      	b.n	8008448 <USBD_GetStatus+0x5e>

    default:
      USBD_CtlError(pdev, req);
 800843e:	6839      	ldr	r1, [r7, #0]
 8008440:	6878      	ldr	r0, [r7, #4]
 8008442:	f000 f876 	bl	8008532 <USBD_CtlError>
      break;
 8008446:	bf00      	nop
  }
}
 8008448:	bf00      	nop
 800844a:	3708      	adds	r7, #8
 800844c:	46bd      	mov	sp, r7
 800844e:	bd80      	pop	{r7, pc}

08008450 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008450:	b580      	push	{r7, lr}
 8008452:	b082      	sub	sp, #8
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	885b      	ldrh	r3, [r3, #2]
 800845e:	2b01      	cmp	r3, #1
 8008460:	d106      	bne.n	8008470 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2201      	movs	r2, #1
 8008466:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    USBD_CtlSendStatus(pdev);
 800846a:	6878      	ldr	r0, [r7, #4]
 800846c:	f000 f929 	bl	80086c2 <USBD_CtlSendStatus>
  }
}
 8008470:	bf00      	nop
 8008472:	3708      	adds	r7, #8
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b082      	sub	sp, #8
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
 8008480:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008488:	3b01      	subs	r3, #1
 800848a:	2b02      	cmp	r3, #2
 800848c:	d80b      	bhi.n	80084a6 <USBD_ClrFeature+0x2e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	885b      	ldrh	r3, [r3, #2]
 8008492:	2b01      	cmp	r3, #1
 8008494:	d10c      	bne.n	80084b0 <USBD_ClrFeature+0x38>
      {
        pdev->dev_remote_wakeup = 0U;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        USBD_CtlSendStatus(pdev);
 800849e:	6878      	ldr	r0, [r7, #4]
 80084a0:	f000 f90f 	bl	80086c2 <USBD_CtlSendStatus>
      }
      break;
 80084a4:	e004      	b.n	80084b0 <USBD_ClrFeature+0x38>

    default:
      USBD_CtlError(pdev, req);
 80084a6:	6839      	ldr	r1, [r7, #0]
 80084a8:	6878      	ldr	r0, [r7, #4]
 80084aa:	f000 f842 	bl	8008532 <USBD_CtlError>
      break;
 80084ae:	e000      	b.n	80084b2 <USBD_ClrFeature+0x3a>
      break;
 80084b0:	bf00      	nop
  }
}
 80084b2:	bf00      	nop
 80084b4:	3708      	adds	r7, #8
 80084b6:	46bd      	mov	sp, r7
 80084b8:	bd80      	pop	{r7, pc}

080084ba <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80084ba:	b480      	push	{r7}
 80084bc:	b083      	sub	sp, #12
 80084be:	af00      	add	r7, sp, #0
 80084c0:	6078      	str	r0, [r7, #4]
 80084c2:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	781a      	ldrb	r2, [r3, #0]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 80084cc:	683b      	ldr	r3, [r7, #0]
 80084ce:	785a      	ldrb	r2, [r3, #1]
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	3302      	adds	r3, #2
 80084d8:	781b      	ldrb	r3, [r3, #0]
 80084da:	b29a      	uxth	r2, r3
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	3303      	adds	r3, #3
 80084e0:	781b      	ldrb	r3, [r3, #0]
 80084e2:	b29b      	uxth	r3, r3
 80084e4:	021b      	lsls	r3, r3, #8
 80084e6:	b29b      	uxth	r3, r3
 80084e8:	4413      	add	r3, r2
 80084ea:	b29a      	uxth	r2, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 80084f0:	683b      	ldr	r3, [r7, #0]
 80084f2:	3304      	adds	r3, #4
 80084f4:	781b      	ldrb	r3, [r3, #0]
 80084f6:	b29a      	uxth	r2, r3
 80084f8:	683b      	ldr	r3, [r7, #0]
 80084fa:	3305      	adds	r3, #5
 80084fc:	781b      	ldrb	r3, [r3, #0]
 80084fe:	b29b      	uxth	r3, r3
 8008500:	021b      	lsls	r3, r3, #8
 8008502:	b29b      	uxth	r3, r3
 8008504:	4413      	add	r3, r2
 8008506:	b29a      	uxth	r2, r3
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	3306      	adds	r3, #6
 8008510:	781b      	ldrb	r3, [r3, #0]
 8008512:	b29a      	uxth	r2, r3
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	3307      	adds	r3, #7
 8008518:	781b      	ldrb	r3, [r3, #0]
 800851a:	b29b      	uxth	r3, r3
 800851c:	021b      	lsls	r3, r3, #8
 800851e:	b29b      	uxth	r3, r3
 8008520:	4413      	add	r3, r2
 8008522:	b29a      	uxth	r2, r3
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	80da      	strh	r2, [r3, #6]

}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	bc80      	pop	{r7}
 8008530:	4770      	bx	lr

08008532 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8008532:	b580      	push	{r7, lr}
 8008534:	b082      	sub	sp, #8
 8008536:	af00      	add	r7, sp, #0
 8008538:	6078      	str	r0, [r7, #4]
 800853a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 800853c:	2180      	movs	r1, #128	; 0x80
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f000 fc5e 	bl	8008e00 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8008544:	2100      	movs	r1, #0
 8008546:	6878      	ldr	r0, [r7, #4]
 8008548:	f000 fc5a 	bl	8008e00 <USBD_LL_StallEP>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b086      	sub	sp, #24
 8008558:	af00      	add	r7, sp, #0
 800855a:	60f8      	str	r0, [r7, #12]
 800855c:	60b9      	str	r1, [r7, #8]
 800855e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008560:	2300      	movs	r3, #0
 8008562:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 8008564:	68fb      	ldr	r3, [r7, #12]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d032      	beq.n	80085d0 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800856a:	68f8      	ldr	r0, [r7, #12]
 800856c:	f000 f834 	bl	80085d8 <USBD_GetLen>
 8008570:	4603      	mov	r3, r0
 8008572:	3301      	adds	r3, #1
 8008574:	b29b      	uxth	r3, r3
 8008576:	005b      	lsls	r3, r3, #1
 8008578:	b29a      	uxth	r2, r3
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800857e:	7dfb      	ldrb	r3, [r7, #23]
 8008580:	1c5a      	adds	r2, r3, #1
 8008582:	75fa      	strb	r2, [r7, #23]
 8008584:	461a      	mov	r2, r3
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	4413      	add	r3, r2
 800858a:	687a      	ldr	r2, [r7, #4]
 800858c:	7812      	ldrb	r2, [r2, #0]
 800858e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8008590:	7dfb      	ldrb	r3, [r7, #23]
 8008592:	1c5a      	adds	r2, r3, #1
 8008594:	75fa      	strb	r2, [r7, #23]
 8008596:	461a      	mov	r2, r3
 8008598:	68bb      	ldr	r3, [r7, #8]
 800859a:	4413      	add	r3, r2
 800859c:	2203      	movs	r2, #3
 800859e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 80085a0:	e012      	b.n	80085c8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	1c5a      	adds	r2, r3, #1
 80085a6:	60fa      	str	r2, [r7, #12]
 80085a8:	7dfa      	ldrb	r2, [r7, #23]
 80085aa:	1c51      	adds	r1, r2, #1
 80085ac:	75f9      	strb	r1, [r7, #23]
 80085ae:	4611      	mov	r1, r2
 80085b0:	68ba      	ldr	r2, [r7, #8]
 80085b2:	440a      	add	r2, r1
 80085b4:	781b      	ldrb	r3, [r3, #0]
 80085b6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 80085b8:	7dfb      	ldrb	r3, [r7, #23]
 80085ba:	1c5a      	adds	r2, r3, #1
 80085bc:	75fa      	strb	r2, [r7, #23]
 80085be:	461a      	mov	r2, r3
 80085c0:	68bb      	ldr	r3, [r7, #8]
 80085c2:	4413      	add	r3, r2
 80085c4:	2200      	movs	r2, #0
 80085c6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	781b      	ldrb	r3, [r3, #0]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d1e8      	bne.n	80085a2 <USBD_GetString+0x4e>
    }
  }
}
 80085d0:	bf00      	nop
 80085d2:	3718      	adds	r7, #24
 80085d4:	46bd      	mov	sp, r7
 80085d6:	bd80      	pop	{r7, pc}

080085d8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80085e0:	2300      	movs	r3, #0
 80085e2:	73fb      	strb	r3, [r7, #15]

  while (*buf != '\0')
 80085e4:	e005      	b.n	80085f2 <USBD_GetLen+0x1a>
  {
    len++;
 80085e6:	7bfb      	ldrb	r3, [r7, #15]
 80085e8:	3301      	adds	r3, #1
 80085ea:	73fb      	strb	r3, [r7, #15]
    buf++;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	3301      	adds	r3, #1
 80085f0:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	781b      	ldrb	r3, [r3, #0]
 80085f6:	2b00      	cmp	r3, #0
 80085f8:	d1f5      	bne.n	80085e6 <USBD_GetLen+0xe>
  }

  return len;
 80085fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80085fc:	4618      	mov	r0, r3
 80085fe:	3714      	adds	r7, #20
 8008600:	46bd      	mov	sp, r7
 8008602:	bc80      	pop	{r7}
 8008604:	4770      	bx	lr

08008606 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8008606:	b580      	push	{r7, lr}
 8008608:	b084      	sub	sp, #16
 800860a:	af00      	add	r7, sp, #0
 800860c:	60f8      	str	r0, [r7, #12]
 800860e:	60b9      	str	r1, [r7, #8]
 8008610:	4613      	mov	r3, r2
 8008612:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	2202      	movs	r2, #2
 8008618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800861c:	88fa      	ldrh	r2, [r7, #6]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8008622:	88fa      	ldrh	r2, [r7, #6]
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008628:	88fb      	ldrh	r3, [r7, #6]
 800862a:	68ba      	ldr	r2, [r7, #8]
 800862c:	2100      	movs	r1, #0
 800862e:	68f8      	ldr	r0, [r7, #12]
 8008630:	f000 fc6f 	bl	8008f12 <USBD_LL_Transmit>

  return USBD_OK;
 8008634:	2300      	movs	r3, #0
}
 8008636:	4618      	mov	r0, r3
 8008638:	3710      	adds	r7, #16
 800863a:	46bd      	mov	sp, r7
 800863c:	bd80      	pop	{r7, pc}

0800863e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 800863e:	b580      	push	{r7, lr}
 8008640:	b084      	sub	sp, #16
 8008642:	af00      	add	r7, sp, #0
 8008644:	60f8      	str	r0, [r7, #12]
 8008646:	60b9      	str	r1, [r7, #8]
 8008648:	4613      	mov	r3, r2
 800864a:	80fb      	strh	r3, [r7, #6]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800864c:	88fb      	ldrh	r3, [r7, #6]
 800864e:	68ba      	ldr	r2, [r7, #8]
 8008650:	2100      	movs	r1, #0
 8008652:	68f8      	ldr	r0, [r7, #12]
 8008654:	f000 fc5d 	bl	8008f12 <USBD_LL_Transmit>

  return USBD_OK;
 8008658:	2300      	movs	r3, #0
}
 800865a:	4618      	mov	r0, r3
 800865c:	3710      	adds	r7, #16
 800865e:	46bd      	mov	sp, r7
 8008660:	bd80      	pop	{r7, pc}

08008662 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8008662:	b580      	push	{r7, lr}
 8008664:	b084      	sub	sp, #16
 8008666:	af00      	add	r7, sp, #0
 8008668:	60f8      	str	r0, [r7, #12]
 800866a:	60b9      	str	r1, [r7, #8]
 800866c:	4613      	mov	r3, r2
 800866e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2203      	movs	r2, #3
 8008674:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008678:	88fa      	ldrh	r2, [r7, #6]
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
  pdev->ep_out[0].rem_length   = len;
 8008680:	88fa      	ldrh	r2, [r7, #6]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008688:	88fb      	ldrh	r3, [r7, #6]
 800868a:	68ba      	ldr	r2, [r7, #8]
 800868c:	2100      	movs	r1, #0
 800868e:	68f8      	ldr	r0, [r7, #12]
 8008690:	f000 fc62 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008694:	2300      	movs	r3, #0
}
 8008696:	4618      	mov	r0, r3
 8008698:	3710      	adds	r7, #16
 800869a:	46bd      	mov	sp, r7
 800869c:	bd80      	pop	{r7, pc}

0800869e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 800869e:	b580      	push	{r7, lr}
 80086a0:	b084      	sub	sp, #16
 80086a2:	af00      	add	r7, sp, #0
 80086a4:	60f8      	str	r0, [r7, #12]
 80086a6:	60b9      	str	r1, [r7, #8]
 80086a8:	4613      	mov	r3, r2
 80086aa:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80086ac:	88fb      	ldrh	r3, [r7, #6]
 80086ae:	68ba      	ldr	r2, [r7, #8]
 80086b0:	2100      	movs	r1, #0
 80086b2:	68f8      	ldr	r0, [r7, #12]
 80086b4:	f000 fc50 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80086b8:	2300      	movs	r3, #0
}
 80086ba:	4618      	mov	r0, r3
 80086bc:	3710      	adds	r7, #16
 80086be:	46bd      	mov	sp, r7
 80086c0:	bd80      	pop	{r7, pc}

080086c2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80086c2:	b580      	push	{r7, lr}
 80086c4:	b082      	sub	sp, #8
 80086c6:	af00      	add	r7, sp, #0
 80086c8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	2204      	movs	r2, #4
 80086ce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80086d2:	2300      	movs	r3, #0
 80086d4:	2200      	movs	r2, #0
 80086d6:	2100      	movs	r1, #0
 80086d8:	6878      	ldr	r0, [r7, #4]
 80086da:	f000 fc1a 	bl	8008f12 <USBD_LL_Transmit>

  return USBD_OK;
 80086de:	2300      	movs	r3, #0
}
 80086e0:	4618      	mov	r0, r3
 80086e2:	3708      	adds	r7, #8
 80086e4:	46bd      	mov	sp, r7
 80086e6:	bd80      	pop	{r7, pc}

080086e8 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2205      	movs	r2, #5
 80086f4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80086f8:	2300      	movs	r3, #0
 80086fa:	2200      	movs	r2, #0
 80086fc:	2100      	movs	r1, #0
 80086fe:	6878      	ldr	r0, [r7, #4]
 8008700:	f000 fc2a 	bl	8008f58 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008704:	2300      	movs	r3, #0
}
 8008706:	4618      	mov	r0, r3
 8008708:	3708      	adds	r7, #8
 800870a:	46bd      	mov	sp, r7
 800870c:	bd80      	pop	{r7, pc}
	...

08008710 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008714:	2200      	movs	r2, #0
 8008716:	4912      	ldr	r1, [pc, #72]	; (8008760 <MX_USB_DEVICE_Init+0x50>)
 8008718:	4812      	ldr	r0, [pc, #72]	; (8008764 <MX_USB_DEVICE_Init+0x54>)
 800871a:	f7fe ff5e 	bl	80075da <USBD_Init>
 800871e:	4603      	mov	r3, r0
 8008720:	2b00      	cmp	r3, #0
 8008722:	d001      	beq.n	8008728 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008724:	f7f8 f9c2 	bl	8000aac <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8008728:	490f      	ldr	r1, [pc, #60]	; (8008768 <MX_USB_DEVICE_Init+0x58>)
 800872a:	480e      	ldr	r0, [pc, #56]	; (8008764 <MX_USB_DEVICE_Init+0x54>)
 800872c:	f7fe ff80 	bl	8007630 <USBD_RegisterClass>
 8008730:	4603      	mov	r3, r0
 8008732:	2b00      	cmp	r3, #0
 8008734:	d001      	beq.n	800873a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008736:	f7f8 f9b9 	bl	8000aac <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800873a:	490c      	ldr	r1, [pc, #48]	; (800876c <MX_USB_DEVICE_Init+0x5c>)
 800873c:	4809      	ldr	r0, [pc, #36]	; (8008764 <MX_USB_DEVICE_Init+0x54>)
 800873e:	f7fe feb1 	bl	80074a4 <USBD_CDC_RegisterInterface>
 8008742:	4603      	mov	r3, r0
 8008744:	2b00      	cmp	r3, #0
 8008746:	d001      	beq.n	800874c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8008748:	f7f8 f9b0 	bl	8000aac <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800874c:	4805      	ldr	r0, [pc, #20]	; (8008764 <MX_USB_DEVICE_Init+0x54>)
 800874e:	f7fe ff88 	bl	8007662 <USBD_Start>
 8008752:	4603      	mov	r3, r0
 8008754:	2b00      	cmp	r3, #0
 8008756:	d001      	beq.n	800875c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8008758:	f7f8 f9a8 	bl	8000aac <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800875c:	bf00      	nop
 800875e:	bd80      	pop	{r7, pc}
 8008760:	20000134 	.word	0x20000134
 8008764:	2000036c 	.word	0x2000036c
 8008768:	20000020 	.word	0x20000020
 800876c:	20000124 	.word	0x20000124

08008770 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8008770:	b580      	push	{r7, lr}
 8008772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8008774:	2200      	movs	r2, #0
 8008776:	4905      	ldr	r1, [pc, #20]	; (800878c <CDC_Init_FS+0x1c>)
 8008778:	4805      	ldr	r0, [pc, #20]	; (8008790 <CDC_Init_FS+0x20>)
 800877a:	f7fe fea9 	bl	80074d0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800877e:	4905      	ldr	r1, [pc, #20]	; (8008794 <CDC_Init_FS+0x24>)
 8008780:	4803      	ldr	r0, [pc, #12]	; (8008790 <CDC_Init_FS+0x20>)
 8008782:	f7fe febe 	bl	8007502 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8008786:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8008788:	4618      	mov	r0, r3
 800878a:	bd80      	pop	{r7, pc}
 800878c:	20000a30 	.word	0x20000a30
 8008790:	2000036c 	.word	0x2000036c
 8008794:	20000630 	.word	0x20000630

08008798 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800879c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800879e:	4618      	mov	r0, r3
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bc80      	pop	{r7}
 80087a4:	4770      	bx	lr
	...

080087a8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80087a8:	b480      	push	{r7}
 80087aa:	b083      	sub	sp, #12
 80087ac:	af00      	add	r7, sp, #0
 80087ae:	4603      	mov	r3, r0
 80087b0:	6039      	str	r1, [r7, #0]
 80087b2:	71fb      	strb	r3, [r7, #7]
 80087b4:	4613      	mov	r3, r2
 80087b6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80087b8:	79fb      	ldrb	r3, [r7, #7]
 80087ba:	2b23      	cmp	r3, #35	; 0x23
 80087bc:	d84a      	bhi.n	8008854 <CDC_Control_FS+0xac>
 80087be:	a201      	add	r2, pc, #4	; (adr r2, 80087c4 <CDC_Control_FS+0x1c>)
 80087c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087c4:	08008855 	.word	0x08008855
 80087c8:	08008855 	.word	0x08008855
 80087cc:	08008855 	.word	0x08008855
 80087d0:	08008855 	.word	0x08008855
 80087d4:	08008855 	.word	0x08008855
 80087d8:	08008855 	.word	0x08008855
 80087dc:	08008855 	.word	0x08008855
 80087e0:	08008855 	.word	0x08008855
 80087e4:	08008855 	.word	0x08008855
 80087e8:	08008855 	.word	0x08008855
 80087ec:	08008855 	.word	0x08008855
 80087f0:	08008855 	.word	0x08008855
 80087f4:	08008855 	.word	0x08008855
 80087f8:	08008855 	.word	0x08008855
 80087fc:	08008855 	.word	0x08008855
 8008800:	08008855 	.word	0x08008855
 8008804:	08008855 	.word	0x08008855
 8008808:	08008855 	.word	0x08008855
 800880c:	08008855 	.word	0x08008855
 8008810:	08008855 	.word	0x08008855
 8008814:	08008855 	.word	0x08008855
 8008818:	08008855 	.word	0x08008855
 800881c:	08008855 	.word	0x08008855
 8008820:	08008855 	.word	0x08008855
 8008824:	08008855 	.word	0x08008855
 8008828:	08008855 	.word	0x08008855
 800882c:	08008855 	.word	0x08008855
 8008830:	08008855 	.word	0x08008855
 8008834:	08008855 	.word	0x08008855
 8008838:	08008855 	.word	0x08008855
 800883c:	08008855 	.word	0x08008855
 8008840:	08008855 	.word	0x08008855
 8008844:	08008855 	.word	0x08008855
 8008848:	08008855 	.word	0x08008855
 800884c:	08008855 	.word	0x08008855
 8008850:	08008855 	.word	0x08008855
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8008854:	bf00      	nop
  }

  return (USBD_OK);
 8008856:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8008858:	4618      	mov	r0, r3
 800885a:	370c      	adds	r7, #12
 800885c:	46bd      	mov	sp, r7
 800885e:	bc80      	pop	{r7}
 8008860:	4770      	bx	lr
 8008862:	bf00      	nop

08008864 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8008864:	b580      	push	{r7, lr}
 8008866:	b084      	sub	sp, #16
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
 800886c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800886e:	6879      	ldr	r1, [r7, #4]
 8008870:	4809      	ldr	r0, [pc, #36]	; (8008898 <CDC_Receive_FS+0x34>)
 8008872:	f7fe fe46 	bl	8007502 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8008876:	4808      	ldr	r0, [pc, #32]	; (8008898 <CDC_Receive_FS+0x34>)
 8008878:	f7fe fe85 	bl	8007586 <USBD_CDC_ReceivePacket>
  uint8_t len = (uint8_t) *Len;
 800887c:	683b      	ldr	r3, [r7, #0]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	73fb      	strb	r3, [r7, #15]
  memcpy(buffer, Buf, len);
 8008882:	7bfb      	ldrb	r3, [r7, #15]
 8008884:	461a      	mov	r2, r3
 8008886:	6879      	ldr	r1, [r7, #4]
 8008888:	4804      	ldr	r0, [pc, #16]	; (800889c <CDC_Receive_FS+0x38>)
 800888a:	f000 fc0b 	bl	80090a4 <memcpy>
  return (USBD_OK);
 800888e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008890:	4618      	mov	r0, r3
 8008892:	3710      	adds	r7, #16
 8008894:	46bd      	mov	sp, r7
 8008896:	bd80      	pop	{r7, pc}
 8008898:	2000036c 	.word	0x2000036c
 800889c:	20000340 	.word	0x20000340

080088a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b084      	sub	sp, #16
 80088a4:	af00      	add	r7, sp, #0
 80088a6:	6078      	str	r0, [r7, #4]
 80088a8:	460b      	mov	r3, r1
 80088aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80088ac:	2300      	movs	r3, #0
 80088ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80088b0:	4b0d      	ldr	r3, [pc, #52]	; (80088e8 <CDC_Transmit_FS+0x48>)
 80088b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80088b8:	68bb      	ldr	r3, [r7, #8]
 80088ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d001      	beq.n	80088c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80088c2:	2301      	movs	r3, #1
 80088c4:	e00b      	b.n	80088de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80088c6:	887b      	ldrh	r3, [r7, #2]
 80088c8:	461a      	mov	r2, r3
 80088ca:	6879      	ldr	r1, [r7, #4]
 80088cc:	4806      	ldr	r0, [pc, #24]	; (80088e8 <CDC_Transmit_FS+0x48>)
 80088ce:	f7fe fdff 	bl	80074d0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80088d2:	4805      	ldr	r0, [pc, #20]	; (80088e8 <CDC_Transmit_FS+0x48>)
 80088d4:	f7fe fe28 	bl	8007528 <USBD_CDC_TransmitPacket>
 80088d8:	4603      	mov	r3, r0
 80088da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80088dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80088de:	4618      	mov	r0, r3
 80088e0:	3710      	adds	r7, #16
 80088e2:	46bd      	mov	sp, r7
 80088e4:	bd80      	pop	{r7, pc}
 80088e6:	bf00      	nop
 80088e8:	2000036c 	.word	0x2000036c

080088ec <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80088ec:	b480      	push	{r7}
 80088ee:	b083      	sub	sp, #12
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	4603      	mov	r3, r0
 80088f4:	6039      	str	r1, [r7, #0]
 80088f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	2212      	movs	r2, #18
 80088fc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80088fe:	4b03      	ldr	r3, [pc, #12]	; (800890c <USBD_FS_DeviceDescriptor+0x20>)
}
 8008900:	4618      	mov	r0, r3
 8008902:	370c      	adds	r7, #12
 8008904:	46bd      	mov	sp, r7
 8008906:	bc80      	pop	{r7}
 8008908:	4770      	bx	lr
 800890a:	bf00      	nop
 800890c:	20000150 	.word	0x20000150

08008910 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008910:	b480      	push	{r7}
 8008912:	b083      	sub	sp, #12
 8008914:	af00      	add	r7, sp, #0
 8008916:	4603      	mov	r3, r0
 8008918:	6039      	str	r1, [r7, #0]
 800891a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800891c:	683b      	ldr	r3, [r7, #0]
 800891e:	2204      	movs	r2, #4
 8008920:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008922:	4b03      	ldr	r3, [pc, #12]	; (8008930 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008924:	4618      	mov	r0, r3
 8008926:	370c      	adds	r7, #12
 8008928:	46bd      	mov	sp, r7
 800892a:	bc80      	pop	{r7}
 800892c:	4770      	bx	lr
 800892e:	bf00      	nop
 8008930:	20000164 	.word	0x20000164

08008934 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008934:	b580      	push	{r7, lr}
 8008936:	b082      	sub	sp, #8
 8008938:	af00      	add	r7, sp, #0
 800893a:	4603      	mov	r3, r0
 800893c:	6039      	str	r1, [r7, #0]
 800893e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008940:	79fb      	ldrb	r3, [r7, #7]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d105      	bne.n	8008952 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	4907      	ldr	r1, [pc, #28]	; (8008968 <USBD_FS_ProductStrDescriptor+0x34>)
 800894a:	4808      	ldr	r0, [pc, #32]	; (800896c <USBD_FS_ProductStrDescriptor+0x38>)
 800894c:	f7ff fe02 	bl	8008554 <USBD_GetString>
 8008950:	e004      	b.n	800895c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008952:	683a      	ldr	r2, [r7, #0]
 8008954:	4904      	ldr	r1, [pc, #16]	; (8008968 <USBD_FS_ProductStrDescriptor+0x34>)
 8008956:	4805      	ldr	r0, [pc, #20]	; (800896c <USBD_FS_ProductStrDescriptor+0x38>)
 8008958:	f7ff fdfc 	bl	8008554 <USBD_GetString>
  }
  return USBD_StrDesc;
 800895c:	4b02      	ldr	r3, [pc, #8]	; (8008968 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800895e:	4618      	mov	r0, r3
 8008960:	3708      	adds	r7, #8
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	20000e30 	.word	0x20000e30
 800896c:	08009104 	.word	0x08009104

08008970 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008970:	b580      	push	{r7, lr}
 8008972:	b082      	sub	sp, #8
 8008974:	af00      	add	r7, sp, #0
 8008976:	4603      	mov	r3, r0
 8008978:	6039      	str	r1, [r7, #0]
 800897a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800897c:	683a      	ldr	r2, [r7, #0]
 800897e:	4904      	ldr	r1, [pc, #16]	; (8008990 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8008980:	4804      	ldr	r0, [pc, #16]	; (8008994 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8008982:	f7ff fde7 	bl	8008554 <USBD_GetString>
  return USBD_StrDesc;
 8008986:	4b02      	ldr	r3, [pc, #8]	; (8008990 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}
 8008990:	20000e30 	.word	0x20000e30
 8008994:	08009118 	.word	0x08009118

08008998 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008998:	b580      	push	{r7, lr}
 800899a:	b082      	sub	sp, #8
 800899c:	af00      	add	r7, sp, #0
 800899e:	4603      	mov	r3, r0
 80089a0:	6039      	str	r1, [r7, #0]
 80089a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80089a4:	683b      	ldr	r3, [r7, #0]
 80089a6:	221a      	movs	r2, #26
 80089a8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80089aa:	f000 f843 	bl	8008a34 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80089ae:	4b02      	ldr	r3, [pc, #8]	; (80089b8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80089b0:	4618      	mov	r0, r3
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}
 80089b8:	20000168 	.word	0x20000168

080089bc <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089bc:	b580      	push	{r7, lr}
 80089be:	b082      	sub	sp, #8
 80089c0:	af00      	add	r7, sp, #0
 80089c2:	4603      	mov	r3, r0
 80089c4:	6039      	str	r1, [r7, #0]
 80089c6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80089c8:	79fb      	ldrb	r3, [r7, #7]
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d105      	bne.n	80089da <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089ce:	683a      	ldr	r2, [r7, #0]
 80089d0:	4907      	ldr	r1, [pc, #28]	; (80089f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089d2:	4808      	ldr	r0, [pc, #32]	; (80089f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089d4:	f7ff fdbe 	bl	8008554 <USBD_GetString>
 80089d8:	e004      	b.n	80089e4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80089da:	683a      	ldr	r2, [r7, #0]
 80089dc:	4904      	ldr	r1, [pc, #16]	; (80089f0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80089de:	4805      	ldr	r0, [pc, #20]	; (80089f4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80089e0:	f7ff fdb8 	bl	8008554 <USBD_GetString>
  }
  return USBD_StrDesc;
 80089e4:	4b02      	ldr	r3, [pc, #8]	; (80089f0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}
 80089ee:	bf00      	nop
 80089f0:	20000e30 	.word	0x20000e30
 80089f4:	0800912c 	.word	0x0800912c

080089f8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	4603      	mov	r3, r0
 8008a00:	6039      	str	r1, [r7, #0]
 8008a02:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008a04:	79fb      	ldrb	r3, [r7, #7]
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d105      	bne.n	8008a16 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a0a:	683a      	ldr	r2, [r7, #0]
 8008a0c:	4907      	ldr	r1, [pc, #28]	; (8008a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a0e:	4808      	ldr	r0, [pc, #32]	; (8008a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a10:	f7ff fda0 	bl	8008554 <USBD_GetString>
 8008a14:	e004      	b.n	8008a20 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8008a16:	683a      	ldr	r2, [r7, #0]
 8008a18:	4904      	ldr	r1, [pc, #16]	; (8008a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008a1a:	4805      	ldr	r0, [pc, #20]	; (8008a30 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008a1c:	f7ff fd9a 	bl	8008554 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008a20:	4b02      	ldr	r3, [pc, #8]	; (8008a2c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3708      	adds	r7, #8
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20000e30 	.word	0x20000e30
 8008a30:	08009138 	.word	0x08009138

08008a34 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008a34:	b580      	push	{r7, lr}
 8008a36:	b084      	sub	sp, #16
 8008a38:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8008a3a:	4b0f      	ldr	r3, [pc, #60]	; (8008a78 <Get_SerialNum+0x44>)
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008a40:	4b0e      	ldr	r3, [pc, #56]	; (8008a7c <Get_SerialNum+0x48>)
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8008a46:	4b0e      	ldr	r3, [pc, #56]	; (8008a80 <Get_SerialNum+0x4c>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008a4c:	68fa      	ldr	r2, [r7, #12]
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	4413      	add	r3, r2
 8008a52:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d009      	beq.n	8008a6e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8008a5a:	2208      	movs	r2, #8
 8008a5c:	4909      	ldr	r1, [pc, #36]	; (8008a84 <Get_SerialNum+0x50>)
 8008a5e:	68f8      	ldr	r0, [r7, #12]
 8008a60:	f000 f814 	bl	8008a8c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008a64:	2204      	movs	r2, #4
 8008a66:	4908      	ldr	r1, [pc, #32]	; (8008a88 <Get_SerialNum+0x54>)
 8008a68:	68b8      	ldr	r0, [r7, #8]
 8008a6a:	f000 f80f 	bl	8008a8c <IntToUnicode>
  }
}
 8008a6e:	bf00      	nop
 8008a70:	3710      	adds	r7, #16
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	bf00      	nop
 8008a78:	1ffff7e8 	.word	0x1ffff7e8
 8008a7c:	1ffff7ec 	.word	0x1ffff7ec
 8008a80:	1ffff7f0 	.word	0x1ffff7f0
 8008a84:	2000016a 	.word	0x2000016a
 8008a88:	2000017a 	.word	0x2000017a

08008a8c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	4613      	mov	r3, r2
 8008a98:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	75fb      	strb	r3, [r7, #23]
 8008aa2:	e027      	b.n	8008af4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	0f1b      	lsrs	r3, r3, #28
 8008aa8:	2b09      	cmp	r3, #9
 8008aaa:	d80b      	bhi.n	8008ac4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	0f1b      	lsrs	r3, r3, #28
 8008ab0:	b2da      	uxtb	r2, r3
 8008ab2:	7dfb      	ldrb	r3, [r7, #23]
 8008ab4:	005b      	lsls	r3, r3, #1
 8008ab6:	4619      	mov	r1, r3
 8008ab8:	68bb      	ldr	r3, [r7, #8]
 8008aba:	440b      	add	r3, r1
 8008abc:	3230      	adds	r2, #48	; 0x30
 8008abe:	b2d2      	uxtb	r2, r2
 8008ac0:	701a      	strb	r2, [r3, #0]
 8008ac2:	e00a      	b.n	8008ada <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	0f1b      	lsrs	r3, r3, #28
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	7dfb      	ldrb	r3, [r7, #23]
 8008acc:	005b      	lsls	r3, r3, #1
 8008ace:	4619      	mov	r1, r3
 8008ad0:	68bb      	ldr	r3, [r7, #8]
 8008ad2:	440b      	add	r3, r1
 8008ad4:	3237      	adds	r2, #55	; 0x37
 8008ad6:	b2d2      	uxtb	r2, r2
 8008ad8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	011b      	lsls	r3, r3, #4
 8008ade:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008ae0:	7dfb      	ldrb	r3, [r7, #23]
 8008ae2:	005b      	lsls	r3, r3, #1
 8008ae4:	3301      	adds	r3, #1
 8008ae6:	68ba      	ldr	r2, [r7, #8]
 8008ae8:	4413      	add	r3, r2
 8008aea:	2200      	movs	r2, #0
 8008aec:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008aee:	7dfb      	ldrb	r3, [r7, #23]
 8008af0:	3301      	adds	r3, #1
 8008af2:	75fb      	strb	r3, [r7, #23]
 8008af4:	7dfa      	ldrb	r2, [r7, #23]
 8008af6:	79fb      	ldrb	r3, [r7, #7]
 8008af8:	429a      	cmp	r2, r3
 8008afa:	d3d3      	bcc.n	8008aa4 <IntToUnicode+0x18>
  }
}
 8008afc:	bf00      	nop
 8008afe:	bf00      	nop
 8008b00:	371c      	adds	r7, #28
 8008b02:	46bd      	mov	sp, r7
 8008b04:	bc80      	pop	{r7}
 8008b06:	4770      	bx	lr

08008b08 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	4a0d      	ldr	r2, [pc, #52]	; (8008b4c <HAL_PCD_MspInit+0x44>)
 8008b16:	4293      	cmp	r3, r2
 8008b18:	d113      	bne.n	8008b42 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8008b1a:	4b0d      	ldr	r3, [pc, #52]	; (8008b50 <HAL_PCD_MspInit+0x48>)
 8008b1c:	69db      	ldr	r3, [r3, #28]
 8008b1e:	4a0c      	ldr	r2, [pc, #48]	; (8008b50 <HAL_PCD_MspInit+0x48>)
 8008b20:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8008b24:	61d3      	str	r3, [r2, #28]
 8008b26:	4b0a      	ldr	r3, [pc, #40]	; (8008b50 <HAL_PCD_MspInit+0x48>)
 8008b28:	69db      	ldr	r3, [r3, #28]
 8008b2a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008b2e:	60fb      	str	r3, [r7, #12]
 8008b30:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_CAN1_RX0_IRQn, 0, 0);
 8008b32:	2200      	movs	r2, #0
 8008b34:	2100      	movs	r1, #0
 8008b36:	2014      	movs	r0, #20
 8008b38:	f7f8 fa0b 	bl	8000f52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_CAN1_RX0_IRQn);
 8008b3c:	2014      	movs	r0, #20
 8008b3e:	f7f8 fa24 	bl	8000f8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8008b42:	bf00      	nop
 8008b44:	3710      	adds	r7, #16
 8008b46:	46bd      	mov	sp, r7
 8008b48:	bd80      	pop	{r7, pc}
 8008b4a:	bf00      	nop
 8008b4c:	40005c00 	.word	0x40005c00
 8008b50:	40021000 	.word	0x40021000

08008b54 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b54:	b580      	push	{r7, lr}
 8008b56:	b082      	sub	sp, #8
 8008b58:	af00      	add	r7, sp, #0
 8008b5a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8008b68:	4619      	mov	r1, r3
 8008b6a:	4610      	mov	r0, r2
 8008b6c:	f7fe fdc1 	bl	80076f2 <USBD_LL_SetupStage>
}
 8008b70:	bf00      	nop
 8008b72:	3708      	adds	r7, #8
 8008b74:	46bd      	mov	sp, r7
 8008b76:	bd80      	pop	{r7, pc}

08008b78 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008b78:	b580      	push	{r7, lr}
 8008b7a:	b082      	sub	sp, #8
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	6078      	str	r0, [r7, #4]
 8008b80:	460b      	mov	r3, r1
 8008b82:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008b8a:	78fa      	ldrb	r2, [r7, #3]
 8008b8c:	6879      	ldr	r1, [r7, #4]
 8008b8e:	4613      	mov	r3, r2
 8008b90:	009b      	lsls	r3, r3, #2
 8008b92:	4413      	add	r3, r2
 8008b94:	00db      	lsls	r3, r3, #3
 8008b96:	440b      	add	r3, r1
 8008b98:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8008b9c:	681a      	ldr	r2, [r3, #0]
 8008b9e:	78fb      	ldrb	r3, [r7, #3]
 8008ba0:	4619      	mov	r1, r3
 8008ba2:	f7fe fdf3 	bl	800778c <USBD_LL_DataOutStage>
}
 8008ba6:	bf00      	nop
 8008ba8:	3708      	adds	r7, #8
 8008baa:	46bd      	mov	sp, r7
 8008bac:	bd80      	pop	{r7, pc}

08008bae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bae:	b580      	push	{r7, lr}
 8008bb0:	b082      	sub	sp, #8
 8008bb2:	af00      	add	r7, sp, #0
 8008bb4:	6078      	str	r0, [r7, #4]
 8008bb6:	460b      	mov	r3, r1
 8008bb8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8008bba:	687b      	ldr	r3, [r7, #4]
 8008bbc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8008bc0:	78fa      	ldrb	r2, [r7, #3]
 8008bc2:	6879      	ldr	r1, [r7, #4]
 8008bc4:	4613      	mov	r3, r2
 8008bc6:	009b      	lsls	r3, r3, #2
 8008bc8:	4413      	add	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	440b      	add	r3, r1
 8008bce:	333c      	adds	r3, #60	; 0x3c
 8008bd0:	681a      	ldr	r2, [r3, #0]
 8008bd2:	78fb      	ldrb	r3, [r7, #3]
 8008bd4:	4619      	mov	r1, r3
 8008bd6:	f7fe fe4a 	bl	800786e <USBD_LL_DataInStage>
}
 8008bda:	bf00      	nop
 8008bdc:	3708      	adds	r7, #8
 8008bde:	46bd      	mov	sp, r7
 8008be0:	bd80      	pop	{r7, pc}

08008be2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008be2:	b580      	push	{r7, lr}
 8008be4:	b082      	sub	sp, #8
 8008be6:	af00      	add	r7, sp, #0
 8008be8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	f7fe ff5a 	bl	8007aaa <USBD_LL_SOF>
}
 8008bf6:	bf00      	nop
 8008bf8:	3708      	adds	r7, #8
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	bd80      	pop	{r7, pc}

08008bfe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8008c06:	2301      	movs	r3, #1
 8008c08:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	2b02      	cmp	r3, #2
 8008c10:	d001      	beq.n	8008c16 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8008c12:	f7f7 ff4b 	bl	8000aac <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c1c:	7bfa      	ldrb	r2, [r7, #15]
 8008c1e:	4611      	mov	r1, r2
 8008c20:	4618      	mov	r0, r3
 8008c22:	f7fe ff0a 	bl	8007a3a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	f7fe fec3 	bl	80079b8 <USBD_LL_Reset>
}
 8008c32:	bf00      	nop
 8008c34:	3710      	adds	r7, #16
 8008c36:	46bd      	mov	sp, r7
 8008c38:	bd80      	pop	{r7, pc}
	...

08008c3c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f7fe ff04 	bl	8007a58 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	699b      	ldr	r3, [r3, #24]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d005      	beq.n	8008c64 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008c58:	4b04      	ldr	r3, [pc, #16]	; (8008c6c <HAL_PCD_SuspendCallback+0x30>)
 8008c5a:	691b      	ldr	r3, [r3, #16]
 8008c5c:	4a03      	ldr	r2, [pc, #12]	; (8008c6c <HAL_PCD_SuspendCallback+0x30>)
 8008c5e:	f043 0306 	orr.w	r3, r3, #6
 8008c62:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008c64:	bf00      	nop
 8008c66:	3708      	adds	r7, #8
 8008c68:	46bd      	mov	sp, r7
 8008c6a:	bd80      	pop	{r7, pc}
 8008c6c:	e000ed00 	.word	0xe000ed00

08008c70 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008c70:	b580      	push	{r7, lr}
 8008c72:	b082      	sub	sp, #8
 8008c74:	af00      	add	r7, sp, #0
 8008c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8008c7e:	4618      	mov	r0, r3
 8008c80:	f7fe fefe 	bl	8007a80 <USBD_LL_Resume>
}
 8008c84:	bf00      	nop
 8008c86:	3708      	adds	r7, #8
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	bd80      	pop	{r7, pc}

08008c8c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b082      	sub	sp, #8
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8008c94:	4a28      	ldr	r2, [pc, #160]	; (8008d38 <USBD_LL_Init+0xac>)
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	4a26      	ldr	r2, [pc, #152]	; (8008d38 <USBD_LL_Init+0xac>)
 8008ca0:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  hpcd_USB_FS.Instance = USB;
 8008ca4:	4b24      	ldr	r3, [pc, #144]	; (8008d38 <USBD_LL_Init+0xac>)
 8008ca6:	4a25      	ldr	r2, [pc, #148]	; (8008d3c <USBD_LL_Init+0xb0>)
 8008ca8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8008caa:	4b23      	ldr	r3, [pc, #140]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cac:	2208      	movs	r2, #8
 8008cae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8008cb0:	4b21      	ldr	r3, [pc, #132]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cb2:	2202      	movs	r2, #2
 8008cb4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8008cb6:	4b20      	ldr	r3, [pc, #128]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cb8:	2200      	movs	r2, #0
 8008cba:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8008cbc:	4b1e      	ldr	r3, [pc, #120]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cbe:	2200      	movs	r2, #0
 8008cc0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8008cc2:	4b1d      	ldr	r3, [pc, #116]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cc4:	2200      	movs	r2, #0
 8008cc6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8008cc8:	481b      	ldr	r0, [pc, #108]	; (8008d38 <USBD_LL_Init+0xac>)
 8008cca:	f7f8 fb2e 	bl	800132a <HAL_PCD_Init>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d001      	beq.n	8008cd8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8008cd4:	f7f7 feea 	bl	8000aac <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cde:	2318      	movs	r3, #24
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	2100      	movs	r1, #0
 8008ce4:	f7f9 ffa2 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cee:	2358      	movs	r3, #88	; 0x58
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	2180      	movs	r1, #128	; 0x80
 8008cf4:	f7f9 ff9a 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008cfe:	23c0      	movs	r3, #192	; 0xc0
 8008d00:	2200      	movs	r2, #0
 8008d02:	2181      	movs	r1, #129	; 0x81
 8008d04:	f7f9 ff92 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d0e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8008d12:	2200      	movs	r2, #0
 8008d14:	2101      	movs	r1, #1
 8008d16:	f7f9 ff89 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d20:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008d24:	2200      	movs	r2, #0
 8008d26:	2182      	movs	r1, #130	; 0x82
 8008d28:	f7f9 ff80 	bl	8002c2c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8008d2c:	2300      	movs	r3, #0
}
 8008d2e:	4618      	mov	r0, r3
 8008d30:	3708      	adds	r7, #8
 8008d32:	46bd      	mov	sp, r7
 8008d34:	bd80      	pop	{r7, pc}
 8008d36:	bf00      	nop
 8008d38:	20001030 	.word	0x20001030
 8008d3c:	40005c00 	.word	0x40005c00

08008d40 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b084      	sub	sp, #16
 8008d44:	af00      	add	r7, sp, #0
 8008d46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d48:	2300      	movs	r3, #0
 8008d4a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008d56:	4618      	mov	r0, r3
 8008d58:	f7f8 fbf2 	bl	8001540 <HAL_PCD_Start>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008d60:	7bfb      	ldrb	r3, [r7, #15]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 f94e 	bl	8009004 <USBD_Get_USB_Status>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008d6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	3710      	adds	r7, #16
 8008d72:	46bd      	mov	sp, r7
 8008d74:	bd80      	pop	{r7, pc}

08008d76 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008d76:	b580      	push	{r7, lr}
 8008d78:	b084      	sub	sp, #16
 8008d7a:	af00      	add	r7, sp, #0
 8008d7c:	6078      	str	r0, [r7, #4]
 8008d7e:	4608      	mov	r0, r1
 8008d80:	4611      	mov	r1, r2
 8008d82:	461a      	mov	r2, r3
 8008d84:	4603      	mov	r3, r0
 8008d86:	70fb      	strb	r3, [r7, #3]
 8008d88:	460b      	mov	r3, r1
 8008d8a:	70bb      	strb	r3, [r7, #2]
 8008d8c:	4613      	mov	r3, r2
 8008d8e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008d90:	2300      	movs	r3, #0
 8008d92:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008d9e:	78bb      	ldrb	r3, [r7, #2]
 8008da0:	883a      	ldrh	r2, [r7, #0]
 8008da2:	78f9      	ldrb	r1, [r7, #3]
 8008da4:	f7f8 fd6a 	bl	800187c <HAL_PCD_EP_Open>
 8008da8:	4603      	mov	r3, r0
 8008daa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dac:	7bfb      	ldrb	r3, [r7, #15]
 8008dae:	4618      	mov	r0, r3
 8008db0:	f000 f928 	bl	8009004 <USBD_Get_USB_Status>
 8008db4:	4603      	mov	r3, r0
 8008db6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008db8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3710      	adds	r7, #16
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}

08008dc2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	6078      	str	r0, [r7, #4]
 8008dca:	460b      	mov	r3, r1
 8008dcc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008ddc:	78fa      	ldrb	r2, [r7, #3]
 8008dde:	4611      	mov	r1, r2
 8008de0:	4618      	mov	r0, r3
 8008de2:	f7f8 fdb1 	bl	8001948 <HAL_PCD_EP_Close>
 8008de6:	4603      	mov	r3, r0
 8008de8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008dea:	7bfb      	ldrb	r3, [r7, #15]
 8008dec:	4618      	mov	r0, r3
 8008dee:	f000 f909 	bl	8009004 <USBD_Get_USB_Status>
 8008df2:	4603      	mov	r3, r0
 8008df4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008df6:	7bbb      	ldrb	r3, [r7, #14]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3710      	adds	r7, #16
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	bd80      	pop	{r7, pc}

08008e00 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e00:	b580      	push	{r7, lr}
 8008e02:	b084      	sub	sp, #16
 8008e04:	af00      	add	r7, sp, #0
 8008e06:	6078      	str	r0, [r7, #4]
 8008e08:	460b      	mov	r3, r1
 8008e0a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e10:	2300      	movs	r3, #0
 8008e12:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e1a:	78fa      	ldrb	r2, [r7, #3]
 8008e1c:	4611      	mov	r1, r2
 8008e1e:	4618      	mov	r0, r3
 8008e20:	f7f8 fe71 	bl	8001b06 <HAL_PCD_EP_SetStall>
 8008e24:	4603      	mov	r3, r0
 8008e26:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e28:	7bfb      	ldrb	r3, [r7, #15]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8ea 	bl	8009004 <USBD_Get_USB_Status>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e36:	4618      	mov	r0, r3
 8008e38:	3710      	adds	r7, #16
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	bd80      	pop	{r7, pc}

08008e3e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e3e:	b580      	push	{r7, lr}
 8008e40:	b084      	sub	sp, #16
 8008e42:	af00      	add	r7, sp, #0
 8008e44:	6078      	str	r0, [r7, #4]
 8008e46:	460b      	mov	r3, r1
 8008e48:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008e4e:	2300      	movs	r3, #0
 8008e50:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	4611      	mov	r1, r2
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	f7f8 feb2 	bl	8001bc6 <HAL_PCD_EP_ClrStall>
 8008e62:	4603      	mov	r3, r0
 8008e64:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008e66:	7bfb      	ldrb	r3, [r7, #15]
 8008e68:	4618      	mov	r0, r3
 8008e6a:	f000 f8cb 	bl	8009004 <USBD_Get_USB_Status>
 8008e6e:	4603      	mov	r3, r0
 8008e70:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008e72:	7bbb      	ldrb	r3, [r7, #14]
}
 8008e74:	4618      	mov	r0, r3
 8008e76:	3710      	adds	r7, #16
 8008e78:	46bd      	mov	sp, r7
 8008e7a:	bd80      	pop	{r7, pc}

08008e7c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008e7c:	b480      	push	{r7}
 8008e7e:	b085      	sub	sp, #20
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	6078      	str	r0, [r7, #4]
 8008e84:	460b      	mov	r3, r1
 8008e86:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008e8e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008e90:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	da0c      	bge.n	8008eb2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e9e:	68f9      	ldr	r1, [r7, #12]
 8008ea0:	1c5a      	adds	r2, r3, #1
 8008ea2:	4613      	mov	r3, r2
 8008ea4:	009b      	lsls	r3, r3, #2
 8008ea6:	4413      	add	r3, r2
 8008ea8:	00db      	lsls	r3, r3, #3
 8008eaa:	440b      	add	r3, r1
 8008eac:	3302      	adds	r3, #2
 8008eae:	781b      	ldrb	r3, [r3, #0]
 8008eb0:	e00b      	b.n	8008eca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008eb2:	78fb      	ldrb	r3, [r7, #3]
 8008eb4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008eb8:	68f9      	ldr	r1, [r7, #12]
 8008eba:	4613      	mov	r3, r2
 8008ebc:	009b      	lsls	r3, r3, #2
 8008ebe:	4413      	add	r3, r2
 8008ec0:	00db      	lsls	r3, r3, #3
 8008ec2:	440b      	add	r3, r1
 8008ec4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8008ec8:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008eca:	4618      	mov	r0, r3
 8008ecc:	3714      	adds	r7, #20
 8008ece:	46bd      	mov	sp, r7
 8008ed0:	bc80      	pop	{r7}
 8008ed2:	4770      	bx	lr

08008ed4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b084      	sub	sp, #16
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	460b      	mov	r3, r1
 8008ede:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ee4:	2300      	movs	r3, #0
 8008ee6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008eee:	78fa      	ldrb	r2, [r7, #3]
 8008ef0:	4611      	mov	r1, r2
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	f7f8 fc9d 	bl	8001832 <HAL_PCD_SetAddress>
 8008ef8:	4603      	mov	r3, r0
 8008efa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008efc:	7bfb      	ldrb	r3, [r7, #15]
 8008efe:	4618      	mov	r0, r3
 8008f00:	f000 f880 	bl	8009004 <USBD_Get_USB_Status>
 8008f04:	4603      	mov	r3, r0
 8008f06:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008f08:	7bbb      	ldrb	r3, [r7, #14]
}
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	3710      	adds	r7, #16
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	bd80      	pop	{r7, pc}

08008f12 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f12:	b580      	push	{r7, lr}
 8008f14:	b086      	sub	sp, #24
 8008f16:	af00      	add	r7, sp, #0
 8008f18:	60f8      	str	r0, [r7, #12]
 8008f1a:	607a      	str	r2, [r7, #4]
 8008f1c:	461a      	mov	r2, r3
 8008f1e:	460b      	mov	r3, r1
 8008f20:	72fb      	strb	r3, [r7, #11]
 8008f22:	4613      	mov	r3, r2
 8008f24:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f26:	2300      	movs	r3, #0
 8008f28:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008f2e:	68fb      	ldr	r3, [r7, #12]
 8008f30:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f34:	893b      	ldrh	r3, [r7, #8]
 8008f36:	7af9      	ldrb	r1, [r7, #11]
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	f7f8 fda1 	bl	8001a80 <HAL_PCD_EP_Transmit>
 8008f3e:	4603      	mov	r3, r0
 8008f40:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f42:	7dfb      	ldrb	r3, [r7, #23]
 8008f44:	4618      	mov	r0, r3
 8008f46:	f000 f85d 	bl	8009004 <USBD_Get_USB_Status>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f4e:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}

08008f58 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b086      	sub	sp, #24
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	60f8      	str	r0, [r7, #12]
 8008f60:	607a      	str	r2, [r7, #4]
 8008f62:	461a      	mov	r2, r3
 8008f64:	460b      	mov	r3, r1
 8008f66:	72fb      	strb	r3, [r7, #11]
 8008f68:	4613      	mov	r3, r2
 8008f6a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008f70:	2300      	movs	r3, #0
 8008f72:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f8d3 02c0 	ldr.w	r0, [r3, #704]	; 0x2c0
 8008f7a:	893b      	ldrh	r3, [r7, #8]
 8008f7c:	7af9      	ldrb	r1, [r7, #11]
 8008f7e:	687a      	ldr	r2, [r7, #4]
 8008f80:	f7f8 fd2a 	bl	80019d8 <HAL_PCD_EP_Receive>
 8008f84:	4603      	mov	r3, r0
 8008f86:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008f88:	7dfb      	ldrb	r3, [r7, #23]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	f000 f83a 	bl	8009004 <USBD_Get_USB_Status>
 8008f90:	4603      	mov	r3, r0
 8008f92:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008f94:	7dbb      	ldrb	r3, [r7, #22]
}
 8008f96:	4618      	mov	r0, r3
 8008f98:	3718      	adds	r7, #24
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b082      	sub	sp, #8
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	460b      	mov	r3, r1
 8008fa8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008fb0:	78fa      	ldrb	r2, [r7, #3]
 8008fb2:	4611      	mov	r1, r2
 8008fb4:	4618      	mov	r0, r3
 8008fb6:	f7f8 fd4c 	bl	8001a52 <HAL_PCD_EP_GetRxCount>
 8008fba:	4603      	mov	r3, r0
}
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	3708      	adds	r7, #8
 8008fc0:	46bd      	mov	sp, r7
 8008fc2:	bd80      	pop	{r7, pc}

08008fc4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008fcc:	4b02      	ldr	r3, [pc, #8]	; (8008fd8 <USBD_static_malloc+0x14>)
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	370c      	adds	r7, #12
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bc80      	pop	{r7}
 8008fd6:	4770      	bx	lr
 8008fd8:	2000131c 	.word	0x2000131c

08008fdc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008fdc:	b480      	push	{r7}
 8008fde:	b083      	sub	sp, #12
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	6078      	str	r0, [r7, #4]

}
 8008fe4:	bf00      	nop
 8008fe6:	370c      	adds	r7, #12
 8008fe8:	46bd      	mov	sp, r7
 8008fea:	bc80      	pop	{r7}
 8008fec:	4770      	bx	lr

08008fee <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	70fb      	strb	r3, [r7, #3]
  {
    /* Configure High connection state. */

  }
  /* USER CODE END 6 */
}
 8008ffa:	bf00      	nop
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	bc80      	pop	{r7}
 8009002:	4770      	bx	lr

08009004 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009004:	b480      	push	{r7}
 8009006:	b085      	sub	sp, #20
 8009008:	af00      	add	r7, sp, #0
 800900a:	4603      	mov	r3, r0
 800900c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800900e:	2300      	movs	r3, #0
 8009010:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009012:	79fb      	ldrb	r3, [r7, #7]
 8009014:	2b03      	cmp	r3, #3
 8009016:	d817      	bhi.n	8009048 <USBD_Get_USB_Status+0x44>
 8009018:	a201      	add	r2, pc, #4	; (adr r2, 8009020 <USBD_Get_USB_Status+0x1c>)
 800901a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800901e:	bf00      	nop
 8009020:	08009031 	.word	0x08009031
 8009024:	08009037 	.word	0x08009037
 8009028:	0800903d 	.word	0x0800903d
 800902c:	08009043 	.word	0x08009043
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009030:	2300      	movs	r3, #0
 8009032:	73fb      	strb	r3, [r7, #15]
    break;
 8009034:	e00b      	b.n	800904e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009036:	2302      	movs	r3, #2
 8009038:	73fb      	strb	r3, [r7, #15]
    break;
 800903a:	e008      	b.n	800904e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800903c:	2301      	movs	r3, #1
 800903e:	73fb      	strb	r3, [r7, #15]
    break;
 8009040:	e005      	b.n	800904e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009042:	2302      	movs	r3, #2
 8009044:	73fb      	strb	r3, [r7, #15]
    break;
 8009046:	e002      	b.n	800904e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009048:	2302      	movs	r3, #2
 800904a:	73fb      	strb	r3, [r7, #15]
    break;
 800904c:	bf00      	nop
  }
  return usb_status;
 800904e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009050:	4618      	mov	r0, r3
 8009052:	3714      	adds	r7, #20
 8009054:	46bd      	mov	sp, r7
 8009056:	bc80      	pop	{r7}
 8009058:	4770      	bx	lr
 800905a:	bf00      	nop

0800905c <__libc_init_array>:
 800905c:	b570      	push	{r4, r5, r6, lr}
 800905e:	2600      	movs	r6, #0
 8009060:	4d0c      	ldr	r5, [pc, #48]	; (8009094 <__libc_init_array+0x38>)
 8009062:	4c0d      	ldr	r4, [pc, #52]	; (8009098 <__libc_init_array+0x3c>)
 8009064:	1b64      	subs	r4, r4, r5
 8009066:	10a4      	asrs	r4, r4, #2
 8009068:	42a6      	cmp	r6, r4
 800906a:	d109      	bne.n	8009080 <__libc_init_array+0x24>
 800906c:	f000 f830 	bl	80090d0 <_init>
 8009070:	2600      	movs	r6, #0
 8009072:	4d0a      	ldr	r5, [pc, #40]	; (800909c <__libc_init_array+0x40>)
 8009074:	4c0a      	ldr	r4, [pc, #40]	; (80090a0 <__libc_init_array+0x44>)
 8009076:	1b64      	subs	r4, r4, r5
 8009078:	10a4      	asrs	r4, r4, #2
 800907a:	42a6      	cmp	r6, r4
 800907c:	d105      	bne.n	800908a <__libc_init_array+0x2e>
 800907e:	bd70      	pop	{r4, r5, r6, pc}
 8009080:	f855 3b04 	ldr.w	r3, [r5], #4
 8009084:	4798      	blx	r3
 8009086:	3601      	adds	r6, #1
 8009088:	e7ee      	b.n	8009068 <__libc_init_array+0xc>
 800908a:	f855 3b04 	ldr.w	r3, [r5], #4
 800908e:	4798      	blx	r3
 8009090:	3601      	adds	r6, #1
 8009092:	e7f2      	b.n	800907a <__libc_init_array+0x1e>
 8009094:	08009158 	.word	0x08009158
 8009098:	08009158 	.word	0x08009158
 800909c:	08009158 	.word	0x08009158
 80090a0:	0800915c 	.word	0x0800915c

080090a4 <memcpy>:
 80090a4:	440a      	add	r2, r1
 80090a6:	4291      	cmp	r1, r2
 80090a8:	f100 33ff 	add.w	r3, r0, #4294967295
 80090ac:	d100      	bne.n	80090b0 <memcpy+0xc>
 80090ae:	4770      	bx	lr
 80090b0:	b510      	push	{r4, lr}
 80090b2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80090b6:	4291      	cmp	r1, r2
 80090b8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80090bc:	d1f9      	bne.n	80090b2 <memcpy+0xe>
 80090be:	bd10      	pop	{r4, pc}

080090c0 <memset>:
 80090c0:	4603      	mov	r3, r0
 80090c2:	4402      	add	r2, r0
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d100      	bne.n	80090ca <memset+0xa>
 80090c8:	4770      	bx	lr
 80090ca:	f803 1b01 	strb.w	r1, [r3], #1
 80090ce:	e7f9      	b.n	80090c4 <memset+0x4>

080090d0 <_init>:
 80090d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090d2:	bf00      	nop
 80090d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090d6:	bc08      	pop	{r3}
 80090d8:	469e      	mov	lr, r3
 80090da:	4770      	bx	lr

080090dc <_fini>:
 80090dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80090de:	bf00      	nop
 80090e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80090e2:	bc08      	pop	{r3}
 80090e4:	469e      	mov	lr, r3
 80090e6:	4770      	bx	lr
